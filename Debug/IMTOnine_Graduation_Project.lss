
IMTOnine_Graduation_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007678  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000004bc  00800060  00007678  0000770c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002e  0080051c  0080051c  00007bc8  2**0
                  ALLOC
  3 .stab         000074c4  00000000  00000000  00007bc8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001aae  00000000  00000000  0000f08c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00010b3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00010c7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00010dea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00012a33  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0001391e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000146cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0001482c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00014ab9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00015287  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 54 1a 	jmp	0x34a8	; 0x34a8 <__vector_15>
      40:	0c 94 73 06 	jmp	0xce6	; 0xce6 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	15 e0       	ldi	r17, 0x05	; 5
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e7       	ldi	r30, 0x78	; 120
      68:	f6 e7       	ldi	r31, 0x76	; 118
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 31       	cpi	r26, 0x1C	; 28
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	15 e0       	ldi	r17, 0x05	; 5
      78:	ac e1       	ldi	r26, 0x1C	; 28
      7a:	b5 e0       	ldi	r27, 0x05	; 5
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 34       	cpi	r26, 0x4A	; 74
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 23 1b 	call	0x3646	; 0x3646 <main>
      8a:	0c 94 3a 3b 	jmp	0x7674	; 0x7674 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 03 3b 	jmp	0x7606	; 0x7606 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 e0       	ldi	r26, 0x04	; 4
     128:	b5 e0       	ldi	r27, 0x05	; 5
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 1f 3b 	jmp	0x763e	; 0x763e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 0f 3b 	jmp	0x761e	; 0x761e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 2b 3b 	jmp	0x7656	; 0x7656 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 0f 3b 	jmp	0x761e	; 0x761e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 2b 3b 	jmp	0x7656	; 0x7656 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 03 3b 	jmp	0x7606	; 0x7606 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	84 e0       	ldi	r24, 0x04	; 4
     496:	95 e0       	ldi	r25, 0x05	; 5
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 1f 3b 	jmp	0x763e	; 0x763e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 0f 3b 	jmp	0x761e	; 0x761e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 2b 3b 	jmp	0x7656	; 0x7656 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 0f 3b 	jmp	0x761e	; 0x761e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 2b 3b 	jmp	0x7656	; 0x7656 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 0f 3b 	jmp	0x761e	; 0x761e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 2b 3b 	jmp	0x7656	; 0x7656 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 13 3b 	jmp	0x7626	; 0x7626 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 2f 3b 	jmp	0x765e	; 0x765e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_FreeRunningSetCallBack>:
//void ADC_StartConversion(u8 ChannelNum,/*u8 Adjustment*/u16 *ptr);

static void (*ADC_pf_FreeRunning)(u16 input)= NULL;

void ADC_FreeRunningSetCallBack( void (*Action_FreeRunning)(u16 Variable_has_Adc_Val) )
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <ADC_FreeRunningSetCallBack+0x6>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	9a 83       	std	Y+2, r25	; 0x02
     b52:	89 83       	std	Y+1, r24	; 0x01
	if(Action_FreeRunning!=NULL)
     b54:	89 81       	ldd	r24, Y+1	; 0x01
     b56:	9a 81       	ldd	r25, Y+2	; 0x02
     b58:	00 97       	sbiw	r24, 0x00	; 0
     b5a:	31 f0       	breq	.+12     	; 0xb68 <ADC_FreeRunningSetCallBack+0x22>
	{
		ADC_pf_FreeRunning=Action_FreeRunning;
     b5c:	89 81       	ldd	r24, Y+1	; 0x01
     b5e:	9a 81       	ldd	r25, Y+2	; 0x02
     b60:	90 93 1d 05 	sts	0x051D, r25
     b64:	80 93 1c 05 	sts	0x051C, r24
	}
}
     b68:	0f 90       	pop	r0
     b6a:	0f 90       	pop	r0
     b6c:	cf 91       	pop	r28
     b6e:	df 91       	pop	r29
     b70:	08 95       	ret

00000b72 <ADC_Init>:

void ADC_Init(void)
{
     b72:	df 93       	push	r29
     b74:	cf 93       	push	r28
     b76:	cd b7       	in	r28, 0x3d	; 61
     b78:	de b7       	in	r29, 0x3e	; 62
	clr_bit(ADMUX,7);//vref source
     b7a:	a7 e2       	ldi	r26, 0x27	; 39
     b7c:	b0 e0       	ldi	r27, 0x00	; 0
     b7e:	e7 e2       	ldi	r30, 0x27	; 39
     b80:	f0 e0       	ldi	r31, 0x00	; 0
     b82:	80 81       	ld	r24, Z
     b84:	8f 77       	andi	r24, 0x7F	; 127
     b86:	8c 93       	st	X, r24
	set_bit(ADMUX,6);//vref source
     b88:	a7 e2       	ldi	r26, 0x27	; 39
     b8a:	b0 e0       	ldi	r27, 0x00	; 0
     b8c:	e7 e2       	ldi	r30, 0x27	; 39
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	80 81       	ld	r24, Z
     b92:	80 64       	ori	r24, 0x40	; 64
     b94:	8c 93       	st	X, r24
	set_bit(ADCSRA,7);//adc enable
     b96:	a6 e2       	ldi	r26, 0x26	; 38
     b98:	b0 e0       	ldi	r27, 0x00	; 0
     b9a:	e6 e2       	ldi	r30, 0x26	; 38
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	80 81       	ld	r24, Z
     ba0:	80 68       	ori	r24, 0x80	; 128
     ba2:	8c 93       	st	X, r24
#if Resolution==0//right adj
	clr_bit(ADMUX,5);
#elif Resolution==1//left adj
	set_bit(ADMUX,5);
     ba4:	a7 e2       	ldi	r26, 0x27	; 39
     ba6:	b0 e0       	ldi	r27, 0x00	; 0
     ba8:	e7 e2       	ldi	r30, 0x27	; 39
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	80 81       	ld	r24, Z
     bae:	80 62       	ori	r24, 0x20	; 32
     bb0:	8c 93       	st	X, r24
#endif
}
     bb2:	cf 91       	pop	r28
     bb4:	df 91       	pop	r29
     bb6:	08 95       	ret

00000bb8 <ADC_Init_FreeRunning_Mode>:

void ADC_Init_FreeRunning_Mode(void)
{
     bb8:	df 93       	push	r29
     bba:	cf 93       	push	r28
     bbc:	cd b7       	in	r28, 0x3d	; 61
     bbe:	de b7       	in	r29, 0x3e	; 62
	clr_bit(ADMUX,7);//vref source
     bc0:	a7 e2       	ldi	r26, 0x27	; 39
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	e7 e2       	ldi	r30, 0x27	; 39
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	80 81       	ld	r24, Z
     bca:	8f 77       	andi	r24, 0x7F	; 127
     bcc:	8c 93       	st	X, r24
	set_bit(ADMUX,6);//vref source
     bce:	a7 e2       	ldi	r26, 0x27	; 39
     bd0:	b0 e0       	ldi	r27, 0x00	; 0
     bd2:	e7 e2       	ldi	r30, 0x27	; 39
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	80 81       	ld	r24, Z
     bd8:	80 64       	ori	r24, 0x40	; 64
     bda:	8c 93       	st	X, r24
	set_bit(ADCSRA,5);//enable auto triggering
     bdc:	a6 e2       	ldi	r26, 0x26	; 38
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	e6 e2       	ldi	r30, 0x26	; 38
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	80 62       	ori	r24, 0x20	; 32
     be8:	8c 93       	st	X, r24
	set_bit(ADMUX,5);//Left adjustment
     bea:	a7 e2       	ldi	r26, 0x27	; 39
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	e7 e2       	ldi	r30, 0x27	; 39
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	80 81       	ld	r24, Z
     bf4:	80 62       	ori	r24, 0x20	; 32
     bf6:	8c 93       	st	X, r24
	ADC_Interrupt_Enable();//Enabling Interrupt
     bf8:	0e 94 57 06 	call	0xcae	; 0xcae <ADC_Interrupt_Enable>
	/* Free Running Mode */
	clr_bit(SFIOR,5);
     bfc:	a0 e5       	ldi	r26, 0x50	; 80
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	e0 e5       	ldi	r30, 0x50	; 80
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	80 81       	ld	r24, Z
     c06:	8f 7d       	andi	r24, 0xDF	; 223
     c08:	8c 93       	st	X, r24
	clr_bit(SFIOR,6);
     c0a:	a0 e5       	ldi	r26, 0x50	; 80
     c0c:	b0 e0       	ldi	r27, 0x00	; 0
     c0e:	e0 e5       	ldi	r30, 0x50	; 80
     c10:	f0 e0       	ldi	r31, 0x00	; 0
     c12:	80 81       	ld	r24, Z
     c14:	8f 7b       	andi	r24, 0xBF	; 191
     c16:	8c 93       	st	X, r24
	clr_bit(SFIOR,7);
     c18:	a0 e5       	ldi	r26, 0x50	; 80
     c1a:	b0 e0       	ldi	r27, 0x00	; 0
     c1c:	e0 e5       	ldi	r30, 0x50	; 80
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	80 81       	ld	r24, Z
     c22:	8f 77       	andi	r24, 0x7F	; 127
     c24:	8c 93       	st	X, r24
	/* Prescaler selection */
	set_bit(ADCSRA,0);
     c26:	a6 e2       	ldi	r26, 0x26	; 38
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	e6 e2       	ldi	r30, 0x26	; 38
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	80 81       	ld	r24, Z
     c30:	81 60       	ori	r24, 0x01	; 1
     c32:	8c 93       	st	X, r24
	set_bit(ADCSRA,1);
     c34:	a6 e2       	ldi	r26, 0x26	; 38
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	e6 e2       	ldi	r30, 0x26	; 38
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	82 60       	ori	r24, 0x02	; 2
     c40:	8c 93       	st	X, r24
	set_bit(ADCSRA,2);
     c42:	a6 e2       	ldi	r26, 0x26	; 38
     c44:	b0 e0       	ldi	r27, 0x00	; 0
     c46:	e6 e2       	ldi	r30, 0x26	; 38
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	80 81       	ld	r24, Z
     c4c:	84 60       	ori	r24, 0x04	; 4
     c4e:	8c 93       	st	X, r24
}
     c50:	cf 91       	pop	r28
     c52:	df 91       	pop	r29
     c54:	08 95       	ret

00000c56 <ADC_Enable>:
void ADC_Enable(void)
{
     c56:	df 93       	push	r29
     c58:	cf 93       	push	r28
     c5a:	cd b7       	in	r28, 0x3d	; 61
     c5c:	de b7       	in	r29, 0x3e	; 62
	/* Use it After selecting the ADC Channel */
	set_bit(ADCSRA,7);
     c5e:	a6 e2       	ldi	r26, 0x26	; 38
     c60:	b0 e0       	ldi	r27, 0x00	; 0
     c62:	e6 e2       	ldi	r30, 0x26	; 38
     c64:	f0 e0       	ldi	r31, 0x00	; 0
     c66:	80 81       	ld	r24, Z
     c68:	80 68       	ori	r24, 0x80	; 128
     c6a:	8c 93       	st	X, r24
	ADC_StartConversion();
     c6c:	0e 94 49 06 	call	0xc92	; 0xc92 <ADC_StartConversion>
}
     c70:	cf 91       	pop	r28
     c72:	df 91       	pop	r29
     c74:	08 95       	ret

00000c76 <ADC_Dsiable>:
void ADC_Dsiable(void)
{
     c76:	df 93       	push	r29
     c78:	cf 93       	push	r28
     c7a:	cd b7       	in	r28, 0x3d	; 61
     c7c:	de b7       	in	r29, 0x3e	; 62
	clr_bit(ADCSRA,7);
     c7e:	a6 e2       	ldi	r26, 0x26	; 38
     c80:	b0 e0       	ldi	r27, 0x00	; 0
     c82:	e6 e2       	ldi	r30, 0x26	; 38
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	80 81       	ld	r24, Z
     c88:	8f 77       	andi	r24, 0x7F	; 127
     c8a:	8c 93       	st	X, r24
}
     c8c:	cf 91       	pop	r28
     c8e:	df 91       	pop	r29
     c90:	08 95       	ret

00000c92 <ADC_StartConversion>:
void ADC_StartConversion(void)
{
     c92:	df 93       	push	r29
     c94:	cf 93       	push	r28
     c96:	cd b7       	in	r28, 0x3d	; 61
     c98:	de b7       	in	r29, 0x3e	; 62
	set_bit(ADCSRA,6);
     c9a:	a6 e2       	ldi	r26, 0x26	; 38
     c9c:	b0 e0       	ldi	r27, 0x00	; 0
     c9e:	e6 e2       	ldi	r30, 0x26	; 38
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	80 81       	ld	r24, Z
     ca4:	80 64       	ori	r24, 0x40	; 64
     ca6:	8c 93       	st	X, r24
}
     ca8:	cf 91       	pop	r28
     caa:	df 91       	pop	r29
     cac:	08 95       	ret

00000cae <ADC_Interrupt_Enable>:

void ADC_Interrupt_Enable(void)
{
     cae:	df 93       	push	r29
     cb0:	cf 93       	push	r28
     cb2:	cd b7       	in	r28, 0x3d	; 61
     cb4:	de b7       	in	r29, 0x3e	; 62
	/* Don't Forget Global interrupt Enable */
	set_bit(ADCSRA,3);
     cb6:	a6 e2       	ldi	r26, 0x26	; 38
     cb8:	b0 e0       	ldi	r27, 0x00	; 0
     cba:	e6 e2       	ldi	r30, 0x26	; 38
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	80 81       	ld	r24, Z
     cc0:	88 60       	ori	r24, 0x08	; 8
     cc2:	8c 93       	st	X, r24
}
     cc4:	cf 91       	pop	r28
     cc6:	df 91       	pop	r29
     cc8:	08 95       	ret

00000cca <ADC_Interrupt_Disable>:
void ADC_Interrupt_Disable(void)
{
     cca:	df 93       	push	r29
     ccc:	cf 93       	push	r28
     cce:	cd b7       	in	r28, 0x3d	; 61
     cd0:	de b7       	in	r29, 0x3e	; 62
	clr_bit(ADCSRA,3);
     cd2:	a6 e2       	ldi	r26, 0x26	; 38
     cd4:	b0 e0       	ldi	r27, 0x00	; 0
     cd6:	e6 e2       	ldi	r30, 0x26	; 38
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	80 81       	ld	r24, Z
     cdc:	87 7f       	andi	r24, 0xF7	; 247
     cde:	8c 93       	st	X, r24
}
     ce0:	cf 91       	pop	r28
     ce2:	df 91       	pop	r29
     ce4:	08 95       	ret

00000ce6 <__vector_16>:
void __vector_16(void)
{
     ce6:	1f 92       	push	r1
     ce8:	0f 92       	push	r0
     cea:	0f b6       	in	r0, 0x3f	; 63
     cec:	0f 92       	push	r0
     cee:	11 24       	eor	r1, r1
     cf0:	2f 93       	push	r18
     cf2:	3f 93       	push	r19
     cf4:	4f 93       	push	r20
     cf6:	5f 93       	push	r21
     cf8:	6f 93       	push	r22
     cfa:	7f 93       	push	r23
     cfc:	8f 93       	push	r24
     cfe:	9f 93       	push	r25
     d00:	af 93       	push	r26
     d02:	bf 93       	push	r27
     d04:	ef 93       	push	r30
     d06:	ff 93       	push	r31
     d08:	df 93       	push	r29
     d0a:	cf 93       	push	r28
     d0c:	00 d0       	rcall	.+0      	; 0xd0e <__vector_16+0x28>
     d0e:	cd b7       	in	r28, 0x3d	; 61
     d10:	de b7       	in	r29, 0x3e	; 62
	u16 Result = ADCH;//3shan 3mlna left adjustment
     d12:	e5 e2       	ldi	r30, 0x25	; 37
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	80 81       	ld	r24, Z
     d18:	88 2f       	mov	r24, r24
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	9a 83       	std	Y+2, r25	; 0x02
     d1e:	89 83       	std	Y+1, r24	; 0x01
	/* ADC ISR */
	ADC_pf_FreeRunning(Result);
     d20:	e0 91 1c 05 	lds	r30, 0x051C
     d24:	f0 91 1d 05 	lds	r31, 0x051D
     d28:	89 81       	ldd	r24, Y+1	; 0x01
     d2a:	9a 81       	ldd	r25, Y+2	; 0x02
     d2c:	09 95       	icall
//	set_bit(ADCSRA,4);
}
     d2e:	0f 90       	pop	r0
     d30:	0f 90       	pop	r0
     d32:	cf 91       	pop	r28
     d34:	df 91       	pop	r29
     d36:	ff 91       	pop	r31
     d38:	ef 91       	pop	r30
     d3a:	bf 91       	pop	r27
     d3c:	af 91       	pop	r26
     d3e:	9f 91       	pop	r25
     d40:	8f 91       	pop	r24
     d42:	7f 91       	pop	r23
     d44:	6f 91       	pop	r22
     d46:	5f 91       	pop	r21
     d48:	4f 91       	pop	r20
     d4a:	3f 91       	pop	r19
     d4c:	2f 91       	pop	r18
     d4e:	0f 90       	pop	r0
     d50:	0f be       	out	0x3f, r0	; 63
     d52:	0f 90       	pop	r0
     d54:	1f 90       	pop	r1
     d56:	18 95       	reti

00000d58 <ADC_ChannelSelect_FreeRunning_Mode>:
void ADC_ChannelSelect_FreeRunning_Mode(u8 ChannelNum)
{
     d58:	df 93       	push	r29
     d5a:	cf 93       	push	r28
     d5c:	00 d0       	rcall	.+0      	; 0xd5e <ADC_ChannelSelect_FreeRunning_Mode+0x6>
     d5e:	0f 92       	push	r0
     d60:	cd b7       	in	r28, 0x3d	; 61
     d62:	de b7       	in	r29, 0x3e	; 62
     d64:	89 83       	std	Y+1, r24	; 0x01
	switch (ChannelNum)
     d66:	89 81       	ldd	r24, Y+1	; 0x01
     d68:	28 2f       	mov	r18, r24
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	3b 83       	std	Y+3, r19	; 0x03
     d6e:	2a 83       	std	Y+2, r18	; 0x02
     d70:	8a 81       	ldd	r24, Y+2	; 0x02
     d72:	9b 81       	ldd	r25, Y+3	; 0x03
     d74:	83 30       	cpi	r24, 0x03	; 3
     d76:	91 05       	cpc	r25, r1
     d78:	09 f4       	brne	.+2      	; 0xd7c <ADC_ChannelSelect_FreeRunning_Mode+0x24>
     d7a:	9b c0       	rjmp	.+310    	; 0xeb2 <ADC_ChannelSelect_FreeRunning_Mode+0x15a>
     d7c:	2a 81       	ldd	r18, Y+2	; 0x02
     d7e:	3b 81       	ldd	r19, Y+3	; 0x03
     d80:	24 30       	cpi	r18, 0x04	; 4
     d82:	31 05       	cpc	r19, r1
     d84:	8c f4       	brge	.+34     	; 0xda8 <ADC_ChannelSelect_FreeRunning_Mode+0x50>
     d86:	8a 81       	ldd	r24, Y+2	; 0x02
     d88:	9b 81       	ldd	r25, Y+3	; 0x03
     d8a:	81 30       	cpi	r24, 0x01	; 1
     d8c:	91 05       	cpc	r25, r1
     d8e:	09 f4       	brne	.+2      	; 0xd92 <ADC_ChannelSelect_FreeRunning_Mode+0x3a>
     d90:	48 c0       	rjmp	.+144    	; 0xe22 <ADC_ChannelSelect_FreeRunning_Mode+0xca>
     d92:	2a 81       	ldd	r18, Y+2	; 0x02
     d94:	3b 81       	ldd	r19, Y+3	; 0x03
     d96:	22 30       	cpi	r18, 0x02	; 2
     d98:	31 05       	cpc	r19, r1
     d9a:	0c f0       	brlt	.+2      	; 0xd9e <ADC_ChannelSelect_FreeRunning_Mode+0x46>
     d9c:	66 c0       	rjmp	.+204    	; 0xe6a <ADC_ChannelSelect_FreeRunning_Mode+0x112>
     d9e:	8a 81       	ldd	r24, Y+2	; 0x02
     da0:	9b 81       	ldd	r25, Y+3	; 0x03
     da2:	00 97       	sbiw	r24, 0x00	; 0
     da4:	d1 f0       	breq	.+52     	; 0xdda <ADC_ChannelSelect_FreeRunning_Mode+0x82>
     da6:	38 c1       	rjmp	.+624    	; 0x1018 <ADC_ChannelSelect_FreeRunning_Mode+0x2c0>
     da8:	2a 81       	ldd	r18, Y+2	; 0x02
     daa:	3b 81       	ldd	r19, Y+3	; 0x03
     dac:	25 30       	cpi	r18, 0x05	; 5
     dae:	31 05       	cpc	r19, r1
     db0:	09 f4       	brne	.+2      	; 0xdb4 <ADC_ChannelSelect_FreeRunning_Mode+0x5c>
     db2:	c7 c0       	rjmp	.+398    	; 0xf42 <ADC_ChannelSelect_FreeRunning_Mode+0x1ea>
     db4:	8a 81       	ldd	r24, Y+2	; 0x02
     db6:	9b 81       	ldd	r25, Y+3	; 0x03
     db8:	85 30       	cpi	r24, 0x05	; 5
     dba:	91 05       	cpc	r25, r1
     dbc:	0c f4       	brge	.+2      	; 0xdc0 <ADC_ChannelSelect_FreeRunning_Mode+0x68>
     dbe:	9d c0       	rjmp	.+314    	; 0xefa <ADC_ChannelSelect_FreeRunning_Mode+0x1a2>
     dc0:	2a 81       	ldd	r18, Y+2	; 0x02
     dc2:	3b 81       	ldd	r19, Y+3	; 0x03
     dc4:	26 30       	cpi	r18, 0x06	; 6
     dc6:	31 05       	cpc	r19, r1
     dc8:	09 f4       	brne	.+2      	; 0xdcc <ADC_ChannelSelect_FreeRunning_Mode+0x74>
     dca:	df c0       	rjmp	.+446    	; 0xf8a <ADC_ChannelSelect_FreeRunning_Mode+0x232>
     dcc:	8a 81       	ldd	r24, Y+2	; 0x02
     dce:	9b 81       	ldd	r25, Y+3	; 0x03
     dd0:	87 30       	cpi	r24, 0x07	; 7
     dd2:	91 05       	cpc	r25, r1
     dd4:	09 f4       	brne	.+2      	; 0xdd8 <ADC_ChannelSelect_FreeRunning_Mode+0x80>
     dd6:	fd c0       	rjmp	.+506    	; 0xfd2 <ADC_ChannelSelect_FreeRunning_Mode+0x27a>
     dd8:	1f c1       	rjmp	.+574    	; 0x1018 <ADC_ChannelSelect_FreeRunning_Mode+0x2c0>
	{
			case ADC_Chann0:
				clr_bit(ADMUX,0);
     dda:	a7 e2       	ldi	r26, 0x27	; 39
     ddc:	b0 e0       	ldi	r27, 0x00	; 0
     dde:	e7 e2       	ldi	r30, 0x27	; 39
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	80 81       	ld	r24, Z
     de4:	8e 7f       	andi	r24, 0xFE	; 254
     de6:	8c 93       	st	X, r24
				clr_bit(ADMUX,1);
     de8:	a7 e2       	ldi	r26, 0x27	; 39
     dea:	b0 e0       	ldi	r27, 0x00	; 0
     dec:	e7 e2       	ldi	r30, 0x27	; 39
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	80 81       	ld	r24, Z
     df2:	8d 7f       	andi	r24, 0xFD	; 253
     df4:	8c 93       	st	X, r24
				clr_bit(ADMUX,2);
     df6:	a7 e2       	ldi	r26, 0x27	; 39
     df8:	b0 e0       	ldi	r27, 0x00	; 0
     dfa:	e7 e2       	ldi	r30, 0x27	; 39
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	80 81       	ld	r24, Z
     e00:	8b 7f       	andi	r24, 0xFB	; 251
     e02:	8c 93       	st	X, r24
				clr_bit(ADMUX,3);
     e04:	a7 e2       	ldi	r26, 0x27	; 39
     e06:	b0 e0       	ldi	r27, 0x00	; 0
     e08:	e7 e2       	ldi	r30, 0x27	; 39
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	80 81       	ld	r24, Z
     e0e:	87 7f       	andi	r24, 0xF7	; 247
     e10:	8c 93       	st	X, r24
				clr_bit(ADMUX,4);
     e12:	a7 e2       	ldi	r26, 0x27	; 39
     e14:	b0 e0       	ldi	r27, 0x00	; 0
     e16:	e7 e2       	ldi	r30, 0x27	; 39
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	80 81       	ld	r24, Z
     e1c:	8f 7e       	andi	r24, 0xEF	; 239
     e1e:	8c 93       	st	X, r24
     e20:	fb c0       	rjmp	.+502    	; 0x1018 <ADC_ChannelSelect_FreeRunning_Mode+0x2c0>


				break;
			case ADC_Chann1:
				set_bit(ADMUX,0);
     e22:	a7 e2       	ldi	r26, 0x27	; 39
     e24:	b0 e0       	ldi	r27, 0x00	; 0
     e26:	e7 e2       	ldi	r30, 0x27	; 39
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	80 81       	ld	r24, Z
     e2c:	81 60       	ori	r24, 0x01	; 1
     e2e:	8c 93       	st	X, r24
				clr_bit(ADMUX,1);
     e30:	a7 e2       	ldi	r26, 0x27	; 39
     e32:	b0 e0       	ldi	r27, 0x00	; 0
     e34:	e7 e2       	ldi	r30, 0x27	; 39
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	80 81       	ld	r24, Z
     e3a:	8d 7f       	andi	r24, 0xFD	; 253
     e3c:	8c 93       	st	X, r24
				clr_bit(ADMUX,2);
     e3e:	a7 e2       	ldi	r26, 0x27	; 39
     e40:	b0 e0       	ldi	r27, 0x00	; 0
     e42:	e7 e2       	ldi	r30, 0x27	; 39
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	80 81       	ld	r24, Z
     e48:	8b 7f       	andi	r24, 0xFB	; 251
     e4a:	8c 93       	st	X, r24
				clr_bit(ADMUX,3);
     e4c:	a7 e2       	ldi	r26, 0x27	; 39
     e4e:	b0 e0       	ldi	r27, 0x00	; 0
     e50:	e7 e2       	ldi	r30, 0x27	; 39
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	80 81       	ld	r24, Z
     e56:	87 7f       	andi	r24, 0xF7	; 247
     e58:	8c 93       	st	X, r24
				clr_bit(ADMUX,4);
     e5a:	a7 e2       	ldi	r26, 0x27	; 39
     e5c:	b0 e0       	ldi	r27, 0x00	; 0
     e5e:	e7 e2       	ldi	r30, 0x27	; 39
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	80 81       	ld	r24, Z
     e64:	8f 7e       	andi	r24, 0xEF	; 239
     e66:	8c 93       	st	X, r24
     e68:	d7 c0       	rjmp	.+430    	; 0x1018 <ADC_ChannelSelect_FreeRunning_Mode+0x2c0>

				break;
			case ADC_Chann2:
				clr_bit(ADMUX,0);
     e6a:	a7 e2       	ldi	r26, 0x27	; 39
     e6c:	b0 e0       	ldi	r27, 0x00	; 0
     e6e:	e7 e2       	ldi	r30, 0x27	; 39
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	80 81       	ld	r24, Z
     e74:	8e 7f       	andi	r24, 0xFE	; 254
     e76:	8c 93       	st	X, r24
				set_bit(ADMUX,1);
     e78:	a7 e2       	ldi	r26, 0x27	; 39
     e7a:	b0 e0       	ldi	r27, 0x00	; 0
     e7c:	e7 e2       	ldi	r30, 0x27	; 39
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	80 81       	ld	r24, Z
     e82:	82 60       	ori	r24, 0x02	; 2
     e84:	8c 93       	st	X, r24
				clr_bit(ADMUX,2);
     e86:	a7 e2       	ldi	r26, 0x27	; 39
     e88:	b0 e0       	ldi	r27, 0x00	; 0
     e8a:	e7 e2       	ldi	r30, 0x27	; 39
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	80 81       	ld	r24, Z
     e90:	8b 7f       	andi	r24, 0xFB	; 251
     e92:	8c 93       	st	X, r24
				clr_bit(ADMUX,3);
     e94:	a7 e2       	ldi	r26, 0x27	; 39
     e96:	b0 e0       	ldi	r27, 0x00	; 0
     e98:	e7 e2       	ldi	r30, 0x27	; 39
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	80 81       	ld	r24, Z
     e9e:	87 7f       	andi	r24, 0xF7	; 247
     ea0:	8c 93       	st	X, r24
				clr_bit(ADMUX,4);
     ea2:	a7 e2       	ldi	r26, 0x27	; 39
     ea4:	b0 e0       	ldi	r27, 0x00	; 0
     ea6:	e7 e2       	ldi	r30, 0x27	; 39
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	80 81       	ld	r24, Z
     eac:	8f 7e       	andi	r24, 0xEF	; 239
     eae:	8c 93       	st	X, r24
     eb0:	b3 c0       	rjmp	.+358    	; 0x1018 <ADC_ChannelSelect_FreeRunning_Mode+0x2c0>
				break;
			case ADC_Chann3:
				set_bit(ADMUX,0);
     eb2:	a7 e2       	ldi	r26, 0x27	; 39
     eb4:	b0 e0       	ldi	r27, 0x00	; 0
     eb6:	e7 e2       	ldi	r30, 0x27	; 39
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	80 81       	ld	r24, Z
     ebc:	81 60       	ori	r24, 0x01	; 1
     ebe:	8c 93       	st	X, r24
				set_bit(ADMUX,1);
     ec0:	a7 e2       	ldi	r26, 0x27	; 39
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	e7 e2       	ldi	r30, 0x27	; 39
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	82 60       	ori	r24, 0x02	; 2
     ecc:	8c 93       	st	X, r24
				clr_bit(ADMUX,2);
     ece:	a7 e2       	ldi	r26, 0x27	; 39
     ed0:	b0 e0       	ldi	r27, 0x00	; 0
     ed2:	e7 e2       	ldi	r30, 0x27	; 39
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	80 81       	ld	r24, Z
     ed8:	8b 7f       	andi	r24, 0xFB	; 251
     eda:	8c 93       	st	X, r24
				clr_bit(ADMUX,3);
     edc:	a7 e2       	ldi	r26, 0x27	; 39
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	e7 e2       	ldi	r30, 0x27	; 39
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	87 7f       	andi	r24, 0xF7	; 247
     ee8:	8c 93       	st	X, r24
				clr_bit(ADMUX,4);
     eea:	a7 e2       	ldi	r26, 0x27	; 39
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	e7 e2       	ldi	r30, 0x27	; 39
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	8f 7e       	andi	r24, 0xEF	; 239
     ef6:	8c 93       	st	X, r24
     ef8:	8f c0       	rjmp	.+286    	; 0x1018 <ADC_ChannelSelect_FreeRunning_Mode+0x2c0>

				break;
			case ADC_Chann4:
				clr_bit(ADMUX,0);
     efa:	a7 e2       	ldi	r26, 0x27	; 39
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	e7 e2       	ldi	r30, 0x27	; 39
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
     f04:	8e 7f       	andi	r24, 0xFE	; 254
     f06:	8c 93       	st	X, r24
				clr_bit(ADMUX,1);
     f08:	a7 e2       	ldi	r26, 0x27	; 39
     f0a:	b0 e0       	ldi	r27, 0x00	; 0
     f0c:	e7 e2       	ldi	r30, 0x27	; 39
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	80 81       	ld	r24, Z
     f12:	8d 7f       	andi	r24, 0xFD	; 253
     f14:	8c 93       	st	X, r24
				set_bit(ADMUX,2);
     f16:	a7 e2       	ldi	r26, 0x27	; 39
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	e7 e2       	ldi	r30, 0x27	; 39
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	84 60       	ori	r24, 0x04	; 4
     f22:	8c 93       	st	X, r24
				clr_bit(ADMUX,3);
     f24:	a7 e2       	ldi	r26, 0x27	; 39
     f26:	b0 e0       	ldi	r27, 0x00	; 0
     f28:	e7 e2       	ldi	r30, 0x27	; 39
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	87 7f       	andi	r24, 0xF7	; 247
     f30:	8c 93       	st	X, r24
				clr_bit(ADMUX,4);
     f32:	a7 e2       	ldi	r26, 0x27	; 39
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	e7 e2       	ldi	r30, 0x27	; 39
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	8f 7e       	andi	r24, 0xEF	; 239
     f3e:	8c 93       	st	X, r24
     f40:	6b c0       	rjmp	.+214    	; 0x1018 <ADC_ChannelSelect_FreeRunning_Mode+0x2c0>
				break;
			case ADC_Chann5:
				set_bit(ADMUX,0);
     f42:	a7 e2       	ldi	r26, 0x27	; 39
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	e7 e2       	ldi	r30, 0x27	; 39
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	81 60       	ori	r24, 0x01	; 1
     f4e:	8c 93       	st	X, r24
				clr_bit(ADMUX,1);
     f50:	a7 e2       	ldi	r26, 0x27	; 39
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	e7 e2       	ldi	r30, 0x27	; 39
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	8d 7f       	andi	r24, 0xFD	; 253
     f5c:	8c 93       	st	X, r24
				set_bit(ADMUX,2);
     f5e:	a7 e2       	ldi	r26, 0x27	; 39
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	e7 e2       	ldi	r30, 0x27	; 39
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	84 60       	ori	r24, 0x04	; 4
     f6a:	8c 93       	st	X, r24
				clr_bit(ADMUX,3);
     f6c:	a7 e2       	ldi	r26, 0x27	; 39
     f6e:	b0 e0       	ldi	r27, 0x00	; 0
     f70:	e7 e2       	ldi	r30, 0x27	; 39
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	87 7f       	andi	r24, 0xF7	; 247
     f78:	8c 93       	st	X, r24
				clr_bit(ADMUX,4);
     f7a:	a7 e2       	ldi	r26, 0x27	; 39
     f7c:	b0 e0       	ldi	r27, 0x00	; 0
     f7e:	e7 e2       	ldi	r30, 0x27	; 39
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 81       	ld	r24, Z
     f84:	8f 7e       	andi	r24, 0xEF	; 239
     f86:	8c 93       	st	X, r24
     f88:	47 c0       	rjmp	.+142    	; 0x1018 <ADC_ChannelSelect_FreeRunning_Mode+0x2c0>
				break;
			case ADC_Chann6:
				clr_bit(ADMUX,0);
     f8a:	a7 e2       	ldi	r26, 0x27	; 39
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	e7 e2       	ldi	r30, 0x27	; 39
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	8e 7f       	andi	r24, 0xFE	; 254
     f96:	8c 93       	st	X, r24
				set_bit(ADMUX,1);
     f98:	a7 e2       	ldi	r26, 0x27	; 39
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	e7 e2       	ldi	r30, 0x27	; 39
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	82 60       	ori	r24, 0x02	; 2
     fa4:	8c 93       	st	X, r24
				set_bit(ADMUX,2);
     fa6:	a7 e2       	ldi	r26, 0x27	; 39
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	e7 e2       	ldi	r30, 0x27	; 39
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	84 60       	ori	r24, 0x04	; 4
     fb2:	8c 93       	st	X, r24
				clr_bit(ADMUX,3);
     fb4:	a7 e2       	ldi	r26, 0x27	; 39
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	e7 e2       	ldi	r30, 0x27	; 39
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	87 7f       	andi	r24, 0xF7	; 247
     fc0:	8c 93       	st	X, r24
				clr_bit(ADMUX,4);
     fc2:	a7 e2       	ldi	r26, 0x27	; 39
     fc4:	b0 e0       	ldi	r27, 0x00	; 0
     fc6:	e7 e2       	ldi	r30, 0x27	; 39
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	8f 7e       	andi	r24, 0xEF	; 239
     fce:	8c 93       	st	X, r24
     fd0:	23 c0       	rjmp	.+70     	; 0x1018 <ADC_ChannelSelect_FreeRunning_Mode+0x2c0>
				break;
			case ADC_Chann7:
				set_bit(ADMUX,0);
     fd2:	a7 e2       	ldi	r26, 0x27	; 39
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	e7 e2       	ldi	r30, 0x27	; 39
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	81 60       	ori	r24, 0x01	; 1
     fde:	8c 93       	st	X, r24
				set_bit(ADMUX,1);
     fe0:	a7 e2       	ldi	r26, 0x27	; 39
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	e7 e2       	ldi	r30, 0x27	; 39
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	82 60       	ori	r24, 0x02	; 2
     fec:	8c 93       	st	X, r24
				set_bit(ADMUX,2);
     fee:	a7 e2       	ldi	r26, 0x27	; 39
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	e7 e2       	ldi	r30, 0x27	; 39
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	84 60       	ori	r24, 0x04	; 4
     ffa:	8c 93       	st	X, r24
				clr_bit(ADMUX,3);
     ffc:	a7 e2       	ldi	r26, 0x27	; 39
     ffe:	b0 e0       	ldi	r27, 0x00	; 0
    1000:	e7 e2       	ldi	r30, 0x27	; 39
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	87 7f       	andi	r24, 0xF7	; 247
    1008:	8c 93       	st	X, r24
				clr_bit(ADMUX,4);
    100a:	a7 e2       	ldi	r26, 0x27	; 39
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	e7 e2       	ldi	r30, 0x27	; 39
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	8f 7e       	andi	r24, 0xEF	; 239
    1016:	8c 93       	st	X, r24
				break;
	}

}
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	cf 91       	pop	r28
    1020:	df 91       	pop	r29
    1022:	08 95       	ret

00001024 <ADC_StartConversion_SingleMode>:

void ADC_StartConversion_SingleMode(u8 ChannelNum,/*u8 Adjustment,*/u16 *ptr)
{
    1024:	df 93       	push	r29
    1026:	cf 93       	push	r28
    1028:	00 d0       	rcall	.+0      	; 0x102a <ADC_StartConversion_SingleMode+0x6>
    102a:	00 d0       	rcall	.+0      	; 0x102c <ADC_StartConversion_SingleMode+0x8>
    102c:	0f 92       	push	r0
    102e:	cd b7       	in	r28, 0x3d	; 61
    1030:	de b7       	in	r29, 0x3e	; 62
    1032:	89 83       	std	Y+1, r24	; 0x01
    1034:	7b 83       	std	Y+3, r23	; 0x03
    1036:	6a 83       	std	Y+2, r22	; 0x02
	switch (ChannelNum)
    1038:	89 81       	ldd	r24, Y+1	; 0x01
    103a:	28 2f       	mov	r18, r24
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	3d 83       	std	Y+5, r19	; 0x05
    1040:	2c 83       	std	Y+4, r18	; 0x04
    1042:	8c 81       	ldd	r24, Y+4	; 0x04
    1044:	9d 81       	ldd	r25, Y+5	; 0x05
    1046:	83 30       	cpi	r24, 0x03	; 3
    1048:	91 05       	cpc	r25, r1
    104a:	09 f4       	brne	.+2      	; 0x104e <ADC_StartConversion_SingleMode+0x2a>
    104c:	9b c0       	rjmp	.+310    	; 0x1184 <ADC_StartConversion_SingleMode+0x160>
    104e:	2c 81       	ldd	r18, Y+4	; 0x04
    1050:	3d 81       	ldd	r19, Y+5	; 0x05
    1052:	24 30       	cpi	r18, 0x04	; 4
    1054:	31 05       	cpc	r19, r1
    1056:	8c f4       	brge	.+34     	; 0x107a <ADC_StartConversion_SingleMode+0x56>
    1058:	8c 81       	ldd	r24, Y+4	; 0x04
    105a:	9d 81       	ldd	r25, Y+5	; 0x05
    105c:	81 30       	cpi	r24, 0x01	; 1
    105e:	91 05       	cpc	r25, r1
    1060:	09 f4       	brne	.+2      	; 0x1064 <ADC_StartConversion_SingleMode+0x40>
    1062:	48 c0       	rjmp	.+144    	; 0x10f4 <ADC_StartConversion_SingleMode+0xd0>
    1064:	2c 81       	ldd	r18, Y+4	; 0x04
    1066:	3d 81       	ldd	r19, Y+5	; 0x05
    1068:	22 30       	cpi	r18, 0x02	; 2
    106a:	31 05       	cpc	r19, r1
    106c:	0c f0       	brlt	.+2      	; 0x1070 <ADC_StartConversion_SingleMode+0x4c>
    106e:	66 c0       	rjmp	.+204    	; 0x113c <ADC_StartConversion_SingleMode+0x118>
    1070:	8c 81       	ldd	r24, Y+4	; 0x04
    1072:	9d 81       	ldd	r25, Y+5	; 0x05
    1074:	00 97       	sbiw	r24, 0x00	; 0
    1076:	d1 f0       	breq	.+52     	; 0x10ac <ADC_StartConversion_SingleMode+0x88>
    1078:	38 c1       	rjmp	.+624    	; 0x12ea <ADC_StartConversion_SingleMode+0x2c6>
    107a:	2c 81       	ldd	r18, Y+4	; 0x04
    107c:	3d 81       	ldd	r19, Y+5	; 0x05
    107e:	25 30       	cpi	r18, 0x05	; 5
    1080:	31 05       	cpc	r19, r1
    1082:	09 f4       	brne	.+2      	; 0x1086 <ADC_StartConversion_SingleMode+0x62>
    1084:	c7 c0       	rjmp	.+398    	; 0x1214 <ADC_StartConversion_SingleMode+0x1f0>
    1086:	8c 81       	ldd	r24, Y+4	; 0x04
    1088:	9d 81       	ldd	r25, Y+5	; 0x05
    108a:	85 30       	cpi	r24, 0x05	; 5
    108c:	91 05       	cpc	r25, r1
    108e:	0c f4       	brge	.+2      	; 0x1092 <ADC_StartConversion_SingleMode+0x6e>
    1090:	9d c0       	rjmp	.+314    	; 0x11cc <ADC_StartConversion_SingleMode+0x1a8>
    1092:	2c 81       	ldd	r18, Y+4	; 0x04
    1094:	3d 81       	ldd	r19, Y+5	; 0x05
    1096:	26 30       	cpi	r18, 0x06	; 6
    1098:	31 05       	cpc	r19, r1
    109a:	09 f4       	brne	.+2      	; 0x109e <ADC_StartConversion_SingleMode+0x7a>
    109c:	df c0       	rjmp	.+446    	; 0x125c <ADC_StartConversion_SingleMode+0x238>
    109e:	8c 81       	ldd	r24, Y+4	; 0x04
    10a0:	9d 81       	ldd	r25, Y+5	; 0x05
    10a2:	87 30       	cpi	r24, 0x07	; 7
    10a4:	91 05       	cpc	r25, r1
    10a6:	09 f4       	brne	.+2      	; 0x10aa <ADC_StartConversion_SingleMode+0x86>
    10a8:	fd c0       	rjmp	.+506    	; 0x12a4 <ADC_StartConversion_SingleMode+0x280>
    10aa:	1f c1       	rjmp	.+574    	; 0x12ea <ADC_StartConversion_SingleMode+0x2c6>
	{
			case ADC_Chann0:
				clr_bit(ADMUX,0);
    10ac:	a7 e2       	ldi	r26, 0x27	; 39
    10ae:	b0 e0       	ldi	r27, 0x00	; 0
    10b0:	e7 e2       	ldi	r30, 0x27	; 39
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
    10b6:	8e 7f       	andi	r24, 0xFE	; 254
    10b8:	8c 93       	st	X, r24
				clr_bit(ADMUX,1);
    10ba:	a7 e2       	ldi	r26, 0x27	; 39
    10bc:	b0 e0       	ldi	r27, 0x00	; 0
    10be:	e7 e2       	ldi	r30, 0x27	; 39
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	8d 7f       	andi	r24, 0xFD	; 253
    10c6:	8c 93       	st	X, r24
				clr_bit(ADMUX,2);
    10c8:	a7 e2       	ldi	r26, 0x27	; 39
    10ca:	b0 e0       	ldi	r27, 0x00	; 0
    10cc:	e7 e2       	ldi	r30, 0x27	; 39
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	8b 7f       	andi	r24, 0xFB	; 251
    10d4:	8c 93       	st	X, r24
				clr_bit(ADMUX,3);
    10d6:	a7 e2       	ldi	r26, 0x27	; 39
    10d8:	b0 e0       	ldi	r27, 0x00	; 0
    10da:	e7 e2       	ldi	r30, 0x27	; 39
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	80 81       	ld	r24, Z
    10e0:	87 7f       	andi	r24, 0xF7	; 247
    10e2:	8c 93       	st	X, r24
				clr_bit(ADMUX,4);
    10e4:	a7 e2       	ldi	r26, 0x27	; 39
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	e7 e2       	ldi	r30, 0x27	; 39
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	8f 7e       	andi	r24, 0xEF	; 239
    10f0:	8c 93       	st	X, r24
    10f2:	fb c0       	rjmp	.+502    	; 0x12ea <ADC_StartConversion_SingleMode+0x2c6>


				break;
			case ADC_Chann1:
				set_bit(ADMUX,0);
    10f4:	a7 e2       	ldi	r26, 0x27	; 39
    10f6:	b0 e0       	ldi	r27, 0x00	; 0
    10f8:	e7 e2       	ldi	r30, 0x27	; 39
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 81       	ld	r24, Z
    10fe:	81 60       	ori	r24, 0x01	; 1
    1100:	8c 93       	st	X, r24
				clr_bit(ADMUX,1);
    1102:	a7 e2       	ldi	r26, 0x27	; 39
    1104:	b0 e0       	ldi	r27, 0x00	; 0
    1106:	e7 e2       	ldi	r30, 0x27	; 39
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	8d 7f       	andi	r24, 0xFD	; 253
    110e:	8c 93       	st	X, r24
				clr_bit(ADMUX,2);
    1110:	a7 e2       	ldi	r26, 0x27	; 39
    1112:	b0 e0       	ldi	r27, 0x00	; 0
    1114:	e7 e2       	ldi	r30, 0x27	; 39
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	80 81       	ld	r24, Z
    111a:	8b 7f       	andi	r24, 0xFB	; 251
    111c:	8c 93       	st	X, r24
				clr_bit(ADMUX,3);
    111e:	a7 e2       	ldi	r26, 0x27	; 39
    1120:	b0 e0       	ldi	r27, 0x00	; 0
    1122:	e7 e2       	ldi	r30, 0x27	; 39
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	80 81       	ld	r24, Z
    1128:	87 7f       	andi	r24, 0xF7	; 247
    112a:	8c 93       	st	X, r24
				clr_bit(ADMUX,4);
    112c:	a7 e2       	ldi	r26, 0x27	; 39
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	e7 e2       	ldi	r30, 0x27	; 39
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	8f 7e       	andi	r24, 0xEF	; 239
    1138:	8c 93       	st	X, r24
    113a:	d7 c0       	rjmp	.+430    	; 0x12ea <ADC_StartConversion_SingleMode+0x2c6>

				break;
			case ADC_Chann2:
				clr_bit(ADMUX,0);
    113c:	a7 e2       	ldi	r26, 0x27	; 39
    113e:	b0 e0       	ldi	r27, 0x00	; 0
    1140:	e7 e2       	ldi	r30, 0x27	; 39
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 81       	ld	r24, Z
    1146:	8e 7f       	andi	r24, 0xFE	; 254
    1148:	8c 93       	st	X, r24
				set_bit(ADMUX,1);
    114a:	a7 e2       	ldi	r26, 0x27	; 39
    114c:	b0 e0       	ldi	r27, 0x00	; 0
    114e:	e7 e2       	ldi	r30, 0x27	; 39
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	82 60       	ori	r24, 0x02	; 2
    1156:	8c 93       	st	X, r24
				clr_bit(ADMUX,2);
    1158:	a7 e2       	ldi	r26, 0x27	; 39
    115a:	b0 e0       	ldi	r27, 0x00	; 0
    115c:	e7 e2       	ldi	r30, 0x27	; 39
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	8b 7f       	andi	r24, 0xFB	; 251
    1164:	8c 93       	st	X, r24
				clr_bit(ADMUX,3);
    1166:	a7 e2       	ldi	r26, 0x27	; 39
    1168:	b0 e0       	ldi	r27, 0x00	; 0
    116a:	e7 e2       	ldi	r30, 0x27	; 39
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
    1170:	87 7f       	andi	r24, 0xF7	; 247
    1172:	8c 93       	st	X, r24
				clr_bit(ADMUX,4);
    1174:	a7 e2       	ldi	r26, 0x27	; 39
    1176:	b0 e0       	ldi	r27, 0x00	; 0
    1178:	e7 e2       	ldi	r30, 0x27	; 39
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	80 81       	ld	r24, Z
    117e:	8f 7e       	andi	r24, 0xEF	; 239
    1180:	8c 93       	st	X, r24
    1182:	b3 c0       	rjmp	.+358    	; 0x12ea <ADC_StartConversion_SingleMode+0x2c6>
				break;
			case ADC_Chann3:
				set_bit(ADMUX,0);
    1184:	a7 e2       	ldi	r26, 0x27	; 39
    1186:	b0 e0       	ldi	r27, 0x00	; 0
    1188:	e7 e2       	ldi	r30, 0x27	; 39
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	80 81       	ld	r24, Z
    118e:	81 60       	ori	r24, 0x01	; 1
    1190:	8c 93       	st	X, r24
				set_bit(ADMUX,1);
    1192:	a7 e2       	ldi	r26, 0x27	; 39
    1194:	b0 e0       	ldi	r27, 0x00	; 0
    1196:	e7 e2       	ldi	r30, 0x27	; 39
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	82 60       	ori	r24, 0x02	; 2
    119e:	8c 93       	st	X, r24
				clr_bit(ADMUX,2);
    11a0:	a7 e2       	ldi	r26, 0x27	; 39
    11a2:	b0 e0       	ldi	r27, 0x00	; 0
    11a4:	e7 e2       	ldi	r30, 0x27	; 39
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	80 81       	ld	r24, Z
    11aa:	8b 7f       	andi	r24, 0xFB	; 251
    11ac:	8c 93       	st	X, r24
				clr_bit(ADMUX,3);
    11ae:	a7 e2       	ldi	r26, 0x27	; 39
    11b0:	b0 e0       	ldi	r27, 0x00	; 0
    11b2:	e7 e2       	ldi	r30, 0x27	; 39
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	80 81       	ld	r24, Z
    11b8:	87 7f       	andi	r24, 0xF7	; 247
    11ba:	8c 93       	st	X, r24
				clr_bit(ADMUX,4);
    11bc:	a7 e2       	ldi	r26, 0x27	; 39
    11be:	b0 e0       	ldi	r27, 0x00	; 0
    11c0:	e7 e2       	ldi	r30, 0x27	; 39
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	80 81       	ld	r24, Z
    11c6:	8f 7e       	andi	r24, 0xEF	; 239
    11c8:	8c 93       	st	X, r24
    11ca:	8f c0       	rjmp	.+286    	; 0x12ea <ADC_StartConversion_SingleMode+0x2c6>

				break;
			case ADC_Chann4:
				clr_bit(ADMUX,0);
    11cc:	a7 e2       	ldi	r26, 0x27	; 39
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	e7 e2       	ldi	r30, 0x27	; 39
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	80 81       	ld	r24, Z
    11d6:	8e 7f       	andi	r24, 0xFE	; 254
    11d8:	8c 93       	st	X, r24
				clr_bit(ADMUX,1);
    11da:	a7 e2       	ldi	r26, 0x27	; 39
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	e7 e2       	ldi	r30, 0x27	; 39
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	8d 7f       	andi	r24, 0xFD	; 253
    11e6:	8c 93       	st	X, r24
				set_bit(ADMUX,2);
    11e8:	a7 e2       	ldi	r26, 0x27	; 39
    11ea:	b0 e0       	ldi	r27, 0x00	; 0
    11ec:	e7 e2       	ldi	r30, 0x27	; 39
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	84 60       	ori	r24, 0x04	; 4
    11f4:	8c 93       	st	X, r24
				clr_bit(ADMUX,3);
    11f6:	a7 e2       	ldi	r26, 0x27	; 39
    11f8:	b0 e0       	ldi	r27, 0x00	; 0
    11fa:	e7 e2       	ldi	r30, 0x27	; 39
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	80 81       	ld	r24, Z
    1200:	87 7f       	andi	r24, 0xF7	; 247
    1202:	8c 93       	st	X, r24
				clr_bit(ADMUX,4);
    1204:	a7 e2       	ldi	r26, 0x27	; 39
    1206:	b0 e0       	ldi	r27, 0x00	; 0
    1208:	e7 e2       	ldi	r30, 0x27	; 39
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	80 81       	ld	r24, Z
    120e:	8f 7e       	andi	r24, 0xEF	; 239
    1210:	8c 93       	st	X, r24
    1212:	6b c0       	rjmp	.+214    	; 0x12ea <ADC_StartConversion_SingleMode+0x2c6>
				break;
			case ADC_Chann5:
				set_bit(ADMUX,0);
    1214:	a7 e2       	ldi	r26, 0x27	; 39
    1216:	b0 e0       	ldi	r27, 0x00	; 0
    1218:	e7 e2       	ldi	r30, 0x27	; 39
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	80 81       	ld	r24, Z
    121e:	81 60       	ori	r24, 0x01	; 1
    1220:	8c 93       	st	X, r24
				clr_bit(ADMUX,1);
    1222:	a7 e2       	ldi	r26, 0x27	; 39
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	e7 e2       	ldi	r30, 0x27	; 39
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	8d 7f       	andi	r24, 0xFD	; 253
    122e:	8c 93       	st	X, r24
				set_bit(ADMUX,2);
    1230:	a7 e2       	ldi	r26, 0x27	; 39
    1232:	b0 e0       	ldi	r27, 0x00	; 0
    1234:	e7 e2       	ldi	r30, 0x27	; 39
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	80 81       	ld	r24, Z
    123a:	84 60       	ori	r24, 0x04	; 4
    123c:	8c 93       	st	X, r24
				clr_bit(ADMUX,3);
    123e:	a7 e2       	ldi	r26, 0x27	; 39
    1240:	b0 e0       	ldi	r27, 0x00	; 0
    1242:	e7 e2       	ldi	r30, 0x27	; 39
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	80 81       	ld	r24, Z
    1248:	87 7f       	andi	r24, 0xF7	; 247
    124a:	8c 93       	st	X, r24
				clr_bit(ADMUX,4);
    124c:	a7 e2       	ldi	r26, 0x27	; 39
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	e7 e2       	ldi	r30, 0x27	; 39
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	8f 7e       	andi	r24, 0xEF	; 239
    1258:	8c 93       	st	X, r24
    125a:	47 c0       	rjmp	.+142    	; 0x12ea <ADC_StartConversion_SingleMode+0x2c6>
				break;
			case ADC_Chann6:
				clr_bit(ADMUX,0);
    125c:	a7 e2       	ldi	r26, 0x27	; 39
    125e:	b0 e0       	ldi	r27, 0x00	; 0
    1260:	e7 e2       	ldi	r30, 0x27	; 39
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	80 81       	ld	r24, Z
    1266:	8e 7f       	andi	r24, 0xFE	; 254
    1268:	8c 93       	st	X, r24
				set_bit(ADMUX,1);
    126a:	a7 e2       	ldi	r26, 0x27	; 39
    126c:	b0 e0       	ldi	r27, 0x00	; 0
    126e:	e7 e2       	ldi	r30, 0x27	; 39
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	82 60       	ori	r24, 0x02	; 2
    1276:	8c 93       	st	X, r24
				set_bit(ADMUX,2);
    1278:	a7 e2       	ldi	r26, 0x27	; 39
    127a:	b0 e0       	ldi	r27, 0x00	; 0
    127c:	e7 e2       	ldi	r30, 0x27	; 39
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 81       	ld	r24, Z
    1282:	84 60       	ori	r24, 0x04	; 4
    1284:	8c 93       	st	X, r24
				clr_bit(ADMUX,3);
    1286:	a7 e2       	ldi	r26, 0x27	; 39
    1288:	b0 e0       	ldi	r27, 0x00	; 0
    128a:	e7 e2       	ldi	r30, 0x27	; 39
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	87 7f       	andi	r24, 0xF7	; 247
    1292:	8c 93       	st	X, r24
				clr_bit(ADMUX,4);
    1294:	a7 e2       	ldi	r26, 0x27	; 39
    1296:	b0 e0       	ldi	r27, 0x00	; 0
    1298:	e7 e2       	ldi	r30, 0x27	; 39
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	80 81       	ld	r24, Z
    129e:	8f 7e       	andi	r24, 0xEF	; 239
    12a0:	8c 93       	st	X, r24
    12a2:	23 c0       	rjmp	.+70     	; 0x12ea <ADC_StartConversion_SingleMode+0x2c6>
				break;
			case ADC_Chann7:
				set_bit(ADMUX,0);
    12a4:	a7 e2       	ldi	r26, 0x27	; 39
    12a6:	b0 e0       	ldi	r27, 0x00	; 0
    12a8:	e7 e2       	ldi	r30, 0x27	; 39
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	80 81       	ld	r24, Z
    12ae:	81 60       	ori	r24, 0x01	; 1
    12b0:	8c 93       	st	X, r24
				set_bit(ADMUX,1);
    12b2:	a7 e2       	ldi	r26, 0x27	; 39
    12b4:	b0 e0       	ldi	r27, 0x00	; 0
    12b6:	e7 e2       	ldi	r30, 0x27	; 39
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	80 81       	ld	r24, Z
    12bc:	82 60       	ori	r24, 0x02	; 2
    12be:	8c 93       	st	X, r24
				set_bit(ADMUX,2);
    12c0:	a7 e2       	ldi	r26, 0x27	; 39
    12c2:	b0 e0       	ldi	r27, 0x00	; 0
    12c4:	e7 e2       	ldi	r30, 0x27	; 39
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	80 81       	ld	r24, Z
    12ca:	84 60       	ori	r24, 0x04	; 4
    12cc:	8c 93       	st	X, r24
				clr_bit(ADMUX,3);
    12ce:	a7 e2       	ldi	r26, 0x27	; 39
    12d0:	b0 e0       	ldi	r27, 0x00	; 0
    12d2:	e7 e2       	ldi	r30, 0x27	; 39
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	87 7f       	andi	r24, 0xF7	; 247
    12da:	8c 93       	st	X, r24
				clr_bit(ADMUX,4);
    12dc:	a7 e2       	ldi	r26, 0x27	; 39
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	e7 e2       	ldi	r30, 0x27	; 39
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	8f 7e       	andi	r24, 0xEF	; 239
    12e8:	8c 93       	st	X, r24
		case AdjLeft://8bit
			set_bit(ADMUX,5);
			break;
	}
*/
	set_bit(ADCSRA,6);//starting conversion
    12ea:	a6 e2       	ldi	r26, 0x26	; 38
    12ec:	b0 e0       	ldi	r27, 0x00	; 0
    12ee:	e6 e2       	ldi	r30, 0x26	; 38
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	80 64       	ori	r24, 0x40	; 64
    12f6:	8c 93       	st	X, r24
	while(!get_bit(ADCSRA,4));
    12f8:	e6 e2       	ldi	r30, 0x26	; 38
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 81       	ld	r24, Z
    12fe:	82 95       	swap	r24
    1300:	8f 70       	andi	r24, 0x0F	; 15
    1302:	88 2f       	mov	r24, r24
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	81 70       	andi	r24, 0x01	; 1
    1308:	90 70       	andi	r25, 0x00	; 0
    130a:	00 97       	sbiw	r24, 0x00	; 0
    130c:	a9 f3       	breq	.-22     	; 0x12f8 <ADC_StartConversion_SingleMode+0x2d4>
	set_bit(ADCSRA,4);
    130e:	a6 e2       	ldi	r26, 0x26	; 38
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	e6 e2       	ldi	r30, 0x26	; 38
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	80 61       	ori	r24, 0x10	; 16
    131a:	8c 93       	st	X, r24
#if Resolution==0
	*ptr=ADCL;//10bit Resolution
#elif Resolution==1
	*ptr=ADCH;//8bit Resolution
    131c:	e5 e2       	ldi	r30, 0x25	; 37
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	80 81       	ld	r24, Z
    1322:	88 2f       	mov	r24, r24
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	ea 81       	ldd	r30, Y+2	; 0x02
    1328:	fb 81       	ldd	r31, Y+3	; 0x03
    132a:	91 83       	std	Z+1, r25	; 0x01
    132c:	80 83       	st	Z, r24

#endif
}
    132e:	0f 90       	pop	r0
    1330:	0f 90       	pop	r0
    1332:	0f 90       	pop	r0
    1334:	0f 90       	pop	r0
    1336:	0f 90       	pop	r0
    1338:	cf 91       	pop	r28
    133a:	df 91       	pop	r29
    133c:	08 95       	ret

0000133e <DIO_u8SetPinDir>:
#include "ATMega32_Reg.h"
#include "DIO_int.h"


u8 DIO_u8SetPinDir(u8 PortNo, u8 PinNo, u8 PinDir)
{
    133e:	df 93       	push	r29
    1340:	cf 93       	push	r28
    1342:	cd b7       	in	r28, 0x3d	; 61
    1344:	de b7       	in	r29, 0x3e	; 62
    1346:	2e 97       	sbiw	r28, 0x0e	; 14
    1348:	0f b6       	in	r0, 0x3f	; 63
    134a:	f8 94       	cli
    134c:	de bf       	out	0x3e, r29	; 62
    134e:	0f be       	out	0x3f, r0	; 63
    1350:	cd bf       	out	0x3d, r28	; 61
    1352:	8a 83       	std	Y+2, r24	; 0x02
    1354:	6b 83       	std	Y+3, r22	; 0x03
    1356:	4c 83       	std	Y+4, r20	; 0x04
	u8 FuncReturnState = STD_OK;
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	89 83       	std	Y+1, r24	; 0x01

	if( (PortNo >= DIO_PORTA) && (PortNo <= DIO_PORTD) &&
    135c:	8a 81       	ldd	r24, Y+2	; 0x02
    135e:	84 30       	cpi	r24, 0x04	; 4
    1360:	08 f0       	brcs	.+2      	; 0x1364 <DIO_u8SetPinDir+0x26>
    1362:	05 c1       	rjmp	.+522    	; 0x156e <DIO_u8SetPinDir+0x230>
    1364:	8b 81       	ldd	r24, Y+3	; 0x03
    1366:	88 30       	cpi	r24, 0x08	; 8
    1368:	08 f0       	brcs	.+2      	; 0x136c <DIO_u8SetPinDir+0x2e>
    136a:	01 c1       	rjmp	.+514    	; 0x156e <DIO_u8SetPinDir+0x230>
    136c:	8c 81       	ldd	r24, Y+4	; 0x04
    136e:	82 30       	cpi	r24, 0x02	; 2
    1370:	08 f0       	brcs	.+2      	; 0x1374 <DIO_u8SetPinDir+0x36>
    1372:	fd c0       	rjmp	.+506    	; 0x156e <DIO_u8SetPinDir+0x230>
		(PinNo >= DIO_PIN0)   && (PinNo <=DIO_PIN7)    &&
		(PinDir >= DIO_INPUT) && (PinDir <= DIO_OUTPUT) )
	{
		switch(PortNo)
    1374:	8a 81       	ldd	r24, Y+2	; 0x02
    1376:	28 2f       	mov	r18, r24
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	3e 87       	std	Y+14, r19	; 0x0e
    137c:	2d 87       	std	Y+13, r18	; 0x0d
    137e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1380:	9e 85       	ldd	r25, Y+14	; 0x0e
    1382:	81 30       	cpi	r24, 0x01	; 1
    1384:	91 05       	cpc	r25, r1
    1386:	09 f4       	brne	.+2      	; 0x138a <DIO_u8SetPinDir+0x4c>
    1388:	4e c0       	rjmp	.+156    	; 0x1426 <DIO_u8SetPinDir+0xe8>
    138a:	2d 85       	ldd	r18, Y+13	; 0x0d
    138c:	3e 85       	ldd	r19, Y+14	; 0x0e
    138e:	22 30       	cpi	r18, 0x02	; 2
    1390:	31 05       	cpc	r19, r1
    1392:	2c f4       	brge	.+10     	; 0x139e <DIO_u8SetPinDir+0x60>
    1394:	8d 85       	ldd	r24, Y+13	; 0x0d
    1396:	9e 85       	ldd	r25, Y+14	; 0x0e
    1398:	00 97       	sbiw	r24, 0x00	; 0
    139a:	71 f0       	breq	.+28     	; 0x13b8 <DIO_u8SetPinDir+0x7a>
    139c:	e9 c0       	rjmp	.+466    	; 0x1570 <DIO_u8SetPinDir+0x232>
    139e:	2d 85       	ldd	r18, Y+13	; 0x0d
    13a0:	3e 85       	ldd	r19, Y+14	; 0x0e
    13a2:	22 30       	cpi	r18, 0x02	; 2
    13a4:	31 05       	cpc	r19, r1
    13a6:	09 f4       	brne	.+2      	; 0x13aa <DIO_u8SetPinDir+0x6c>
    13a8:	75 c0       	rjmp	.+234    	; 0x1494 <DIO_u8SetPinDir+0x156>
    13aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    13ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    13ae:	83 30       	cpi	r24, 0x03	; 3
    13b0:	91 05       	cpc	r25, r1
    13b2:	09 f4       	brne	.+2      	; 0x13b6 <DIO_u8SetPinDir+0x78>
    13b4:	a6 c0       	rjmp	.+332    	; 0x1502 <DIO_u8SetPinDir+0x1c4>
    13b6:	dc c0       	rjmp	.+440    	; 0x1570 <DIO_u8SetPinDir+0x232>
		{
			case DIO_PORTA:
				switch(PinDir)
    13b8:	8c 81       	ldd	r24, Y+4	; 0x04
    13ba:	28 2f       	mov	r18, r24
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	3c 87       	std	Y+12, r19	; 0x0c
    13c0:	2b 87       	std	Y+11, r18	; 0x0b
    13c2:	8b 85       	ldd	r24, Y+11	; 0x0b
    13c4:	9c 85       	ldd	r25, Y+12	; 0x0c
    13c6:	00 97       	sbiw	r24, 0x00	; 0
    13c8:	c9 f0       	breq	.+50     	; 0x13fc <DIO_u8SetPinDir+0xbe>
    13ca:	2b 85       	ldd	r18, Y+11	; 0x0b
    13cc:	3c 85       	ldd	r19, Y+12	; 0x0c
    13ce:	21 30       	cpi	r18, 0x01	; 1
    13d0:	31 05       	cpc	r19, r1
    13d2:	09 f0       	breq	.+2      	; 0x13d6 <DIO_u8SetPinDir+0x98>
    13d4:	cd c0       	rjmp	.+410    	; 0x1570 <DIO_u8SetPinDir+0x232>
				{
					case DIO_OUTPUT:
						set_bit(DDRA, PinNo);
    13d6:	aa e3       	ldi	r26, 0x3A	; 58
    13d8:	b0 e0       	ldi	r27, 0x00	; 0
    13da:	ea e3       	ldi	r30, 0x3A	; 58
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	40 81       	ld	r20, Z
    13e0:	8b 81       	ldd	r24, Y+3	; 0x03
    13e2:	28 2f       	mov	r18, r24
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	81 e0       	ldi	r24, 0x01	; 1
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	02 2e       	mov	r0, r18
    13ec:	02 c0       	rjmp	.+4      	; 0x13f2 <DIO_u8SetPinDir+0xb4>
    13ee:	88 0f       	add	r24, r24
    13f0:	99 1f       	adc	r25, r25
    13f2:	0a 94       	dec	r0
    13f4:	e2 f7       	brpl	.-8      	; 0x13ee <DIO_u8SetPinDir+0xb0>
    13f6:	84 2b       	or	r24, r20
    13f8:	8c 93       	st	X, r24
    13fa:	ba c0       	rjmp	.+372    	; 0x1570 <DIO_u8SetPinDir+0x232>
					break;

					case DIO_INPUT:
						clr_bit(DDRA, PinNo);
    13fc:	aa e3       	ldi	r26, 0x3A	; 58
    13fe:	b0 e0       	ldi	r27, 0x00	; 0
    1400:	ea e3       	ldi	r30, 0x3A	; 58
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	80 81       	ld	r24, Z
    1406:	48 2f       	mov	r20, r24
    1408:	8b 81       	ldd	r24, Y+3	; 0x03
    140a:	28 2f       	mov	r18, r24
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	81 e0       	ldi	r24, 0x01	; 1
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	02 2e       	mov	r0, r18
    1414:	02 c0       	rjmp	.+4      	; 0x141a <DIO_u8SetPinDir+0xdc>
    1416:	88 0f       	add	r24, r24
    1418:	99 1f       	adc	r25, r25
    141a:	0a 94       	dec	r0
    141c:	e2 f7       	brpl	.-8      	; 0x1416 <DIO_u8SetPinDir+0xd8>
    141e:	80 95       	com	r24
    1420:	84 23       	and	r24, r20
    1422:	8c 93       	st	X, r24
    1424:	a5 c0       	rjmp	.+330    	; 0x1570 <DIO_u8SetPinDir+0x232>
					break;
				}
			break;

			case DIO_PORTB:
				switch(PinDir)
    1426:	8c 81       	ldd	r24, Y+4	; 0x04
    1428:	28 2f       	mov	r18, r24
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	3a 87       	std	Y+10, r19	; 0x0a
    142e:	29 87       	std	Y+9, r18	; 0x09
    1430:	89 85       	ldd	r24, Y+9	; 0x09
    1432:	9a 85       	ldd	r25, Y+10	; 0x0a
    1434:	00 97       	sbiw	r24, 0x00	; 0
    1436:	c9 f0       	breq	.+50     	; 0x146a <DIO_u8SetPinDir+0x12c>
    1438:	29 85       	ldd	r18, Y+9	; 0x09
    143a:	3a 85       	ldd	r19, Y+10	; 0x0a
    143c:	21 30       	cpi	r18, 0x01	; 1
    143e:	31 05       	cpc	r19, r1
    1440:	09 f0       	breq	.+2      	; 0x1444 <DIO_u8SetPinDir+0x106>
    1442:	96 c0       	rjmp	.+300    	; 0x1570 <DIO_u8SetPinDir+0x232>
				{
					case DIO_OUTPUT:
						set_bit(DDRB, PinNo);
    1444:	a7 e3       	ldi	r26, 0x37	; 55
    1446:	b0 e0       	ldi	r27, 0x00	; 0
    1448:	e7 e3       	ldi	r30, 0x37	; 55
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	40 81       	ld	r20, Z
    144e:	8b 81       	ldd	r24, Y+3	; 0x03
    1450:	28 2f       	mov	r18, r24
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	02 2e       	mov	r0, r18
    145a:	02 c0       	rjmp	.+4      	; 0x1460 <DIO_u8SetPinDir+0x122>
    145c:	88 0f       	add	r24, r24
    145e:	99 1f       	adc	r25, r25
    1460:	0a 94       	dec	r0
    1462:	e2 f7       	brpl	.-8      	; 0x145c <DIO_u8SetPinDir+0x11e>
    1464:	84 2b       	or	r24, r20
    1466:	8c 93       	st	X, r24
    1468:	83 c0       	rjmp	.+262    	; 0x1570 <DIO_u8SetPinDir+0x232>
					break;

					case DIO_INPUT:
						clr_bit(DDRB, PinNo);
    146a:	a7 e3       	ldi	r26, 0x37	; 55
    146c:	b0 e0       	ldi	r27, 0x00	; 0
    146e:	e7 e3       	ldi	r30, 0x37	; 55
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	80 81       	ld	r24, Z
    1474:	48 2f       	mov	r20, r24
    1476:	8b 81       	ldd	r24, Y+3	; 0x03
    1478:	28 2f       	mov	r18, r24
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	02 2e       	mov	r0, r18
    1482:	02 c0       	rjmp	.+4      	; 0x1488 <DIO_u8SetPinDir+0x14a>
    1484:	88 0f       	add	r24, r24
    1486:	99 1f       	adc	r25, r25
    1488:	0a 94       	dec	r0
    148a:	e2 f7       	brpl	.-8      	; 0x1484 <DIO_u8SetPinDir+0x146>
    148c:	80 95       	com	r24
    148e:	84 23       	and	r24, r20
    1490:	8c 93       	st	X, r24
    1492:	6e c0       	rjmp	.+220    	; 0x1570 <DIO_u8SetPinDir+0x232>
					break;
				}
			break;

			case DIO_PORTC:
				switch(PinDir)
    1494:	8c 81       	ldd	r24, Y+4	; 0x04
    1496:	28 2f       	mov	r18, r24
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	38 87       	std	Y+8, r19	; 0x08
    149c:	2f 83       	std	Y+7, r18	; 0x07
    149e:	8f 81       	ldd	r24, Y+7	; 0x07
    14a0:	98 85       	ldd	r25, Y+8	; 0x08
    14a2:	00 97       	sbiw	r24, 0x00	; 0
    14a4:	c9 f0       	breq	.+50     	; 0x14d8 <DIO_u8SetPinDir+0x19a>
    14a6:	2f 81       	ldd	r18, Y+7	; 0x07
    14a8:	38 85       	ldd	r19, Y+8	; 0x08
    14aa:	21 30       	cpi	r18, 0x01	; 1
    14ac:	31 05       	cpc	r19, r1
    14ae:	09 f0       	breq	.+2      	; 0x14b2 <DIO_u8SetPinDir+0x174>
    14b0:	5f c0       	rjmp	.+190    	; 0x1570 <DIO_u8SetPinDir+0x232>
				{
					case DIO_OUTPUT:
						set_bit(DDRC, PinNo);
    14b2:	a4 e3       	ldi	r26, 0x34	; 52
    14b4:	b0 e0       	ldi	r27, 0x00	; 0
    14b6:	e4 e3       	ldi	r30, 0x34	; 52
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	40 81       	ld	r20, Z
    14bc:	8b 81       	ldd	r24, Y+3	; 0x03
    14be:	28 2f       	mov	r18, r24
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	81 e0       	ldi	r24, 0x01	; 1
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	02 2e       	mov	r0, r18
    14c8:	02 c0       	rjmp	.+4      	; 0x14ce <DIO_u8SetPinDir+0x190>
    14ca:	88 0f       	add	r24, r24
    14cc:	99 1f       	adc	r25, r25
    14ce:	0a 94       	dec	r0
    14d0:	e2 f7       	brpl	.-8      	; 0x14ca <DIO_u8SetPinDir+0x18c>
    14d2:	84 2b       	or	r24, r20
    14d4:	8c 93       	st	X, r24
    14d6:	4c c0       	rjmp	.+152    	; 0x1570 <DIO_u8SetPinDir+0x232>
					break;

					case DIO_INPUT:
						clr_bit(DDRC, PinNo);
    14d8:	a4 e3       	ldi	r26, 0x34	; 52
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	e4 e3       	ldi	r30, 0x34	; 52
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	48 2f       	mov	r20, r24
    14e4:	8b 81       	ldd	r24, Y+3	; 0x03
    14e6:	28 2f       	mov	r18, r24
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	02 2e       	mov	r0, r18
    14f0:	02 c0       	rjmp	.+4      	; 0x14f6 <DIO_u8SetPinDir+0x1b8>
    14f2:	88 0f       	add	r24, r24
    14f4:	99 1f       	adc	r25, r25
    14f6:	0a 94       	dec	r0
    14f8:	e2 f7       	brpl	.-8      	; 0x14f2 <DIO_u8SetPinDir+0x1b4>
    14fa:	80 95       	com	r24
    14fc:	84 23       	and	r24, r20
    14fe:	8c 93       	st	X, r24
    1500:	37 c0       	rjmp	.+110    	; 0x1570 <DIO_u8SetPinDir+0x232>
					break;
				}
			break;

			case DIO_PORTD:
				switch(PinDir)
    1502:	8c 81       	ldd	r24, Y+4	; 0x04
    1504:	28 2f       	mov	r18, r24
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	3e 83       	std	Y+6, r19	; 0x06
    150a:	2d 83       	std	Y+5, r18	; 0x05
    150c:	8d 81       	ldd	r24, Y+5	; 0x05
    150e:	9e 81       	ldd	r25, Y+6	; 0x06
    1510:	00 97       	sbiw	r24, 0x00	; 0
    1512:	c1 f0       	breq	.+48     	; 0x1544 <DIO_u8SetPinDir+0x206>
    1514:	2d 81       	ldd	r18, Y+5	; 0x05
    1516:	3e 81       	ldd	r19, Y+6	; 0x06
    1518:	21 30       	cpi	r18, 0x01	; 1
    151a:	31 05       	cpc	r19, r1
    151c:	49 f5       	brne	.+82     	; 0x1570 <DIO_u8SetPinDir+0x232>
				{
					case DIO_OUTPUT:
						set_bit(DDRD, PinNo);
    151e:	a1 e3       	ldi	r26, 0x31	; 49
    1520:	b0 e0       	ldi	r27, 0x00	; 0
    1522:	e1 e3       	ldi	r30, 0x31	; 49
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	40 81       	ld	r20, Z
    1528:	8b 81       	ldd	r24, Y+3	; 0x03
    152a:	28 2f       	mov	r18, r24
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	02 2e       	mov	r0, r18
    1534:	02 c0       	rjmp	.+4      	; 0x153a <DIO_u8SetPinDir+0x1fc>
    1536:	88 0f       	add	r24, r24
    1538:	99 1f       	adc	r25, r25
    153a:	0a 94       	dec	r0
    153c:	e2 f7       	brpl	.-8      	; 0x1536 <DIO_u8SetPinDir+0x1f8>
    153e:	84 2b       	or	r24, r20
    1540:	8c 93       	st	X, r24
    1542:	16 c0       	rjmp	.+44     	; 0x1570 <DIO_u8SetPinDir+0x232>
					break;

					case DIO_INPUT:
						clr_bit(DDRD, PinNo);
    1544:	a1 e3       	ldi	r26, 0x31	; 49
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	e1 e3       	ldi	r30, 0x31	; 49
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	48 2f       	mov	r20, r24
    1550:	8b 81       	ldd	r24, Y+3	; 0x03
    1552:	28 2f       	mov	r18, r24
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	02 2e       	mov	r0, r18
    155c:	02 c0       	rjmp	.+4      	; 0x1562 <DIO_u8SetPinDir+0x224>
    155e:	88 0f       	add	r24, r24
    1560:	99 1f       	adc	r25, r25
    1562:	0a 94       	dec	r0
    1564:	e2 f7       	brpl	.-8      	; 0x155e <DIO_u8SetPinDir+0x220>
    1566:	80 95       	com	r24
    1568:	84 23       	and	r24, r20
    156a:	8c 93       	st	X, r24
    156c:	01 c0       	rjmp	.+2      	; 0x1570 <DIO_u8SetPinDir+0x232>
			break;
		}
	}
	else
	{
		FuncReturnState = STD_NOK;
    156e:	19 82       	std	Y+1, r1	; 0x01
	}

	return FuncReturnState;
    1570:	89 81       	ldd	r24, Y+1	; 0x01
}
    1572:	2e 96       	adiw	r28, 0x0e	; 14
    1574:	0f b6       	in	r0, 0x3f	; 63
    1576:	f8 94       	cli
    1578:	de bf       	out	0x3e, r29	; 62
    157a:	0f be       	out	0x3f, r0	; 63
    157c:	cd bf       	out	0x3d, r28	; 61
    157e:	cf 91       	pop	r28
    1580:	df 91       	pop	r29
    1582:	08 95       	ret

00001584 <DIO_u8SetPinVal>:

u8 DIO_u8SetPinVal(u8 PortNo, u8 PinNo, u8 PinVal)
{
    1584:	df 93       	push	r29
    1586:	cf 93       	push	r28
    1588:	cd b7       	in	r28, 0x3d	; 61
    158a:	de b7       	in	r29, 0x3e	; 62
    158c:	2e 97       	sbiw	r28, 0x0e	; 14
    158e:	0f b6       	in	r0, 0x3f	; 63
    1590:	f8 94       	cli
    1592:	de bf       	out	0x3e, r29	; 62
    1594:	0f be       	out	0x3f, r0	; 63
    1596:	cd bf       	out	0x3d, r28	; 61
    1598:	8a 83       	std	Y+2, r24	; 0x02
    159a:	6b 83       	std	Y+3, r22	; 0x03
    159c:	4c 83       	std	Y+4, r20	; 0x04
	u8 FuncReturnState = STD_OK;
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	89 83       	std	Y+1, r24	; 0x01

	if( (PortNo >= DIO_PORTA) && (PortNo <= DIO_PORTD) &&
    15a2:	8a 81       	ldd	r24, Y+2	; 0x02
    15a4:	84 30       	cpi	r24, 0x04	; 4
    15a6:	08 f0       	brcs	.+2      	; 0x15aa <DIO_u8SetPinVal+0x26>
    15a8:	05 c1       	rjmp	.+522    	; 0x17b4 <DIO_u8SetPinVal+0x230>
    15aa:	8b 81       	ldd	r24, Y+3	; 0x03
    15ac:	88 30       	cpi	r24, 0x08	; 8
    15ae:	08 f0       	brcs	.+2      	; 0x15b2 <DIO_u8SetPinVal+0x2e>
    15b0:	01 c1       	rjmp	.+514    	; 0x17b4 <DIO_u8SetPinVal+0x230>
    15b2:	8c 81       	ldd	r24, Y+4	; 0x04
    15b4:	82 30       	cpi	r24, 0x02	; 2
    15b6:	08 f0       	brcs	.+2      	; 0x15ba <DIO_u8SetPinVal+0x36>
    15b8:	fd c0       	rjmp	.+506    	; 0x17b4 <DIO_u8SetPinVal+0x230>
		(PinNo >= DIO_PIN0)   && (PinNo <=DIO_PIN7)    &&
		(PinVal >= DIO_LOW) && (PinVal <= DIO_HIGH) )
	{
		switch(PortNo)
    15ba:	8a 81       	ldd	r24, Y+2	; 0x02
    15bc:	28 2f       	mov	r18, r24
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	3e 87       	std	Y+14, r19	; 0x0e
    15c2:	2d 87       	std	Y+13, r18	; 0x0d
    15c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    15c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    15c8:	81 30       	cpi	r24, 0x01	; 1
    15ca:	91 05       	cpc	r25, r1
    15cc:	09 f4       	brne	.+2      	; 0x15d0 <DIO_u8SetPinVal+0x4c>
    15ce:	4e c0       	rjmp	.+156    	; 0x166c <DIO_u8SetPinVal+0xe8>
    15d0:	2d 85       	ldd	r18, Y+13	; 0x0d
    15d2:	3e 85       	ldd	r19, Y+14	; 0x0e
    15d4:	22 30       	cpi	r18, 0x02	; 2
    15d6:	31 05       	cpc	r19, r1
    15d8:	2c f4       	brge	.+10     	; 0x15e4 <DIO_u8SetPinVal+0x60>
    15da:	8d 85       	ldd	r24, Y+13	; 0x0d
    15dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    15de:	00 97       	sbiw	r24, 0x00	; 0
    15e0:	71 f0       	breq	.+28     	; 0x15fe <DIO_u8SetPinVal+0x7a>
    15e2:	e9 c0       	rjmp	.+466    	; 0x17b6 <DIO_u8SetPinVal+0x232>
    15e4:	2d 85       	ldd	r18, Y+13	; 0x0d
    15e6:	3e 85       	ldd	r19, Y+14	; 0x0e
    15e8:	22 30       	cpi	r18, 0x02	; 2
    15ea:	31 05       	cpc	r19, r1
    15ec:	09 f4       	brne	.+2      	; 0x15f0 <DIO_u8SetPinVal+0x6c>
    15ee:	75 c0       	rjmp	.+234    	; 0x16da <DIO_u8SetPinVal+0x156>
    15f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    15f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    15f4:	83 30       	cpi	r24, 0x03	; 3
    15f6:	91 05       	cpc	r25, r1
    15f8:	09 f4       	brne	.+2      	; 0x15fc <DIO_u8SetPinVal+0x78>
    15fa:	a6 c0       	rjmp	.+332    	; 0x1748 <DIO_u8SetPinVal+0x1c4>
    15fc:	dc c0       	rjmp	.+440    	; 0x17b6 <DIO_u8SetPinVal+0x232>
		{
			case DIO_PORTA:
				switch(PinVal)
    15fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1600:	28 2f       	mov	r18, r24
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	3c 87       	std	Y+12, r19	; 0x0c
    1606:	2b 87       	std	Y+11, r18	; 0x0b
    1608:	8b 85       	ldd	r24, Y+11	; 0x0b
    160a:	9c 85       	ldd	r25, Y+12	; 0x0c
    160c:	00 97       	sbiw	r24, 0x00	; 0
    160e:	c9 f0       	breq	.+50     	; 0x1642 <DIO_u8SetPinVal+0xbe>
    1610:	2b 85       	ldd	r18, Y+11	; 0x0b
    1612:	3c 85       	ldd	r19, Y+12	; 0x0c
    1614:	21 30       	cpi	r18, 0x01	; 1
    1616:	31 05       	cpc	r19, r1
    1618:	09 f0       	breq	.+2      	; 0x161c <DIO_u8SetPinVal+0x98>
    161a:	cd c0       	rjmp	.+410    	; 0x17b6 <DIO_u8SetPinVal+0x232>
				{
					case DIO_HIGH:
						set_bit(PORTA, PinNo);
    161c:	ab e3       	ldi	r26, 0x3B	; 59
    161e:	b0 e0       	ldi	r27, 0x00	; 0
    1620:	eb e3       	ldi	r30, 0x3B	; 59
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	40 81       	ld	r20, Z
    1626:	8b 81       	ldd	r24, Y+3	; 0x03
    1628:	28 2f       	mov	r18, r24
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	81 e0       	ldi	r24, 0x01	; 1
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	02 2e       	mov	r0, r18
    1632:	02 c0       	rjmp	.+4      	; 0x1638 <DIO_u8SetPinVal+0xb4>
    1634:	88 0f       	add	r24, r24
    1636:	99 1f       	adc	r25, r25
    1638:	0a 94       	dec	r0
    163a:	e2 f7       	brpl	.-8      	; 0x1634 <DIO_u8SetPinVal+0xb0>
    163c:	84 2b       	or	r24, r20
    163e:	8c 93       	st	X, r24
    1640:	ba c0       	rjmp	.+372    	; 0x17b6 <DIO_u8SetPinVal+0x232>
					break;

					case DIO_LOW:
						clr_bit(PORTA, PinNo);
    1642:	ab e3       	ldi	r26, 0x3B	; 59
    1644:	b0 e0       	ldi	r27, 0x00	; 0
    1646:	eb e3       	ldi	r30, 0x3B	; 59
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	80 81       	ld	r24, Z
    164c:	48 2f       	mov	r20, r24
    164e:	8b 81       	ldd	r24, Y+3	; 0x03
    1650:	28 2f       	mov	r18, r24
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	81 e0       	ldi	r24, 0x01	; 1
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	02 2e       	mov	r0, r18
    165a:	02 c0       	rjmp	.+4      	; 0x1660 <DIO_u8SetPinVal+0xdc>
    165c:	88 0f       	add	r24, r24
    165e:	99 1f       	adc	r25, r25
    1660:	0a 94       	dec	r0
    1662:	e2 f7       	brpl	.-8      	; 0x165c <DIO_u8SetPinVal+0xd8>
    1664:	80 95       	com	r24
    1666:	84 23       	and	r24, r20
    1668:	8c 93       	st	X, r24
    166a:	a5 c0       	rjmp	.+330    	; 0x17b6 <DIO_u8SetPinVal+0x232>
					break;
				}
			break;

			case DIO_PORTB:
				switch(PinVal)
    166c:	8c 81       	ldd	r24, Y+4	; 0x04
    166e:	28 2f       	mov	r18, r24
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	3a 87       	std	Y+10, r19	; 0x0a
    1674:	29 87       	std	Y+9, r18	; 0x09
    1676:	89 85       	ldd	r24, Y+9	; 0x09
    1678:	9a 85       	ldd	r25, Y+10	; 0x0a
    167a:	00 97       	sbiw	r24, 0x00	; 0
    167c:	c9 f0       	breq	.+50     	; 0x16b0 <DIO_u8SetPinVal+0x12c>
    167e:	29 85       	ldd	r18, Y+9	; 0x09
    1680:	3a 85       	ldd	r19, Y+10	; 0x0a
    1682:	21 30       	cpi	r18, 0x01	; 1
    1684:	31 05       	cpc	r19, r1
    1686:	09 f0       	breq	.+2      	; 0x168a <DIO_u8SetPinVal+0x106>
    1688:	96 c0       	rjmp	.+300    	; 0x17b6 <DIO_u8SetPinVal+0x232>
				{
					case DIO_HIGH:
						set_bit(PORTB, PinNo);
    168a:	a8 e3       	ldi	r26, 0x38	; 56
    168c:	b0 e0       	ldi	r27, 0x00	; 0
    168e:	e8 e3       	ldi	r30, 0x38	; 56
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	40 81       	ld	r20, Z
    1694:	8b 81       	ldd	r24, Y+3	; 0x03
    1696:	28 2f       	mov	r18, r24
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	02 2e       	mov	r0, r18
    16a0:	02 c0       	rjmp	.+4      	; 0x16a6 <DIO_u8SetPinVal+0x122>
    16a2:	88 0f       	add	r24, r24
    16a4:	99 1f       	adc	r25, r25
    16a6:	0a 94       	dec	r0
    16a8:	e2 f7       	brpl	.-8      	; 0x16a2 <DIO_u8SetPinVal+0x11e>
    16aa:	84 2b       	or	r24, r20
    16ac:	8c 93       	st	X, r24
    16ae:	83 c0       	rjmp	.+262    	; 0x17b6 <DIO_u8SetPinVal+0x232>
					break;

					case DIO_LOW:
						clr_bit(PORTB, PinNo);
    16b0:	a8 e3       	ldi	r26, 0x38	; 56
    16b2:	b0 e0       	ldi	r27, 0x00	; 0
    16b4:	e8 e3       	ldi	r30, 0x38	; 56
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	80 81       	ld	r24, Z
    16ba:	48 2f       	mov	r20, r24
    16bc:	8b 81       	ldd	r24, Y+3	; 0x03
    16be:	28 2f       	mov	r18, r24
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	81 e0       	ldi	r24, 0x01	; 1
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	02 2e       	mov	r0, r18
    16c8:	02 c0       	rjmp	.+4      	; 0x16ce <DIO_u8SetPinVal+0x14a>
    16ca:	88 0f       	add	r24, r24
    16cc:	99 1f       	adc	r25, r25
    16ce:	0a 94       	dec	r0
    16d0:	e2 f7       	brpl	.-8      	; 0x16ca <DIO_u8SetPinVal+0x146>
    16d2:	80 95       	com	r24
    16d4:	84 23       	and	r24, r20
    16d6:	8c 93       	st	X, r24
    16d8:	6e c0       	rjmp	.+220    	; 0x17b6 <DIO_u8SetPinVal+0x232>
					break;
				}
			break;

			case DIO_PORTC:
				switch(PinVal)
    16da:	8c 81       	ldd	r24, Y+4	; 0x04
    16dc:	28 2f       	mov	r18, r24
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	38 87       	std	Y+8, r19	; 0x08
    16e2:	2f 83       	std	Y+7, r18	; 0x07
    16e4:	8f 81       	ldd	r24, Y+7	; 0x07
    16e6:	98 85       	ldd	r25, Y+8	; 0x08
    16e8:	00 97       	sbiw	r24, 0x00	; 0
    16ea:	c9 f0       	breq	.+50     	; 0x171e <DIO_u8SetPinVal+0x19a>
    16ec:	2f 81       	ldd	r18, Y+7	; 0x07
    16ee:	38 85       	ldd	r19, Y+8	; 0x08
    16f0:	21 30       	cpi	r18, 0x01	; 1
    16f2:	31 05       	cpc	r19, r1
    16f4:	09 f0       	breq	.+2      	; 0x16f8 <DIO_u8SetPinVal+0x174>
    16f6:	5f c0       	rjmp	.+190    	; 0x17b6 <DIO_u8SetPinVal+0x232>
				{
					case DIO_HIGH:
						set_bit(PORTC, PinNo);
    16f8:	a5 e3       	ldi	r26, 0x35	; 53
    16fa:	b0 e0       	ldi	r27, 0x00	; 0
    16fc:	e5 e3       	ldi	r30, 0x35	; 53
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	40 81       	ld	r20, Z
    1702:	8b 81       	ldd	r24, Y+3	; 0x03
    1704:	28 2f       	mov	r18, r24
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	81 e0       	ldi	r24, 0x01	; 1
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	02 2e       	mov	r0, r18
    170e:	02 c0       	rjmp	.+4      	; 0x1714 <DIO_u8SetPinVal+0x190>
    1710:	88 0f       	add	r24, r24
    1712:	99 1f       	adc	r25, r25
    1714:	0a 94       	dec	r0
    1716:	e2 f7       	brpl	.-8      	; 0x1710 <DIO_u8SetPinVal+0x18c>
    1718:	84 2b       	or	r24, r20
    171a:	8c 93       	st	X, r24
    171c:	4c c0       	rjmp	.+152    	; 0x17b6 <DIO_u8SetPinVal+0x232>
					break;

					case DIO_LOW:
						clr_bit(PORTC, PinNo);
    171e:	a5 e3       	ldi	r26, 0x35	; 53
    1720:	b0 e0       	ldi	r27, 0x00	; 0
    1722:	e5 e3       	ldi	r30, 0x35	; 53
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	80 81       	ld	r24, Z
    1728:	48 2f       	mov	r20, r24
    172a:	8b 81       	ldd	r24, Y+3	; 0x03
    172c:	28 2f       	mov	r18, r24
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	81 e0       	ldi	r24, 0x01	; 1
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	02 2e       	mov	r0, r18
    1736:	02 c0       	rjmp	.+4      	; 0x173c <DIO_u8SetPinVal+0x1b8>
    1738:	88 0f       	add	r24, r24
    173a:	99 1f       	adc	r25, r25
    173c:	0a 94       	dec	r0
    173e:	e2 f7       	brpl	.-8      	; 0x1738 <DIO_u8SetPinVal+0x1b4>
    1740:	80 95       	com	r24
    1742:	84 23       	and	r24, r20
    1744:	8c 93       	st	X, r24
    1746:	37 c0       	rjmp	.+110    	; 0x17b6 <DIO_u8SetPinVal+0x232>
					break;
				}
			break;

			case DIO_PORTD:
				switch(PinVal)
    1748:	8c 81       	ldd	r24, Y+4	; 0x04
    174a:	28 2f       	mov	r18, r24
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	3e 83       	std	Y+6, r19	; 0x06
    1750:	2d 83       	std	Y+5, r18	; 0x05
    1752:	8d 81       	ldd	r24, Y+5	; 0x05
    1754:	9e 81       	ldd	r25, Y+6	; 0x06
    1756:	00 97       	sbiw	r24, 0x00	; 0
    1758:	c1 f0       	breq	.+48     	; 0x178a <DIO_u8SetPinVal+0x206>
    175a:	2d 81       	ldd	r18, Y+5	; 0x05
    175c:	3e 81       	ldd	r19, Y+6	; 0x06
    175e:	21 30       	cpi	r18, 0x01	; 1
    1760:	31 05       	cpc	r19, r1
    1762:	49 f5       	brne	.+82     	; 0x17b6 <DIO_u8SetPinVal+0x232>
				{
					case DIO_HIGH:
						set_bit(PORTD, PinNo);
    1764:	a2 e3       	ldi	r26, 0x32	; 50
    1766:	b0 e0       	ldi	r27, 0x00	; 0
    1768:	e2 e3       	ldi	r30, 0x32	; 50
    176a:	f0 e0       	ldi	r31, 0x00	; 0
    176c:	40 81       	ld	r20, Z
    176e:	8b 81       	ldd	r24, Y+3	; 0x03
    1770:	28 2f       	mov	r18, r24
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	81 e0       	ldi	r24, 0x01	; 1
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	02 2e       	mov	r0, r18
    177a:	02 c0       	rjmp	.+4      	; 0x1780 <DIO_u8SetPinVal+0x1fc>
    177c:	88 0f       	add	r24, r24
    177e:	99 1f       	adc	r25, r25
    1780:	0a 94       	dec	r0
    1782:	e2 f7       	brpl	.-8      	; 0x177c <DIO_u8SetPinVal+0x1f8>
    1784:	84 2b       	or	r24, r20
    1786:	8c 93       	st	X, r24
    1788:	16 c0       	rjmp	.+44     	; 0x17b6 <DIO_u8SetPinVal+0x232>
					break;

					case DIO_LOW:
						clr_bit(PORTD, PinNo);
    178a:	a2 e3       	ldi	r26, 0x32	; 50
    178c:	b0 e0       	ldi	r27, 0x00	; 0
    178e:	e2 e3       	ldi	r30, 0x32	; 50
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	48 2f       	mov	r20, r24
    1796:	8b 81       	ldd	r24, Y+3	; 0x03
    1798:	28 2f       	mov	r18, r24
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	02 2e       	mov	r0, r18
    17a2:	02 c0       	rjmp	.+4      	; 0x17a8 <DIO_u8SetPinVal+0x224>
    17a4:	88 0f       	add	r24, r24
    17a6:	99 1f       	adc	r25, r25
    17a8:	0a 94       	dec	r0
    17aa:	e2 f7       	brpl	.-8      	; 0x17a4 <DIO_u8SetPinVal+0x220>
    17ac:	80 95       	com	r24
    17ae:	84 23       	and	r24, r20
    17b0:	8c 93       	st	X, r24
    17b2:	01 c0       	rjmp	.+2      	; 0x17b6 <DIO_u8SetPinVal+0x232>
			break;
		}
	}
	else
	{
		FuncReturnState = STD_NOK;
    17b4:	19 82       	std	Y+1, r1	; 0x01
	}

	return FuncReturnState;
    17b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    17b8:	2e 96       	adiw	r28, 0x0e	; 14
    17ba:	0f b6       	in	r0, 0x3f	; 63
    17bc:	f8 94       	cli
    17be:	de bf       	out	0x3e, r29	; 62
    17c0:	0f be       	out	0x3f, r0	; 63
    17c2:	cd bf       	out	0x3d, r28	; 61
    17c4:	cf 91       	pop	r28
    17c6:	df 91       	pop	r29
    17c8:	08 95       	ret

000017ca <DIO_u8GetPinVal>:
													/*u8 PinA3Val; */
u8 DIO_u8GetPinVal(u8 PortNo, u8 PinNo, u8* PinVal)//DIO_u8GetPinVal(DIO_PORTA,DIO_PIN3,&PinA3Val)
{
    17ca:	df 93       	push	r29
    17cc:	cf 93       	push	r28
    17ce:	cd b7       	in	r28, 0x3d	; 61
    17d0:	de b7       	in	r29, 0x3e	; 62
    17d2:	27 97       	sbiw	r28, 0x07	; 7
    17d4:	0f b6       	in	r0, 0x3f	; 63
    17d6:	f8 94       	cli
    17d8:	de bf       	out	0x3e, r29	; 62
    17da:	0f be       	out	0x3f, r0	; 63
    17dc:	cd bf       	out	0x3d, r28	; 61
    17de:	8a 83       	std	Y+2, r24	; 0x02
    17e0:	6b 83       	std	Y+3, r22	; 0x03
    17e2:	5d 83       	std	Y+5, r21	; 0x05
    17e4:	4c 83       	std	Y+4, r20	; 0x04
	u8 FuncReturnState = STD_OK;
    17e6:	81 e0       	ldi	r24, 0x01	; 1
    17e8:	89 83       	std	Y+1, r24	; 0x01

	if( (PortNo >= DIO_PORTA) && (PortNo <= DIO_PORTD) &&
    17ea:	8a 81       	ldd	r24, Y+2	; 0x02
    17ec:	84 30       	cpi	r24, 0x04	; 4
    17ee:	08 f0       	brcs	.+2      	; 0x17f2 <DIO_u8GetPinVal+0x28>
    17f0:	7a c0       	rjmp	.+244    	; 0x18e6 <DIO_u8GetPinVal+0x11c>
    17f2:	8b 81       	ldd	r24, Y+3	; 0x03
    17f4:	88 30       	cpi	r24, 0x08	; 8
    17f6:	08 f0       	brcs	.+2      	; 0x17fa <DIO_u8GetPinVal+0x30>
    17f8:	76 c0       	rjmp	.+236    	; 0x18e6 <DIO_u8GetPinVal+0x11c>
    17fa:	8c 81       	ldd	r24, Y+4	; 0x04
    17fc:	9d 81       	ldd	r25, Y+5	; 0x05
    17fe:	00 97       	sbiw	r24, 0x00	; 0
    1800:	09 f4       	brne	.+2      	; 0x1804 <DIO_u8GetPinVal+0x3a>
    1802:	71 c0       	rjmp	.+226    	; 0x18e6 <DIO_u8GetPinVal+0x11c>
		(PinNo >= DIO_PIN0)   && (PinNo <=DIO_PIN7)    &&
		(PinVal != STD_NULL) )
	{
		switch(PortNo)
    1804:	8a 81       	ldd	r24, Y+2	; 0x02
    1806:	28 2f       	mov	r18, r24
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	3f 83       	std	Y+7, r19	; 0x07
    180c:	2e 83       	std	Y+6, r18	; 0x06
    180e:	4e 81       	ldd	r20, Y+6	; 0x06
    1810:	5f 81       	ldd	r21, Y+7	; 0x07
    1812:	41 30       	cpi	r20, 0x01	; 1
    1814:	51 05       	cpc	r21, r1
    1816:	59 f1       	breq	.+86     	; 0x186e <DIO_u8GetPinVal+0xa4>
    1818:	8e 81       	ldd	r24, Y+6	; 0x06
    181a:	9f 81       	ldd	r25, Y+7	; 0x07
    181c:	82 30       	cpi	r24, 0x02	; 2
    181e:	91 05       	cpc	r25, r1
    1820:	34 f4       	brge	.+12     	; 0x182e <DIO_u8GetPinVal+0x64>
    1822:	2e 81       	ldd	r18, Y+6	; 0x06
    1824:	3f 81       	ldd	r19, Y+7	; 0x07
    1826:	21 15       	cp	r18, r1
    1828:	31 05       	cpc	r19, r1
    182a:	69 f0       	breq	.+26     	; 0x1846 <DIO_u8GetPinVal+0x7c>
    182c:	5d c0       	rjmp	.+186    	; 0x18e8 <DIO_u8GetPinVal+0x11e>
    182e:	4e 81       	ldd	r20, Y+6	; 0x06
    1830:	5f 81       	ldd	r21, Y+7	; 0x07
    1832:	42 30       	cpi	r20, 0x02	; 2
    1834:	51 05       	cpc	r21, r1
    1836:	79 f1       	breq	.+94     	; 0x1896 <DIO_u8GetPinVal+0xcc>
    1838:	8e 81       	ldd	r24, Y+6	; 0x06
    183a:	9f 81       	ldd	r25, Y+7	; 0x07
    183c:	83 30       	cpi	r24, 0x03	; 3
    183e:	91 05       	cpc	r25, r1
    1840:	09 f4       	brne	.+2      	; 0x1844 <DIO_u8GetPinVal+0x7a>
    1842:	3d c0       	rjmp	.+122    	; 0x18be <DIO_u8GetPinVal+0xf4>
    1844:	51 c0       	rjmp	.+162    	; 0x18e8 <DIO_u8GetPinVal+0x11e>
		{
			case DIO_PORTA:
				*PinVal = get_bit(PINA, PinNo);
    1846:	e9 e3       	ldi	r30, 0x39	; 57
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	80 81       	ld	r24, Z
    184c:	28 2f       	mov	r18, r24
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	8b 81       	ldd	r24, Y+3	; 0x03
    1852:	88 2f       	mov	r24, r24
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	a9 01       	movw	r20, r18
    1858:	02 c0       	rjmp	.+4      	; 0x185e <DIO_u8GetPinVal+0x94>
    185a:	55 95       	asr	r21
    185c:	47 95       	ror	r20
    185e:	8a 95       	dec	r24
    1860:	e2 f7       	brpl	.-8      	; 0x185a <DIO_u8GetPinVal+0x90>
    1862:	ca 01       	movw	r24, r20
    1864:	81 70       	andi	r24, 0x01	; 1
    1866:	ec 81       	ldd	r30, Y+4	; 0x04
    1868:	fd 81       	ldd	r31, Y+5	; 0x05
    186a:	80 83       	st	Z, r24
    186c:	3d c0       	rjmp	.+122    	; 0x18e8 <DIO_u8GetPinVal+0x11e>
			break;

			case DIO_PORTB:
				*PinVal = get_bit(PINB, PinNo);
    186e:	e6 e3       	ldi	r30, 0x36	; 54
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	80 81       	ld	r24, Z
    1874:	28 2f       	mov	r18, r24
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	8b 81       	ldd	r24, Y+3	; 0x03
    187a:	88 2f       	mov	r24, r24
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	a9 01       	movw	r20, r18
    1880:	02 c0       	rjmp	.+4      	; 0x1886 <DIO_u8GetPinVal+0xbc>
    1882:	55 95       	asr	r21
    1884:	47 95       	ror	r20
    1886:	8a 95       	dec	r24
    1888:	e2 f7       	brpl	.-8      	; 0x1882 <DIO_u8GetPinVal+0xb8>
    188a:	ca 01       	movw	r24, r20
    188c:	81 70       	andi	r24, 0x01	; 1
    188e:	ec 81       	ldd	r30, Y+4	; 0x04
    1890:	fd 81       	ldd	r31, Y+5	; 0x05
    1892:	80 83       	st	Z, r24
    1894:	29 c0       	rjmp	.+82     	; 0x18e8 <DIO_u8GetPinVal+0x11e>
				break;


			case DIO_PORTC:
				*PinVal = get_bit(PINC, PinNo);
    1896:	e3 e3       	ldi	r30, 0x33	; 51
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	80 81       	ld	r24, Z
    189c:	28 2f       	mov	r18, r24
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	8b 81       	ldd	r24, Y+3	; 0x03
    18a2:	88 2f       	mov	r24, r24
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	a9 01       	movw	r20, r18
    18a8:	02 c0       	rjmp	.+4      	; 0x18ae <DIO_u8GetPinVal+0xe4>
    18aa:	55 95       	asr	r21
    18ac:	47 95       	ror	r20
    18ae:	8a 95       	dec	r24
    18b0:	e2 f7       	brpl	.-8      	; 0x18aa <DIO_u8GetPinVal+0xe0>
    18b2:	ca 01       	movw	r24, r20
    18b4:	81 70       	andi	r24, 0x01	; 1
    18b6:	ec 81       	ldd	r30, Y+4	; 0x04
    18b8:	fd 81       	ldd	r31, Y+5	; 0x05
    18ba:	80 83       	st	Z, r24
    18bc:	15 c0       	rjmp	.+42     	; 0x18e8 <DIO_u8GetPinVal+0x11e>
				break;


			case DIO_PORTD:
				*PinVal = get_bit(PIND, PinNo);
    18be:	e0 e3       	ldi	r30, 0x30	; 48
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	80 81       	ld	r24, Z
    18c4:	28 2f       	mov	r18, r24
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ca:	88 2f       	mov	r24, r24
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	a9 01       	movw	r20, r18
    18d0:	02 c0       	rjmp	.+4      	; 0x18d6 <DIO_u8GetPinVal+0x10c>
    18d2:	55 95       	asr	r21
    18d4:	47 95       	ror	r20
    18d6:	8a 95       	dec	r24
    18d8:	e2 f7       	brpl	.-8      	; 0x18d2 <DIO_u8GetPinVal+0x108>
    18da:	ca 01       	movw	r24, r20
    18dc:	81 70       	andi	r24, 0x01	; 1
    18de:	ec 81       	ldd	r30, Y+4	; 0x04
    18e0:	fd 81       	ldd	r31, Y+5	; 0x05
    18e2:	80 83       	st	Z, r24
    18e4:	01 c0       	rjmp	.+2      	; 0x18e8 <DIO_u8GetPinVal+0x11e>
			break;
		}
	}
	else
	{
		FuncReturnState = STD_NOK;
    18e6:	19 82       	std	Y+1, r1	; 0x01
	}

	return FuncReturnState;
    18e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    18ea:	27 96       	adiw	r28, 0x07	; 7
    18ec:	0f b6       	in	r0, 0x3f	; 63
    18ee:	f8 94       	cli
    18f0:	de bf       	out	0x3e, r29	; 62
    18f2:	0f be       	out	0x3f, r0	; 63
    18f4:	cd bf       	out	0x3d, r28	; 61
    18f6:	cf 91       	pop	r28
    18f8:	df 91       	pop	r29
    18fa:	08 95       	ret

000018fc <DIO_u8SetPortDir>:

u8 DIO_u8SetPortDir(u8 PortNo, u8 PortDir)
{
    18fc:	df 93       	push	r29
    18fe:	cf 93       	push	r28
    1900:	00 d0       	rcall	.+0      	; 0x1902 <DIO_u8SetPortDir+0x6>
    1902:	00 d0       	rcall	.+0      	; 0x1904 <DIO_u8SetPortDir+0x8>
    1904:	0f 92       	push	r0
    1906:	cd b7       	in	r28, 0x3d	; 61
    1908:	de b7       	in	r29, 0x3e	; 62
    190a:	8a 83       	std	Y+2, r24	; 0x02
    190c:	6b 83       	std	Y+3, r22	; 0x03
	u8 FuncReturnState = STD_OK;
    190e:	81 e0       	ldi	r24, 0x01	; 1
    1910:	89 83       	std	Y+1, r24	; 0x01

	if( (PortNo >= DIO_PORTA) && (PortNo <= DIO_PORTD) &&
    1912:	8a 81       	ldd	r24, Y+2	; 0x02
    1914:	84 30       	cpi	r24, 0x04	; 4
    1916:	98 f5       	brcc	.+102    	; 0x197e <DIO_u8SetPortDir+0x82>
		(PortDir>=0b00000000) && (PortDir<=0b11111111)	 )
	{

		switch (PortNo)
    1918:	8a 81       	ldd	r24, Y+2	; 0x02
    191a:	28 2f       	mov	r18, r24
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	3d 83       	std	Y+5, r19	; 0x05
    1920:	2c 83       	std	Y+4, r18	; 0x04
    1922:	8c 81       	ldd	r24, Y+4	; 0x04
    1924:	9d 81       	ldd	r25, Y+5	; 0x05
    1926:	81 30       	cpi	r24, 0x01	; 1
    1928:	91 05       	cpc	r25, r1
    192a:	d1 f0       	breq	.+52     	; 0x1960 <DIO_u8SetPortDir+0x64>
    192c:	2c 81       	ldd	r18, Y+4	; 0x04
    192e:	3d 81       	ldd	r19, Y+5	; 0x05
    1930:	22 30       	cpi	r18, 0x02	; 2
    1932:	31 05       	cpc	r19, r1
    1934:	2c f4       	brge	.+10     	; 0x1940 <DIO_u8SetPortDir+0x44>
    1936:	8c 81       	ldd	r24, Y+4	; 0x04
    1938:	9d 81       	ldd	r25, Y+5	; 0x05
    193a:	00 97       	sbiw	r24, 0x00	; 0
    193c:	61 f0       	breq	.+24     	; 0x1956 <DIO_u8SetPortDir+0x5a>
    193e:	20 c0       	rjmp	.+64     	; 0x1980 <DIO_u8SetPortDir+0x84>
    1940:	2c 81       	ldd	r18, Y+4	; 0x04
    1942:	3d 81       	ldd	r19, Y+5	; 0x05
    1944:	22 30       	cpi	r18, 0x02	; 2
    1946:	31 05       	cpc	r19, r1
    1948:	81 f0       	breq	.+32     	; 0x196a <DIO_u8SetPortDir+0x6e>
    194a:	8c 81       	ldd	r24, Y+4	; 0x04
    194c:	9d 81       	ldd	r25, Y+5	; 0x05
    194e:	83 30       	cpi	r24, 0x03	; 3
    1950:	91 05       	cpc	r25, r1
    1952:	81 f0       	breq	.+32     	; 0x1974 <DIO_u8SetPortDir+0x78>
    1954:	15 c0       	rjmp	.+42     	; 0x1980 <DIO_u8SetPortDir+0x84>
		{
			case DIO_PORTA:
				DDRA=PortDir; // el mfrod yb2a DDRA=PortDir portdir deh 7tb2a address like 0b00010011 mslan
    1956:	ea e3       	ldi	r30, 0x3A	; 58
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	8b 81       	ldd	r24, Y+3	; 0x03
    195c:	80 83       	st	Z, r24
    195e:	10 c0       	rjmp	.+32     	; 0x1980 <DIO_u8SetPortDir+0x84>
				break;

			case DIO_PORTB:
				DDRB=PortDir;
    1960:	e7 e3       	ldi	r30, 0x37	; 55
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	8b 81       	ldd	r24, Y+3	; 0x03
    1966:	80 83       	st	Z, r24
    1968:	0b c0       	rjmp	.+22     	; 0x1980 <DIO_u8SetPortDir+0x84>
				break;

			case DIO_PORTC:
				DDRC=PortDir;
    196a:	e4 e3       	ldi	r30, 0x34	; 52
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	8b 81       	ldd	r24, Y+3	; 0x03
    1970:	80 83       	st	Z, r24
    1972:	06 c0       	rjmp	.+12     	; 0x1980 <DIO_u8SetPortDir+0x84>
				break;

			case DIO_PORTD:
				DDRD=PortDir;
    1974:	e1 e3       	ldi	r30, 0x31	; 49
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	8b 81       	ldd	r24, Y+3	; 0x03
    197a:	80 83       	st	Z, r24
    197c:	01 c0       	rjmp	.+2      	; 0x1980 <DIO_u8SetPortDir+0x84>
				break;
		}
	}
	else
	{
		FuncReturnState = STD_NOK;
    197e:	19 82       	std	Y+1, r1	; 0x01
	}

	return FuncReturnState;
    1980:	89 81       	ldd	r24, Y+1	; 0x01
}
    1982:	0f 90       	pop	r0
    1984:	0f 90       	pop	r0
    1986:	0f 90       	pop	r0
    1988:	0f 90       	pop	r0
    198a:	0f 90       	pop	r0
    198c:	cf 91       	pop	r28
    198e:	df 91       	pop	r29
    1990:	08 95       	ret

00001992 <DIO_u8SetPortVal>:

u8 DIO_u8SetPortVal(u8 PortNo, u8 PortVal)
{
    1992:	df 93       	push	r29
    1994:	cf 93       	push	r28
    1996:	00 d0       	rcall	.+0      	; 0x1998 <DIO_u8SetPortVal+0x6>
    1998:	00 d0       	rcall	.+0      	; 0x199a <DIO_u8SetPortVal+0x8>
    199a:	0f 92       	push	r0
    199c:	cd b7       	in	r28, 0x3d	; 61
    199e:	de b7       	in	r29, 0x3e	; 62
    19a0:	8a 83       	std	Y+2, r24	; 0x02
    19a2:	6b 83       	std	Y+3, r22	; 0x03
	u8 FuncReturnState = STD_OK;
    19a4:	81 e0       	ldi	r24, 0x01	; 1
    19a6:	89 83       	std	Y+1, r24	; 0x01

	if( (PortNo >= DIO_PORTA) && (PortNo <= DIO_PORTD) &&
    19a8:	8a 81       	ldd	r24, Y+2	; 0x02
    19aa:	84 30       	cpi	r24, 0x04	; 4
    19ac:	98 f5       	brcc	.+102    	; 0x1a14 <DIO_u8SetPortVal+0x82>
		(PortVal>=0b00000000)  && (PortVal<=0b11111111)	 )
	{

		switch (PortNo)
    19ae:	8a 81       	ldd	r24, Y+2	; 0x02
    19b0:	28 2f       	mov	r18, r24
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	3d 83       	std	Y+5, r19	; 0x05
    19b6:	2c 83       	std	Y+4, r18	; 0x04
    19b8:	8c 81       	ldd	r24, Y+4	; 0x04
    19ba:	9d 81       	ldd	r25, Y+5	; 0x05
    19bc:	81 30       	cpi	r24, 0x01	; 1
    19be:	91 05       	cpc	r25, r1
    19c0:	d1 f0       	breq	.+52     	; 0x19f6 <DIO_u8SetPortVal+0x64>
    19c2:	2c 81       	ldd	r18, Y+4	; 0x04
    19c4:	3d 81       	ldd	r19, Y+5	; 0x05
    19c6:	22 30       	cpi	r18, 0x02	; 2
    19c8:	31 05       	cpc	r19, r1
    19ca:	2c f4       	brge	.+10     	; 0x19d6 <DIO_u8SetPortVal+0x44>
    19cc:	8c 81       	ldd	r24, Y+4	; 0x04
    19ce:	9d 81       	ldd	r25, Y+5	; 0x05
    19d0:	00 97       	sbiw	r24, 0x00	; 0
    19d2:	61 f0       	breq	.+24     	; 0x19ec <DIO_u8SetPortVal+0x5a>
    19d4:	20 c0       	rjmp	.+64     	; 0x1a16 <DIO_u8SetPortVal+0x84>
    19d6:	2c 81       	ldd	r18, Y+4	; 0x04
    19d8:	3d 81       	ldd	r19, Y+5	; 0x05
    19da:	22 30       	cpi	r18, 0x02	; 2
    19dc:	31 05       	cpc	r19, r1
    19de:	81 f0       	breq	.+32     	; 0x1a00 <DIO_u8SetPortVal+0x6e>
    19e0:	8c 81       	ldd	r24, Y+4	; 0x04
    19e2:	9d 81       	ldd	r25, Y+5	; 0x05
    19e4:	83 30       	cpi	r24, 0x03	; 3
    19e6:	91 05       	cpc	r25, r1
    19e8:	81 f0       	breq	.+32     	; 0x1a0a <DIO_u8SetPortVal+0x78>
    19ea:	15 c0       	rjmp	.+42     	; 0x1a16 <DIO_u8SetPortVal+0x84>
		{
			case DIO_PORTA:
				 PORTA=PortVal;
    19ec:	eb e3       	ldi	r30, 0x3B	; 59
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	8b 81       	ldd	r24, Y+3	; 0x03
    19f2:	80 83       	st	Z, r24
    19f4:	10 c0       	rjmp	.+32     	; 0x1a16 <DIO_u8SetPortVal+0x84>
				 break;

			case DIO_PORTB:
				 PORTB=PortVal;
    19f6:	e8 e3       	ldi	r30, 0x38	; 56
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	8b 81       	ldd	r24, Y+3	; 0x03
    19fc:	80 83       	st	Z, r24
    19fe:	0b c0       	rjmp	.+22     	; 0x1a16 <DIO_u8SetPortVal+0x84>
				 break;

			case DIO_PORTC:
				 PORTC=PortVal;
    1a00:	e5 e3       	ldi	r30, 0x35	; 53
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	8b 81       	ldd	r24, Y+3	; 0x03
    1a06:	80 83       	st	Z, r24
    1a08:	06 c0       	rjmp	.+12     	; 0x1a16 <DIO_u8SetPortVal+0x84>
				 break;

			case DIO_PORTD:
				 PORTD=PortVal;
    1a0a:	e2 e3       	ldi	r30, 0x32	; 50
    1a0c:	f0 e0       	ldi	r31, 0x00	; 0
    1a0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a10:	80 83       	st	Z, r24
    1a12:	01 c0       	rjmp	.+2      	; 0x1a16 <DIO_u8SetPortVal+0x84>
				 break;
		}
	}
	else
	{
		FuncReturnState = STD_NOK;
    1a14:	19 82       	std	Y+1, r1	; 0x01
	}

	return FuncReturnState;
    1a16:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a18:	0f 90       	pop	r0
    1a1a:	0f 90       	pop	r0
    1a1c:	0f 90       	pop	r0
    1a1e:	0f 90       	pop	r0
    1a20:	0f 90       	pop	r0
    1a22:	cf 91       	pop	r28
    1a24:	df 91       	pop	r29
    1a26:	08 95       	ret

00001a28 <DIO_u8GetPortVal>:


u8 DIO_u8GetPortVal(u8 PortNo, u8* PortVal)
{
    1a28:	df 93       	push	r29
    1a2a:	cf 93       	push	r28
    1a2c:	cd b7       	in	r28, 0x3d	; 61
    1a2e:	de b7       	in	r29, 0x3e	; 62
    1a30:	27 97       	sbiw	r28, 0x07	; 7
    1a32:	0f b6       	in	r0, 0x3f	; 63
    1a34:	f8 94       	cli
    1a36:	de bf       	out	0x3e, r29	; 62
    1a38:	0f be       	out	0x3f, r0	; 63
    1a3a:	cd bf       	out	0x3d, r28	; 61
    1a3c:	8b 83       	std	Y+3, r24	; 0x03
    1a3e:	7d 83       	std	Y+5, r23	; 0x05
    1a40:	6c 83       	std	Y+4, r22	; 0x04
	u8 FuncReturnState = STD_OK;
    1a42:	81 e0       	ldi	r24, 0x01	; 1
    1a44:	8a 83       	std	Y+2, r24	; 0x02

	if( (PortNo >= DIO_PORTA) && (PortNo <= DIO_PORTD) &&
    1a46:	8b 81       	ldd	r24, Y+3	; 0x03
    1a48:	84 30       	cpi	r24, 0x04	; 4
    1a4a:	08 f0       	brcs	.+2      	; 0x1a4e <DIO_u8GetPortVal+0x26>
    1a4c:	3f c0       	rjmp	.+126    	; 0x1acc <DIO_u8GetPortVal+0xa4>
    1a4e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a50:	9d 81       	ldd	r25, Y+5	; 0x05
    1a52:	00 97       	sbiw	r24, 0x00	; 0
    1a54:	d9 f1       	breq	.+118    	; 0x1acc <DIO_u8GetPortVal+0xa4>
		(PortVal != STD_NULL))
	{
		switch (PortNo)
    1a56:	8b 81       	ldd	r24, Y+3	; 0x03
    1a58:	28 2f       	mov	r18, r24
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	3f 83       	std	Y+7, r19	; 0x07
    1a5e:	2e 83       	std	Y+6, r18	; 0x06
    1a60:	8e 81       	ldd	r24, Y+6	; 0x06
    1a62:	9f 81       	ldd	r25, Y+7	; 0x07
    1a64:	81 30       	cpi	r24, 0x01	; 1
    1a66:	91 05       	cpc	r25, r1
    1a68:	e1 f0       	breq	.+56     	; 0x1aa2 <DIO_u8GetPortVal+0x7a>
    1a6a:	2e 81       	ldd	r18, Y+6	; 0x06
    1a6c:	3f 81       	ldd	r19, Y+7	; 0x07
    1a6e:	22 30       	cpi	r18, 0x02	; 2
    1a70:	31 05       	cpc	r19, r1
    1a72:	2c f4       	brge	.+10     	; 0x1a7e <DIO_u8GetPortVal+0x56>
    1a74:	8e 81       	ldd	r24, Y+6	; 0x06
    1a76:	9f 81       	ldd	r25, Y+7	; 0x07
    1a78:	00 97       	sbiw	r24, 0x00	; 0
    1a7a:	61 f0       	breq	.+24     	; 0x1a94 <DIO_u8GetPortVal+0x6c>
    1a7c:	28 c0       	rjmp	.+80     	; 0x1ace <DIO_u8GetPortVal+0xa6>
    1a7e:	2e 81       	ldd	r18, Y+6	; 0x06
    1a80:	3f 81       	ldd	r19, Y+7	; 0x07
    1a82:	22 30       	cpi	r18, 0x02	; 2
    1a84:	31 05       	cpc	r19, r1
    1a86:	a1 f0       	breq	.+40     	; 0x1ab0 <DIO_u8GetPortVal+0x88>
    1a88:	8e 81       	ldd	r24, Y+6	; 0x06
    1a8a:	9f 81       	ldd	r25, Y+7	; 0x07
    1a8c:	83 30       	cpi	r24, 0x03	; 3
    1a8e:	91 05       	cpc	r25, r1
    1a90:	b1 f0       	breq	.+44     	; 0x1abe <DIO_u8GetPortVal+0x96>
    1a92:	1d c0       	rjmp	.+58     	; 0x1ace <DIO_u8GetPortVal+0xa6>
		{
			case DIO_PORTA:
				*PortVal = PINA;
    1a94:	e9 e3       	ldi	r30, 0x39	; 57
    1a96:	f0 e0       	ldi	r31, 0x00	; 0
    1a98:	80 81       	ld	r24, Z
    1a9a:	ec 81       	ldd	r30, Y+4	; 0x04
    1a9c:	fd 81       	ldd	r31, Y+5	; 0x05
    1a9e:	80 83       	st	Z, r24
    1aa0:	16 c0       	rjmp	.+44     	; 0x1ace <DIO_u8GetPortVal+0xa6>
				break;
			case DIO_PORTB:
				*PortVal = PINB;
    1aa2:	e6 e3       	ldi	r30, 0x36	; 54
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	80 81       	ld	r24, Z
    1aa8:	ec 81       	ldd	r30, Y+4	; 0x04
    1aaa:	fd 81       	ldd	r31, Y+5	; 0x05
    1aac:	80 83       	st	Z, r24
    1aae:	0f c0       	rjmp	.+30     	; 0x1ace <DIO_u8GetPortVal+0xa6>
				break;
			case DIO_PORTC:
				*PortVal = PINC;
    1ab0:	e3 e3       	ldi	r30, 0x33	; 51
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	80 81       	ld	r24, Z
    1ab6:	ec 81       	ldd	r30, Y+4	; 0x04
    1ab8:	fd 81       	ldd	r31, Y+5	; 0x05
    1aba:	80 83       	st	Z, r24
    1abc:	08 c0       	rjmp	.+16     	; 0x1ace <DIO_u8GetPortVal+0xa6>
				break;
			case DIO_PORTD:
				*PortVal = PIND;
    1abe:	e0 e3       	ldi	r30, 0x30	; 48
    1ac0:	f0 e0       	ldi	r31, 0x00	; 0
    1ac2:	80 81       	ld	r24, Z
    1ac4:	ec 81       	ldd	r30, Y+4	; 0x04
    1ac6:	fd 81       	ldd	r31, Y+5	; 0x05
    1ac8:	80 83       	st	Z, r24
    1aca:	01 c0       	rjmp	.+2      	; 0x1ace <DIO_u8GetPortVal+0xa6>
				break;
		}
	}
	else
	{
		u8 FuncReturnState = STD_NOK;
    1acc:	19 82       	std	Y+1, r1	; 0x01
	}

	return FuncReturnState;
    1ace:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1ad0:	27 96       	adiw	r28, 0x07	; 7
    1ad2:	0f b6       	in	r0, 0x3f	; 63
    1ad4:	f8 94       	cli
    1ad6:	de bf       	out	0x3e, r29	; 62
    1ad8:	0f be       	out	0x3f, r0	; 63
    1ada:	cd bf       	out	0x3d, r28	; 61
    1adc:	cf 91       	pop	r28
    1ade:	df 91       	pop	r29
    1ae0:	08 95       	ret

00001ae2 <eeprom_init>:
#include "EEPROM_config.h"
//#include "eeprom.h"
//#include "I2C.h"

void eeprom_init(void)
{
    1ae2:	df 93       	push	r29
    1ae4:	cf 93       	push	r28
    1ae6:	cd b7       	in	r28, 0x3d	; 61
    1ae8:	de b7       	in	r29, 0x3e	; 62
	i2c_init_master();
    1aea:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <i2c_init_master>
}
    1aee:	cf 91       	pop	r28
    1af0:	df 91       	pop	r29
    1af2:	08 95       	ret

00001af4 <eeprom_write_byte>:

void eeprom_write_byte(unsigned short address, unsigned char data)
{
    1af4:	df 93       	push	r29
    1af6:	cf 93       	push	r28
    1af8:	00 d0       	rcall	.+0      	; 0x1afa <eeprom_write_byte+0x6>
    1afa:	0f 92       	push	r0
    1afc:	cd b7       	in	r28, 0x3d	; 61
    1afe:	de b7       	in	r29, 0x3e	; 62
    1b00:	9a 83       	std	Y+2, r25	; 0x02
    1b02:	89 83       	std	Y+1, r24	; 0x01
    1b04:	6b 83       	std	Y+3, r22	; 0x03
//	Write_data('2');
    i2c_start();
    1b06:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <i2c_start>
//    Write_data('3');
	i2c_send_slave_address_with_write_req( 0x50 | ((address & 0x0700)>>8) );
    1b0a:	89 81       	ldd	r24, Y+1	; 0x01
    1b0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b0e:	80 70       	andi	r24, 0x00	; 0
    1b10:	97 70       	andi	r25, 0x07	; 7
    1b12:	89 2f       	mov	r24, r25
    1b14:	99 27       	eor	r25, r25
    1b16:	80 65       	ori	r24, 0x50	; 80
    1b18:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <i2c_send_slave_address_with_write_req>

	0000000000000000		-00000000
	0000000001010000  |
	10100000
	*/
	i2c_write_byte((unsigned char)address);
    1b1c:	89 81       	ldd	r24, Y+1	; 0x01
    1b1e:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <i2c_write_byte>
//	Write_data('9');
	i2c_write_byte(data);
    1b22:	8b 81       	ldd	r24, Y+3	; 0x03
    1b24:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <i2c_write_byte>
//	Write_data('A');
	i2c_stop();
    1b28:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <i2c_stop>
//	Write_data('B');
    return;
}
    1b2c:	0f 90       	pop	r0
    1b2e:	0f 90       	pop	r0
    1b30:	0f 90       	pop	r0
    1b32:	cf 91       	pop	r28
    1b34:	df 91       	pop	r29
    1b36:	08 95       	ret

00001b38 <eeprom_read_byte>:

unsigned char eeprom_read_byte(unsigned short address)
{
    1b38:	df 93       	push	r29
    1b3a:	cf 93       	push	r28
    1b3c:	00 d0       	rcall	.+0      	; 0x1b3e <eeprom_read_byte+0x6>
    1b3e:	0f 92       	push	r0
    1b40:	cd b7       	in	r28, 0x3d	; 61
    1b42:	de b7       	in	r29, 0x3e	; 62
    1b44:	9b 83       	std	Y+3, r25	; 0x03
    1b46:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char data;
	i2c_start();
    1b48:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <i2c_start>
	i2c_send_slave_address_with_write_req( 0x50 | ((address & 0x0700)>>8) );
    1b4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4e:	9b 81       	ldd	r25, Y+3	; 0x03
    1b50:	80 70       	andi	r24, 0x00	; 0
    1b52:	97 70       	andi	r25, 0x07	; 7
    1b54:	89 2f       	mov	r24, r25
    1b56:	99 27       	eor	r25, r25
    1b58:	80 65       	ori	r24, 0x50	; 80
    1b5a:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <i2c_send_slave_address_with_write_req>
//	i2c_send_slave_address_with_write_req( 0b10100000 );
    i2c_write_byte((unsigned char)address);
    1b5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b60:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <i2c_write_byte>
	i2c_repeated_start();
    1b64:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <i2c_repeated_start>
	i2c_send_slave_address_with_read_req( 0x50 | ((address & 0x0700)>>8) );
    1b68:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b6c:	80 70       	andi	r24, 0x00	; 0
    1b6e:	97 70       	andi	r25, 0x07	; 7
    1b70:	89 2f       	mov	r24, r25
    1b72:	99 27       	eor	r25, r25
    1b74:	80 65       	ori	r24, 0x50	; 80
    1b76:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <i2c_send_slave_address_with_read_req>
//	i2c_send_slave_address_with_read_req( 0b10100001 );
	data = i2c_read_byte();
    1b7a:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <i2c_read_byte>
    1b7e:	89 83       	std	Y+1, r24	; 0x01
	i2c_stop();
    1b80:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <i2c_stop>
    return data;
    1b84:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b86:	0f 90       	pop	r0
    1b88:	0f 90       	pop	r0
    1b8a:	0f 90       	pop	r0
    1b8c:	cf 91       	pop	r28
    1b8e:	df 91       	pop	r29
    1b90:	08 95       	ret

00001b92 <GI_voidGlobalIntEnable>:
#include "GI_interface.h"

#define SREG       *((volatile u8 *)0x5F)

void GI_voidGlobalIntEnable(void)
{
    1b92:	df 93       	push	r29
    1b94:	cf 93       	push	r28
    1b96:	cd b7       	in	r28, 0x3d	; 61
    1b98:	de b7       	in	r29, 0x3e	; 62
	set_bit(SREG,7);
    1b9a:	af e5       	ldi	r26, 0x5F	; 95
    1b9c:	b0 e0       	ldi	r27, 0x00	; 0
    1b9e:	ef e5       	ldi	r30, 0x5F	; 95
    1ba0:	f0 e0       	ldi	r31, 0x00	; 0
    1ba2:	80 81       	ld	r24, Z
    1ba4:	80 68       	ori	r24, 0x80	; 128
    1ba6:	8c 93       	st	X, r24
}
    1ba8:	cf 91       	pop	r28
    1baa:	df 91       	pop	r29
    1bac:	08 95       	ret

00001bae <GI_voidGlobalIntDisable>:

void GI_voidGlobalIntDisable(void)
{
    1bae:	df 93       	push	r29
    1bb0:	cf 93       	push	r28
    1bb2:	cd b7       	in	r28, 0x3d	; 61
    1bb4:	de b7       	in	r29, 0x3e	; 62
	clr_bit(SREG,7);
    1bb6:	af e5       	ldi	r26, 0x5F	; 95
    1bb8:	b0 e0       	ldi	r27, 0x00	; 0
    1bba:	ef e5       	ldi	r30, 0x5F	; 95
    1bbc:	f0 e0       	ldi	r31, 0x00	; 0
    1bbe:	80 81       	ld	r24, Z
    1bc0:	8f 77       	andi	r24, 0x7F	; 127
    1bc2:	8c 93       	st	X, r24
    1bc4:	cf 91       	pop	r28
    1bc6:	df 91       	pop	r29
    1bc8:	08 95       	ret

00001bca <i2c_init_master>:
#include "I2C_private.h"
//#include "I2C_config.h"


void i2c_init_master(void)
{
    1bca:	df 93       	push	r29
    1bcc:	cf 93       	push	r28
    1bce:	cd b7       	in	r28, 0x3d	; 61
    1bd0:	de b7       	in	r29, 0x3e	; 62
	TWBR = 0x02; // bit rate = 400.000 kbps, F_CPU = 8M   SCL freq= F_CPU/(16+2(TWBR).4^TWPS)
    1bd2:	e0 e2       	ldi	r30, 0x20	; 32
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	82 e0       	ldi	r24, 0x02	; 2
    1bd8:	80 83       	st	Z, r24
	TWSR &= ~((1<<TWPS1) | (1<<TWPS0));    //baud rate
    1bda:	a1 e2       	ldi	r26, 0x21	; 33
    1bdc:	b0 e0       	ldi	r27, 0x00	; 0
    1bde:	e1 e2       	ldi	r30, 0x21	; 33
    1be0:	f0 e0       	ldi	r31, 0x00	; 0
    1be2:	80 81       	ld	r24, Z
    1be4:	8c 7f       	andi	r24, 0xFC	; 252
    1be6:	8c 93       	st	X, r24
	TWCR = (1<<TWEN);                      //enable I2C
    1be8:	e6 e5       	ldi	r30, 0x56	; 86
    1bea:	f0 e0       	ldi	r31, 0x00	; 0
    1bec:	84 e0       	ldi	r24, 0x04	; 4
    1bee:	80 83       	st	Z, r24
	return;
}
    1bf0:	cf 91       	pop	r28
    1bf2:	df 91       	pop	r29
    1bf4:	08 95       	ret

00001bf6 <i2c_init_slave>:

void i2c_init_slave(void)
{
    1bf6:	df 93       	push	r29
    1bf8:	cf 93       	push	r28
    1bfa:	cd b7       	in	r28, 0x3d	; 61
    1bfc:	de b7       	in	r29, 0x3e	; 62
	TWAR = (1<<1);    // my address = 0x01
    1bfe:	e2 e2       	ldi	r30, 0x22	; 34
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	82 e0       	ldi	r24, 0x02	; 2
    1c04:	80 83       	st	Z, r24
	TWCR = (1<<TWEN); //enable I2C
    1c06:	e6 e5       	ldi	r30, 0x56	; 86
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	84 e0       	ldi	r24, 0x04	; 4
    1c0c:	80 83       	st	Z, r24
	return;
}
    1c0e:	cf 91       	pop	r28
    1c10:	df 91       	pop	r29
    1c12:	08 95       	ret

00001c14 <i2c_start>:

void i2c_start(void)
{
    1c14:	df 93       	push	r29
    1c16:	cf 93       	push	r28
    1c18:	cd b7       	in	r28, 0x3d	; 61
    1c1a:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);      // Clear TWI interrupt flag, Put start condition on SDA, Enable TWI
    1c1c:	e6 e5       	ldi	r30, 0x56	; 86
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	84 ea       	ldi	r24, 0xA4	; 164
    1c22:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT)));                     // Wait till start condition is transmitted
    1c24:	e6 e5       	ldi	r30, 0x56	; 86
    1c26:	f0 e0       	ldi	r31, 0x00	; 0
    1c28:	80 81       	ld	r24, Z
    1c2a:	88 23       	and	r24, r24
    1c2c:	dc f7       	brge	.-10     	; 0x1c24 <i2c_start+0x10>
	while((TWSR & 0xF8) != START_ACK);               // Check for the acknowledgment
    1c2e:	e1 e2       	ldi	r30, 0x21	; 33
    1c30:	f0 e0       	ldi	r31, 0x00	; 0
    1c32:	80 81       	ld	r24, Z
    1c34:	88 2f       	mov	r24, r24
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	88 7f       	andi	r24, 0xF8	; 248
    1c3a:	90 70       	andi	r25, 0x00	; 0
    1c3c:	88 30       	cpi	r24, 0x08	; 8
    1c3e:	91 05       	cpc	r25, r1
    1c40:	b1 f7       	brne	.-20     	; 0x1c2e <i2c_start+0x1a>
	return;
}
    1c42:	cf 91       	pop	r28
    1c44:	df 91       	pop	r29
    1c46:	08 95       	ret

00001c48 <i2c_repeated_start>:

void i2c_repeated_start(void)
{
    1c48:	df 93       	push	r29
    1c4a:	cf 93       	push	r28
    1c4c:	cd b7       	in	r28, 0x3d	; 61
    1c4e:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);         // Clear TWI interrupt flag, Put start condition on SDA, Enable TWI
    1c50:	e6 e5       	ldi	r30, 0x56	; 86
    1c52:	f0 e0       	ldi	r31, 0x00	; 0
    1c54:	84 ea       	ldi	r24, 0xA4	; 164
    1c56:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT)));                        // wait till restart condition is transmitted
    1c58:	e6 e5       	ldi	r30, 0x56	; 86
    1c5a:	f0 e0       	ldi	r31, 0x00	; 0
    1c5c:	80 81       	ld	r24, Z
    1c5e:	88 23       	and	r24, r24
    1c60:	dc f7       	brge	.-10     	; 0x1c58 <i2c_repeated_start+0x10>
	while((TWSR & 0xF8) != REP_START_ACK);              // Check for the acknowledgment
    1c62:	e1 e2       	ldi	r30, 0x21	; 33
    1c64:	f0 e0       	ldi	r31, 0x00	; 0
    1c66:	80 81       	ld	r24, Z
    1c68:	88 2f       	mov	r24, r24
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	88 7f       	andi	r24, 0xF8	; 248
    1c6e:	90 70       	andi	r25, 0x00	; 0
    1c70:	80 31       	cpi	r24, 0x10	; 16
    1c72:	91 05       	cpc	r25, r1
    1c74:	b1 f7       	brne	.-20     	; 0x1c62 <i2c_repeated_start+0x1a>
	return;
}
    1c76:	cf 91       	pop	r28
    1c78:	df 91       	pop	r29
    1c7a:	08 95       	ret

00001c7c <i2c_send_slave_address_with_write_req>:

void i2c_send_slave_address_with_write_req(unsigned char slave_address)
{
    1c7c:	df 93       	push	r29
    1c7e:	cf 93       	push	r28
    1c80:	0f 92       	push	r0
    1c82:	cd b7       	in	r28, 0x3d	; 61
    1c84:	de b7       	in	r29, 0x3e	; 62
    1c86:	89 83       	std	Y+1, r24	; 0x01
//	Write_data('4');
	TWDR = (slave_address<<1);                     //Address and write instruction
    1c88:	e3 e2       	ldi	r30, 0x23	; 35
    1c8a:	f0 e0       	ldi	r31, 0x00	; 0
    1c8c:	89 81       	ldd	r24, Y+1	; 0x01
    1c8e:	88 0f       	add	r24, r24
    1c90:	80 83       	st	Z, r24
//	Write_data('5');
	TWCR = (1<<TWINT) | (1<<TWEN);                 // Clear TWI interrupt flag, Enable TWI
    1c92:	e6 e5       	ldi	r30, 0x56	; 86
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	84 e8       	ldi	r24, 0x84	; 132
    1c98:	80 83       	st	Z, r24
//	Write_data('6');
	while (!(TWCR & (1<<TWINT)));                  // Wait till complete TWDR byte transmitted
    1c9a:	e6 e5       	ldi	r30, 0x56	; 86
    1c9c:	f0 e0       	ldi	r31, 0x00	; 0
    1c9e:	80 81       	ld	r24, Z
    1ca0:	88 23       	and	r24, r24
    1ca2:	dc f7       	brge	.-10     	; 0x1c9a <i2c_send_slave_address_with_write_req+0x1e>
//	Write_data('7');
	while((TWSR & 0xF8) != SLAVE_ADD_AND_WR_ACK);  // Check for the acknowledgment
    1ca4:	e1 e2       	ldi	r30, 0x21	; 33
    1ca6:	f0 e0       	ldi	r31, 0x00	; 0
    1ca8:	80 81       	ld	r24, Z
    1caa:	88 2f       	mov	r24, r24
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	88 7f       	andi	r24, 0xF8	; 248
    1cb0:	90 70       	andi	r25, 0x00	; 0
    1cb2:	88 31       	cpi	r24, 0x18	; 24
    1cb4:	91 05       	cpc	r25, r1
    1cb6:	b1 f7       	brne	.-20     	; 0x1ca4 <i2c_send_slave_address_with_write_req+0x28>
//	Write_data('8');
	return;
}
    1cb8:	0f 90       	pop	r0
    1cba:	cf 91       	pop	r28
    1cbc:	df 91       	pop	r29
    1cbe:	08 95       	ret

00001cc0 <i2c_send_slave_address_with_read_req>:

void i2c_send_slave_address_with_read_req(unsigned char slave_address)
{
    1cc0:	df 93       	push	r29
    1cc2:	cf 93       	push	r28
    1cc4:	0f 92       	push	r0
    1cc6:	cd b7       	in	r28, 0x3d	; 61
    1cc8:	de b7       	in	r29, 0x3e	; 62
    1cca:	89 83       	std	Y+1, r24	; 0x01
	TWDR = (slave_address<<1);                     //Address
    1ccc:	e3 e2       	ldi	r30, 0x23	; 35
    1cce:	f0 e0       	ldi	r31, 0x00	; 0
    1cd0:	89 81       	ldd	r24, Y+1	; 0x01
    1cd2:	88 0f       	add	r24, r24
    1cd4:	80 83       	st	Z, r24
	TWDR |= (1<<0);                                // read instruction
    1cd6:	a3 e2       	ldi	r26, 0x23	; 35
    1cd8:	b0 e0       	ldi	r27, 0x00	; 0
    1cda:	e3 e2       	ldi	r30, 0x23	; 35
    1cdc:	f0 e0       	ldi	r31, 0x00	; 0
    1cde:	80 81       	ld	r24, Z
    1ce0:	81 60       	ori	r24, 0x01	; 1
    1ce2:	8c 93       	st	X, r24
//	TWDR = slave_address;
	TWCR = (1<<TWINT) | (1<<TWEN);                 // Clear TWI interrupt flag,Enable TWI
    1ce4:	e6 e5       	ldi	r30, 0x56	; 86
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	84 e8       	ldi	r24, 0x84	; 132
    1cea:	80 83       	st	Z, r24
	while (!(TWCR & (1<<TWINT)));                  // Wait till complete TWDR byte received
    1cec:	e6 e5       	ldi	r30, 0x56	; 86
    1cee:	f0 e0       	ldi	r31, 0x00	; 0
    1cf0:	80 81       	ld	r24, Z
    1cf2:	88 23       	and	r24, r24
    1cf4:	dc f7       	brge	.-10     	; 0x1cec <i2c_send_slave_address_with_read_req+0x2c>
	while((TWSR & 0xF8) != SLAVE_ADD_AND_RD_ACK);  // Check for the acknowledgment
    1cf6:	e1 e2       	ldi	r30, 0x21	; 33
    1cf8:	f0 e0       	ldi	r31, 0x00	; 0
    1cfa:	80 81       	ld	r24, Z
    1cfc:	88 2f       	mov	r24, r24
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	88 7f       	andi	r24, 0xF8	; 248
    1d02:	90 70       	andi	r25, 0x00	; 0
    1d04:	80 34       	cpi	r24, 0x40	; 64
    1d06:	91 05       	cpc	r25, r1
    1d08:	b1 f7       	brne	.-20     	; 0x1cf6 <i2c_send_slave_address_with_read_req+0x36>
}
    1d0a:	0f 90       	pop	r0
    1d0c:	cf 91       	pop	r28
    1d0e:	df 91       	pop	r29
    1d10:	08 95       	ret

00001d12 <i2c_write_byte>:

void i2c_write_byte(unsigned char byte)
{
    1d12:	df 93       	push	r29
    1d14:	cf 93       	push	r28
    1d16:	0f 92       	push	r0
    1d18:	cd b7       	in	r28, 0x3d	; 61
    1d1a:	de b7       	in	r29, 0x3e	; 62
    1d1c:	89 83       	std	Y+1, r24	; 0x01
	TWDR = byte;                         // put data in TWDR
    1d1e:	e3 e2       	ldi	r30, 0x23	; 35
    1d20:	f0 e0       	ldi	r31, 0x00	; 0
    1d22:	89 81       	ldd	r24, Y+1	; 0x01
    1d24:	80 83       	st	Z, r24
	TWCR = (1<<TWINT) | (1<<TWEN);       // Clear TWI interrupt flag,Enable TWI
    1d26:	e6 e5       	ldi	r30, 0x56	; 86
    1d28:	f0 e0       	ldi	r31, 0x00	; 0
    1d2a:	84 e8       	ldi	r24, 0x84	; 132
    1d2c:	80 83       	st	Z, r24
	while (!(TWCR & (1<<TWINT)));        // Wait till complete TWDR byte transmitted
    1d2e:	e6 e5       	ldi	r30, 0x56	; 86
    1d30:	f0 e0       	ldi	r31, 0x00	; 0
    1d32:	80 81       	ld	r24, Z
    1d34:	88 23       	and	r24, r24
    1d36:	dc f7       	brge	.-10     	; 0x1d2e <i2c_write_byte+0x1c>
	while((TWSR & 0xF8) != WR_BYTE_ACK); // Check for the acknowledgment
    1d38:	e1 e2       	ldi	r30, 0x21	; 33
    1d3a:	f0 e0       	ldi	r31, 0x00	; 0
    1d3c:	80 81       	ld	r24, Z
    1d3e:	88 2f       	mov	r24, r24
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	88 7f       	andi	r24, 0xF8	; 248
    1d44:	90 70       	andi	r25, 0x00	; 0
    1d46:	88 32       	cpi	r24, 0x28	; 40
    1d48:	91 05       	cpc	r25, r1
    1d4a:	b1 f7       	brne	.-20     	; 0x1d38 <i2c_write_byte+0x26>
	return;
}
    1d4c:	0f 90       	pop	r0
    1d4e:	cf 91       	pop	r28
    1d50:	df 91       	pop	r29
    1d52:	08 95       	ret

00001d54 <i2c_read_byte>:

unsigned char i2c_read_byte(void)
{
    1d54:	df 93       	push	r29
    1d56:	cf 93       	push	r28
    1d58:	cd b7       	in	r28, 0x3d	; 61
    1d5a:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT) | (1<<TWEN);             // Clear TWI interrupt flag,Enable TWI
    1d5c:	e6 e5       	ldi	r30, 0x56	; 86
    1d5e:	f0 e0       	ldi	r31, 0x00	; 0
    1d60:	84 e8       	ldi	r24, 0x84	; 132
    1d62:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT)));               // Wait till complete TWDR byte transmitted
    1d64:	e6 e5       	ldi	r30, 0x56	; 86
    1d66:	f0 e0       	ldi	r31, 0x00	; 0
    1d68:	80 81       	ld	r24, Z
    1d6a:	88 23       	and	r24, r24
    1d6c:	dc f7       	brge	.-10     	; 0x1d64 <i2c_read_byte+0x10>
	while((TWSR & 0xF8) != RD_BYTE_WITH_NACK); // Check for the acknowledgment
    1d6e:	e1 e2       	ldi	r30, 0x21	; 33
    1d70:	f0 e0       	ldi	r31, 0x00	; 0
    1d72:	80 81       	ld	r24, Z
    1d74:	88 2f       	mov	r24, r24
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	88 7f       	andi	r24, 0xF8	; 248
    1d7a:	90 70       	andi	r25, 0x00	; 0
    1d7c:	88 35       	cpi	r24, 0x58	; 88
    1d7e:	91 05       	cpc	r25, r1
    1d80:	b1 f7       	brne	.-20     	; 0x1d6e <i2c_read_byte+0x1a>
	return TWDR;
    1d82:	e3 e2       	ldi	r30, 0x23	; 35
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	80 81       	ld	r24, Z
}
    1d88:	cf 91       	pop	r28
    1d8a:	df 91       	pop	r29
    1d8c:	08 95       	ret

00001d8e <i2c_stop>:

void i2c_stop(void)
{
    1d8e:	df 93       	push	r29
    1d90:	cf 93       	push	r28
    1d92:	cd b7       	in	r28, 0x3d	; 61
    1d94:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO); // Clear TWI interrupt flag, Put stop condition on SDA,Enable TWI
    1d96:	e6 e5       	ldi	r30, 0x56	; 86
    1d98:	f0 e0       	ldi	r31, 0x00	; 0
    1d9a:	84 e9       	ldi	r24, 0x94	; 148
    1d9c:	80 83       	st	Z, r24
	return;
}
    1d9e:	cf 91       	pop	r28
    1da0:	df 91       	pop	r29
    1da2:	08 95       	ret

00001da4 <i2c_slave_check_slave_address_received_with_write_req>:

void i2c_slave_check_slave_address_received_with_write_req(void)
{
    1da4:	df 93       	push	r29
    1da6:	cf 93       	push	r28
    1da8:	cd b7       	in	r28, 0x3d	; 61
    1daa:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWEA) | (1<<TWEN) | (1<<TWINT);       // enable acknowledgment after receive, Enable TWI, Clear TWI interrupt flag
    1dac:	e6 e5       	ldi	r30, 0x56	; 86
    1dae:	f0 e0       	ldi	r31, 0x00	; 0
    1db0:	84 ec       	ldi	r24, 0xC4	; 196
    1db2:	80 83       	st	Z, r24
	while (!(TWCR & (1<<TWINT)));                    // Wait for TWINT flag
    1db4:	e6 e5       	ldi	r30, 0x56	; 86
    1db6:	f0 e0       	ldi	r31, 0x00	; 0
    1db8:	80 81       	ld	r24, Z
    1dba:	88 23       	and	r24, r24
    1dbc:	dc f7       	brge	.-10     	; 0x1db4 <i2c_slave_check_slave_address_received_with_write_req+0x10>
	while((TWSR & 0xF8) != SLAVE_ADD_RCVD_WR_REQ) ;
    1dbe:	e1 e2       	ldi	r30, 0x21	; 33
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	80 81       	ld	r24, Z
    1dc4:	88 2f       	mov	r24, r24
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	88 7f       	andi	r24, 0xF8	; 248
    1dca:	90 70       	andi	r25, 0x00	; 0
    1dcc:	80 36       	cpi	r24, 0x60	; 96
    1dce:	91 05       	cpc	r25, r1
    1dd0:	b1 f7       	brne	.-20     	; 0x1dbe <i2c_slave_check_slave_address_received_with_write_req+0x1a>
	return;
}
    1dd2:	cf 91       	pop	r28
    1dd4:	df 91       	pop	r29
    1dd6:	08 95       	ret

00001dd8 <i2c_slave_check_slave_address_received_with_read_req>:

void i2c_slave_check_slave_address_received_with_read_req(void)
{
    1dd8:	df 93       	push	r29
    1dda:	cf 93       	push	r28
    1ddc:	cd b7       	in	r28, 0x3d	; 61
    1dde:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWEA) | (1<<TWEN) | (1<<TWINT); // enable acknowledgment after receive, Enable TWI, Clear TWI interrupt flag
    1de0:	e6 e5       	ldi	r30, 0x56	; 86
    1de2:	f0 e0       	ldi	r31, 0x00	; 0
    1de4:	84 ec       	ldi	r24, 0xC4	; 196
    1de6:	80 83       	st	Z, r24
	while (!(TWCR & (1<<TWINT)));              // Wait for TWINT flag
    1de8:	e6 e5       	ldi	r30, 0x56	; 86
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	80 81       	ld	r24, Z
    1dee:	88 23       	and	r24, r24
    1df0:	dc f7       	brge	.-10     	; 0x1de8 <i2c_slave_check_slave_address_received_with_read_req+0x10>
	while((TWSR & 0xF8) != SLAVE_ADD_RCVD_RD_REQ);
    1df2:	e1 e2       	ldi	r30, 0x21	; 33
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	80 81       	ld	r24, Z
    1df8:	88 2f       	mov	r24, r24
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	88 7f       	andi	r24, 0xF8	; 248
    1dfe:	90 70       	andi	r25, 0x00	; 0
    1e00:	88 3a       	cpi	r24, 0xA8	; 168
    1e02:	91 05       	cpc	r25, r1
    1e04:	b1 f7       	brne	.-20     	; 0x1df2 <i2c_slave_check_slave_address_received_with_read_req+0x1a>
	return;
}
    1e06:	cf 91       	pop	r28
    1e08:	df 91       	pop	r29
    1e0a:	08 95       	ret

00001e0c <i2c_slave_read_byte>:

unsigned char i2c_slave_read_byte(void)
{
    1e0c:	df 93       	push	r29
    1e0e:	cf 93       	push	r28
    1e10:	cd b7       	in	r28, 0x3d	; 61
    1e12:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);     // Clear TWI interrupt flag,Get enable acknowledgment, Enable TWI
    1e14:	e6 e5       	ldi	r30, 0x56	; 86
    1e16:	f0 e0       	ldi	r31, 0x00	; 0
    1e18:	84 ec       	ldi	r24, 0xC4	; 196
    1e1a:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT)));                   // Wait for TWINT flag
    1e1c:	e6 e5       	ldi	r30, 0x56	; 86
    1e1e:	f0 e0       	ldi	r31, 0x00	; 0
    1e20:	80 81       	ld	r24, Z
    1e22:	88 23       	and	r24, r24
    1e24:	dc f7       	brge	.-10     	; 0x1e1c <i2c_slave_read_byte+0x10>
	while((TWSR & 0xF8) != SLAVE_DATA_RECEIVED);
    1e26:	e1 e2       	ldi	r30, 0x21	; 33
    1e28:	f0 e0       	ldi	r31, 0x00	; 0
    1e2a:	80 81       	ld	r24, Z
    1e2c:	88 2f       	mov	r24, r24
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	88 7f       	andi	r24, 0xF8	; 248
    1e32:	90 70       	andi	r25, 0x00	; 0
    1e34:	80 38       	cpi	r24, 0x80	; 128
    1e36:	91 05       	cpc	r25, r1
    1e38:	b1 f7       	brne	.-20     	; 0x1e26 <i2c_slave_read_byte+0x1a>
	return TWDR;
    1e3a:	e3 e2       	ldi	r30, 0x23	; 35
    1e3c:	f0 e0       	ldi	r31, 0x00	; 0
    1e3e:	80 81       	ld	r24, Z
}
    1e40:	cf 91       	pop	r28
    1e42:	df 91       	pop	r29
    1e44:	08 95       	ret

00001e46 <i2c_slave_write_byte>:

void i2c_slave_write_byte(unsigned char byte)
{
    1e46:	df 93       	push	r29
    1e48:	cf 93       	push	r28
    1e4a:	0f 92       	push	r0
    1e4c:	cd b7       	in	r28, 0x3d	; 61
    1e4e:	de b7       	in	r29, 0x3e	; 62
    1e50:	89 83       	std	Y+1, r24	; 0x01
	TWDR = byte;
    1e52:	e3 e2       	ldi	r30, 0x23	; 35
    1e54:	f0 e0       	ldi	r31, 0x00	; 0
    1e56:	89 81       	ldd	r24, Y+1	; 0x01
    1e58:	80 83       	st	Z, r24
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);    // Clear TWI interrupt flag,Get enable acknowledgment, Enable TWI
    1e5a:	e6 e5       	ldi	r30, 0x56	; 86
    1e5c:	f0 e0       	ldi	r31, 0x00	; 0
    1e5e:	84 ec       	ldi	r24, 0xC4	; 196
    1e60:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT)));                  // Wait for TWINT flag
    1e62:	e6 e5       	ldi	r30, 0x56	; 86
    1e64:	f0 e0       	ldi	r31, 0x00	; 0
    1e66:	80 81       	ld	r24, Z
    1e68:	88 23       	and	r24, r24
    1e6a:	dc f7       	brge	.-10     	; 0x1e62 <i2c_slave_write_byte+0x1c>
	while((TWSR & 0xF8) != SLAVE_BYTE_TRANSMITTED);    // Data byte in TWDR has been transmitted
    1e6c:	e1 e2       	ldi	r30, 0x21	; 33
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	80 81       	ld	r24, Z
    1e72:	88 2f       	mov	r24, r24
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	88 7f       	andi	r24, 0xF8	; 248
    1e78:	90 70       	andi	r25, 0x00	; 0
    1e7a:	80 3c       	cpi	r24, 0xC0	; 192
    1e7c:	91 05       	cpc	r25, r1
    1e7e:	b1 f7       	brne	.-20     	; 0x1e6c <i2c_slave_write_byte+0x26>
	return;
}
    1e80:	0f 90       	pop	r0
    1e82:	cf 91       	pop	r28
    1e84:	df 91       	pop	r29
    1e86:	08 95       	ret

00001e88 <LCD_init>:

u8 LCD_PIN_ARRAY[8]={LCD_PIN0,LCD_PIN1,LCD_PIN2,LCD_PIN3,LCD_PIN4,LCD_PIN5,LCD_PIN6,LCD_PIN7};
u8 LCD_PIN_PORT_ARRAY[8]={LCD_PIN0_PORT,LCD_PIN1_PORT,LCD_PIN2_PORT,LCD_PIN3_PORT,LCD_PIN4_PORT,LCD_PIN5_PORT,LCD_PIN6_PORT,LCD_PIN7_PORT};

void LCD_init(void)// initialization
{
    1e88:	df 93       	push	r29
    1e8a:	cf 93       	push	r28
    1e8c:	cd b7       	in	r28, 0x3d	; 61
    1e8e:	de b7       	in	r29, 0x3e	; 62
    1e90:	ea 97       	sbiw	r28, 0x3a	; 58
    1e92:	0f b6       	in	r0, 0x3f	; 63
    1e94:	f8 94       	cli
    1e96:	de bf       	out	0x3e, r29	; 62
    1e98:	0f be       	out	0x3f, r0	; 63
    1e9a:	cd bf       	out	0x3d, r28	; 61
//	LCD_voidWriteCmnd(0b00000110);
//	Write_cmd(0b00000110);
#elif LCD_INIT_MODE == LCD_8_BIT_MODE_TEST
	/* LCD 8-bit Mode */
//	DIO_u8SetPortDir(LCD_PORT,0b11111111);//LCD output
	for(i=0;i<=7;i++)
    1e9c:	1a ae       	std	Y+58, r1	; 0x3a
    1e9e:	29 c0       	rjmp	.+82     	; 0x1ef2 <LCD_init+0x6a>
	{
		for(j=0;j<=7;j++)
    1ea0:	19 ae       	std	Y+57, r1	; 0x39
    1ea2:	21 c0       	rjmp	.+66     	; 0x1ee6 <LCD_init+0x5e>
		{
			if(LCD_PIN_ARRAY[i]==j)
    1ea4:	8a ad       	ldd	r24, Y+58	; 0x3a
    1ea6:	88 2f       	mov	r24, r24
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	fc 01       	movw	r30, r24
    1eac:	e4 5f       	subi	r30, 0xF4	; 244
    1eae:	fa 4f       	sbci	r31, 0xFA	; 250
    1eb0:	90 81       	ld	r25, Z
    1eb2:	89 ad       	ldd	r24, Y+57	; 0x39
    1eb4:	98 17       	cp	r25, r24
    1eb6:	a1 f4       	brne	.+40     	; 0x1ee0 <LCD_init+0x58>
			{
				DIO_u8SetPinDir(LCD_PIN_PORT_ARRAY[i],LCD_PIN_ARRAY[i],DIO_OUTPUT);
    1eb8:	8a ad       	ldd	r24, Y+58	; 0x3a
    1eba:	88 2f       	mov	r24, r24
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	fc 01       	movw	r30, r24
    1ec0:	ec 5e       	subi	r30, 0xEC	; 236
    1ec2:	fa 4f       	sbci	r31, 0xFA	; 250
    1ec4:	20 81       	ld	r18, Z
    1ec6:	8a ad       	ldd	r24, Y+58	; 0x3a
    1ec8:	88 2f       	mov	r24, r24
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	fc 01       	movw	r30, r24
    1ece:	e4 5f       	subi	r30, 0xF4	; 244
    1ed0:	fa 4f       	sbci	r31, 0xFA	; 250
    1ed2:	90 81       	ld	r25, Z
    1ed4:	82 2f       	mov	r24, r18
    1ed6:	69 2f       	mov	r22, r25
    1ed8:	41 e0       	ldi	r20, 0x01	; 1
    1eda:	0e 94 9f 09 	call	0x133e	; 0x133e <DIO_u8SetPinDir>
    1ede:	06 c0       	rjmp	.+12     	; 0x1eec <LCD_init+0x64>
#elif LCD_INIT_MODE == LCD_8_BIT_MODE_TEST
	/* LCD 8-bit Mode */
//	DIO_u8SetPortDir(LCD_PORT,0b11111111);//LCD output
	for(i=0;i<=7;i++)
	{
		for(j=0;j<=7;j++)
    1ee0:	89 ad       	ldd	r24, Y+57	; 0x39
    1ee2:	8f 5f       	subi	r24, 0xFF	; 255
    1ee4:	89 af       	std	Y+57, r24	; 0x39
    1ee6:	89 ad       	ldd	r24, Y+57	; 0x39
    1ee8:	88 30       	cpi	r24, 0x08	; 8
    1eea:	e0 f2       	brcs	.-72     	; 0x1ea4 <LCD_init+0x1c>
//	LCD_voidWriteCmnd(0b00000110);
//	Write_cmd(0b00000110);
#elif LCD_INIT_MODE == LCD_8_BIT_MODE_TEST
	/* LCD 8-bit Mode */
//	DIO_u8SetPortDir(LCD_PORT,0b11111111);//LCD output
	for(i=0;i<=7;i++)
    1eec:	8a ad       	ldd	r24, Y+58	; 0x3a
    1eee:	8f 5f       	subi	r24, 0xFF	; 255
    1ef0:	8a af       	std	Y+58, r24	; 0x3a
    1ef2:	8a ad       	ldd	r24, Y+58	; 0x3a
    1ef4:	88 30       	cpi	r24, 0x08	; 8
    1ef6:	a0 f2       	brcs	.-88     	; 0x1ea0 <LCD_init+0x18>
				break;
			}
		}
	}
//	DIO_u8SetPortDir(LCD_CTRL_PORT,LCD_CTRL_PIN);//RS-R/W-EN (Control)
	DIO_u8SetPinDir(LCD_RS_PORT,LCD_RS,DIO_HIGH);
    1ef8:	80 e0       	ldi	r24, 0x00	; 0
    1efa:	67 e0       	ldi	r22, 0x07	; 7
    1efc:	41 e0       	ldi	r20, 0x01	; 1
    1efe:	0e 94 9f 09 	call	0x133e	; 0x133e <DIO_u8SetPinDir>
	DIO_u8SetPinDir(LCD_RW_PORT,LCD_RW,DIO_HIGH);
    1f02:	80 e0       	ldi	r24, 0x00	; 0
    1f04:	66 e0       	ldi	r22, 0x06	; 6
    1f06:	41 e0       	ldi	r20, 0x01	; 1
    1f08:	0e 94 9f 09 	call	0x133e	; 0x133e <DIO_u8SetPinDir>
	DIO_u8SetPinDir(LCD_Enable_PORT,LCD_Enable,DIO_HIGH);
    1f0c:	80 e0       	ldi	r24, 0x00	; 0
    1f0e:	65 e0       	ldi	r22, 0x05	; 5
    1f10:	41 e0       	ldi	r20, 0x01	; 1
    1f12:	0e 94 9f 09 	call	0x133e	; 0x133e <DIO_u8SetPinDir>
    1f16:	80 e0       	ldi	r24, 0x00	; 0
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	a0 ef       	ldi	r26, 0xF0	; 240
    1f1c:	b1 e4       	ldi	r27, 0x41	; 65
    1f1e:	8d ab       	std	Y+53, r24	; 0x35
    1f20:	9e ab       	std	Y+54, r25	; 0x36
    1f22:	af ab       	std	Y+55, r26	; 0x37
    1f24:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f26:	6d a9       	ldd	r22, Y+53	; 0x35
    1f28:	7e a9       	ldd	r23, Y+54	; 0x36
    1f2a:	8f a9       	ldd	r24, Y+55	; 0x37
    1f2c:	98 ad       	ldd	r25, Y+56	; 0x38
    1f2e:	20 e0       	ldi	r18, 0x00	; 0
    1f30:	30 e0       	ldi	r19, 0x00	; 0
    1f32:	4a ef       	ldi	r20, 0xFA	; 250
    1f34:	54 e4       	ldi	r21, 0x44	; 68
    1f36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f3a:	dc 01       	movw	r26, r24
    1f3c:	cb 01       	movw	r24, r22
    1f3e:	89 ab       	std	Y+49, r24	; 0x31
    1f40:	9a ab       	std	Y+50, r25	; 0x32
    1f42:	ab ab       	std	Y+51, r26	; 0x33
    1f44:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f46:	69 a9       	ldd	r22, Y+49	; 0x31
    1f48:	7a a9       	ldd	r23, Y+50	; 0x32
    1f4a:	8b a9       	ldd	r24, Y+51	; 0x33
    1f4c:	9c a9       	ldd	r25, Y+52	; 0x34
    1f4e:	20 e0       	ldi	r18, 0x00	; 0
    1f50:	30 e0       	ldi	r19, 0x00	; 0
    1f52:	40 e8       	ldi	r20, 0x80	; 128
    1f54:	5f e3       	ldi	r21, 0x3F	; 63
    1f56:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f5a:	88 23       	and	r24, r24
    1f5c:	2c f4       	brge	.+10     	; 0x1f68 <LCD_init+0xe0>
		__ticks = 1;
    1f5e:	81 e0       	ldi	r24, 0x01	; 1
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	98 ab       	std	Y+48, r25	; 0x30
    1f64:	8f a7       	std	Y+47, r24	; 0x2f
    1f66:	3f c0       	rjmp	.+126    	; 0x1fe6 <LCD_init+0x15e>
	else if (__tmp > 65535)
    1f68:	69 a9       	ldd	r22, Y+49	; 0x31
    1f6a:	7a a9       	ldd	r23, Y+50	; 0x32
    1f6c:	8b a9       	ldd	r24, Y+51	; 0x33
    1f6e:	9c a9       	ldd	r25, Y+52	; 0x34
    1f70:	20 e0       	ldi	r18, 0x00	; 0
    1f72:	3f ef       	ldi	r19, 0xFF	; 255
    1f74:	4f e7       	ldi	r20, 0x7F	; 127
    1f76:	57 e4       	ldi	r21, 0x47	; 71
    1f78:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f7c:	18 16       	cp	r1, r24
    1f7e:	4c f5       	brge	.+82     	; 0x1fd2 <LCD_init+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f80:	6d a9       	ldd	r22, Y+53	; 0x35
    1f82:	7e a9       	ldd	r23, Y+54	; 0x36
    1f84:	8f a9       	ldd	r24, Y+55	; 0x37
    1f86:	98 ad       	ldd	r25, Y+56	; 0x38
    1f88:	20 e0       	ldi	r18, 0x00	; 0
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	40 e2       	ldi	r20, 0x20	; 32
    1f8e:	51 e4       	ldi	r21, 0x41	; 65
    1f90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f94:	dc 01       	movw	r26, r24
    1f96:	cb 01       	movw	r24, r22
    1f98:	bc 01       	movw	r22, r24
    1f9a:	cd 01       	movw	r24, r26
    1f9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa0:	dc 01       	movw	r26, r24
    1fa2:	cb 01       	movw	r24, r22
    1fa4:	98 ab       	std	Y+48, r25	; 0x30
    1fa6:	8f a7       	std	Y+47, r24	; 0x2f
    1fa8:	0f c0       	rjmp	.+30     	; 0x1fc8 <LCD_init+0x140>
    1faa:	88 ec       	ldi	r24, 0xC8	; 200
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	9e a7       	std	Y+46, r25	; 0x2e
    1fb0:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1fb2:	8d a5       	ldd	r24, Y+45	; 0x2d
    1fb4:	9e a5       	ldd	r25, Y+46	; 0x2e
    1fb6:	01 97       	sbiw	r24, 0x01	; 1
    1fb8:	f1 f7       	brne	.-4      	; 0x1fb6 <LCD_init+0x12e>
    1fba:	9e a7       	std	Y+46, r25	; 0x2e
    1fbc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fbe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fc0:	98 a9       	ldd	r25, Y+48	; 0x30
    1fc2:	01 97       	sbiw	r24, 0x01	; 1
    1fc4:	98 ab       	std	Y+48, r25	; 0x30
    1fc6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fc8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fca:	98 a9       	ldd	r25, Y+48	; 0x30
    1fcc:	00 97       	sbiw	r24, 0x00	; 0
    1fce:	69 f7       	brne	.-38     	; 0x1faa <LCD_init+0x122>
    1fd0:	14 c0       	rjmp	.+40     	; 0x1ffa <LCD_init+0x172>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fd2:	69 a9       	ldd	r22, Y+49	; 0x31
    1fd4:	7a a9       	ldd	r23, Y+50	; 0x32
    1fd6:	8b a9       	ldd	r24, Y+51	; 0x33
    1fd8:	9c a9       	ldd	r25, Y+52	; 0x34
    1fda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fde:	dc 01       	movw	r26, r24
    1fe0:	cb 01       	movw	r24, r22
    1fe2:	98 ab       	std	Y+48, r25	; 0x30
    1fe4:	8f a7       	std	Y+47, r24	; 0x2f
    1fe6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fe8:	98 a9       	ldd	r25, Y+48	; 0x30
    1fea:	9c a7       	std	Y+44, r25	; 0x2c
    1fec:	8b a7       	std	Y+43, r24	; 0x2b
    1fee:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ff0:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ff2:	01 97       	sbiw	r24, 0x01	; 1
    1ff4:	f1 f7       	brne	.-4      	; 0x1ff2 <LCD_init+0x16a>
    1ff6:	9c a7       	std	Y+44, r25	; 0x2c
    1ff8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(30);
 	Write_cmd(0b00111100);
    1ffa:	8c e3       	ldi	r24, 0x3C	; 60
    1ffc:	0e 94 65 11 	call	0x22ca	; 0x22ca <Write_cmd>
    2000:	80 e0       	ldi	r24, 0x00	; 0
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	a0 e8       	ldi	r26, 0x80	; 128
    2006:	bf e3       	ldi	r27, 0x3F	; 63
    2008:	8f a3       	std	Y+39, r24	; 0x27
    200a:	98 a7       	std	Y+40, r25	; 0x28
    200c:	a9 a7       	std	Y+41, r26	; 0x29
    200e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2010:	6f a1       	ldd	r22, Y+39	; 0x27
    2012:	78 a5       	ldd	r23, Y+40	; 0x28
    2014:	89 a5       	ldd	r24, Y+41	; 0x29
    2016:	9a a5       	ldd	r25, Y+42	; 0x2a
    2018:	20 e0       	ldi	r18, 0x00	; 0
    201a:	30 e0       	ldi	r19, 0x00	; 0
    201c:	4a ef       	ldi	r20, 0xFA	; 250
    201e:	54 e4       	ldi	r21, 0x44	; 68
    2020:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2024:	dc 01       	movw	r26, r24
    2026:	cb 01       	movw	r24, r22
    2028:	8b a3       	std	Y+35, r24	; 0x23
    202a:	9c a3       	std	Y+36, r25	; 0x24
    202c:	ad a3       	std	Y+37, r26	; 0x25
    202e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2030:	6b a1       	ldd	r22, Y+35	; 0x23
    2032:	7c a1       	ldd	r23, Y+36	; 0x24
    2034:	8d a1       	ldd	r24, Y+37	; 0x25
    2036:	9e a1       	ldd	r25, Y+38	; 0x26
    2038:	20 e0       	ldi	r18, 0x00	; 0
    203a:	30 e0       	ldi	r19, 0x00	; 0
    203c:	40 e8       	ldi	r20, 0x80	; 128
    203e:	5f e3       	ldi	r21, 0x3F	; 63
    2040:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2044:	88 23       	and	r24, r24
    2046:	2c f4       	brge	.+10     	; 0x2052 <LCD_init+0x1ca>
		__ticks = 1;
    2048:	81 e0       	ldi	r24, 0x01	; 1
    204a:	90 e0       	ldi	r25, 0x00	; 0
    204c:	9a a3       	std	Y+34, r25	; 0x22
    204e:	89 a3       	std	Y+33, r24	; 0x21
    2050:	3f c0       	rjmp	.+126    	; 0x20d0 <LCD_init+0x248>
	else if (__tmp > 65535)
    2052:	6b a1       	ldd	r22, Y+35	; 0x23
    2054:	7c a1       	ldd	r23, Y+36	; 0x24
    2056:	8d a1       	ldd	r24, Y+37	; 0x25
    2058:	9e a1       	ldd	r25, Y+38	; 0x26
    205a:	20 e0       	ldi	r18, 0x00	; 0
    205c:	3f ef       	ldi	r19, 0xFF	; 255
    205e:	4f e7       	ldi	r20, 0x7F	; 127
    2060:	57 e4       	ldi	r21, 0x47	; 71
    2062:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2066:	18 16       	cp	r1, r24
    2068:	4c f5       	brge	.+82     	; 0x20bc <LCD_init+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    206a:	6f a1       	ldd	r22, Y+39	; 0x27
    206c:	78 a5       	ldd	r23, Y+40	; 0x28
    206e:	89 a5       	ldd	r24, Y+41	; 0x29
    2070:	9a a5       	ldd	r25, Y+42	; 0x2a
    2072:	20 e0       	ldi	r18, 0x00	; 0
    2074:	30 e0       	ldi	r19, 0x00	; 0
    2076:	40 e2       	ldi	r20, 0x20	; 32
    2078:	51 e4       	ldi	r21, 0x41	; 65
    207a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    207e:	dc 01       	movw	r26, r24
    2080:	cb 01       	movw	r24, r22
    2082:	bc 01       	movw	r22, r24
    2084:	cd 01       	movw	r24, r26
    2086:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    208a:	dc 01       	movw	r26, r24
    208c:	cb 01       	movw	r24, r22
    208e:	9a a3       	std	Y+34, r25	; 0x22
    2090:	89 a3       	std	Y+33, r24	; 0x21
    2092:	0f c0       	rjmp	.+30     	; 0x20b2 <LCD_init+0x22a>
    2094:	88 ec       	ldi	r24, 0xC8	; 200
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	98 a3       	std	Y+32, r25	; 0x20
    209a:	8f 8f       	std	Y+31, r24	; 0x1f
    209c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    209e:	98 a1       	ldd	r25, Y+32	; 0x20
    20a0:	01 97       	sbiw	r24, 0x01	; 1
    20a2:	f1 f7       	brne	.-4      	; 0x20a0 <LCD_init+0x218>
    20a4:	98 a3       	std	Y+32, r25	; 0x20
    20a6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20a8:	89 a1       	ldd	r24, Y+33	; 0x21
    20aa:	9a a1       	ldd	r25, Y+34	; 0x22
    20ac:	01 97       	sbiw	r24, 0x01	; 1
    20ae:	9a a3       	std	Y+34, r25	; 0x22
    20b0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20b2:	89 a1       	ldd	r24, Y+33	; 0x21
    20b4:	9a a1       	ldd	r25, Y+34	; 0x22
    20b6:	00 97       	sbiw	r24, 0x00	; 0
    20b8:	69 f7       	brne	.-38     	; 0x2094 <LCD_init+0x20c>
    20ba:	14 c0       	rjmp	.+40     	; 0x20e4 <LCD_init+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20bc:	6b a1       	ldd	r22, Y+35	; 0x23
    20be:	7c a1       	ldd	r23, Y+36	; 0x24
    20c0:	8d a1       	ldd	r24, Y+37	; 0x25
    20c2:	9e a1       	ldd	r25, Y+38	; 0x26
    20c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20c8:	dc 01       	movw	r26, r24
    20ca:	cb 01       	movw	r24, r22
    20cc:	9a a3       	std	Y+34, r25	; 0x22
    20ce:	89 a3       	std	Y+33, r24	; 0x21
    20d0:	89 a1       	ldd	r24, Y+33	; 0x21
    20d2:	9a a1       	ldd	r25, Y+34	; 0x22
    20d4:	9e 8f       	std	Y+30, r25	; 0x1e
    20d6:	8d 8f       	std	Y+29, r24	; 0x1d
    20d8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20da:	9e 8d       	ldd	r25, Y+30	; 0x1e
    20dc:	01 97       	sbiw	r24, 0x01	; 1
    20de:	f1 f7       	brne	.-4      	; 0x20dc <LCD_init+0x254>
    20e0:	9e 8f       	std	Y+30, r25	; 0x1e
    20e2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	Write_cmd(0b00001111);
    20e4:	8f e0       	ldi	r24, 0x0F	; 15
    20e6:	0e 94 65 11 	call	0x22ca	; 0x22ca <Write_cmd>
    20ea:	80 e0       	ldi	r24, 0x00	; 0
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	a0 e8       	ldi	r26, 0x80	; 128
    20f0:	bf e3       	ldi	r27, 0x3F	; 63
    20f2:	89 8f       	std	Y+25, r24	; 0x19
    20f4:	9a 8f       	std	Y+26, r25	; 0x1a
    20f6:	ab 8f       	std	Y+27, r26	; 0x1b
    20f8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20fa:	69 8d       	ldd	r22, Y+25	; 0x19
    20fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2100:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2102:	20 e0       	ldi	r18, 0x00	; 0
    2104:	30 e0       	ldi	r19, 0x00	; 0
    2106:	4a ef       	ldi	r20, 0xFA	; 250
    2108:	54 e4       	ldi	r21, 0x44	; 68
    210a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    210e:	dc 01       	movw	r26, r24
    2110:	cb 01       	movw	r24, r22
    2112:	8d 8b       	std	Y+21, r24	; 0x15
    2114:	9e 8b       	std	Y+22, r25	; 0x16
    2116:	af 8b       	std	Y+23, r26	; 0x17
    2118:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    211a:	6d 89       	ldd	r22, Y+21	; 0x15
    211c:	7e 89       	ldd	r23, Y+22	; 0x16
    211e:	8f 89       	ldd	r24, Y+23	; 0x17
    2120:	98 8d       	ldd	r25, Y+24	; 0x18
    2122:	20 e0       	ldi	r18, 0x00	; 0
    2124:	30 e0       	ldi	r19, 0x00	; 0
    2126:	40 e8       	ldi	r20, 0x80	; 128
    2128:	5f e3       	ldi	r21, 0x3F	; 63
    212a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    212e:	88 23       	and	r24, r24
    2130:	2c f4       	brge	.+10     	; 0x213c <LCD_init+0x2b4>
		__ticks = 1;
    2132:	81 e0       	ldi	r24, 0x01	; 1
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	9c 8b       	std	Y+20, r25	; 0x14
    2138:	8b 8b       	std	Y+19, r24	; 0x13
    213a:	3f c0       	rjmp	.+126    	; 0x21ba <LCD_init+0x332>
	else if (__tmp > 65535)
    213c:	6d 89       	ldd	r22, Y+21	; 0x15
    213e:	7e 89       	ldd	r23, Y+22	; 0x16
    2140:	8f 89       	ldd	r24, Y+23	; 0x17
    2142:	98 8d       	ldd	r25, Y+24	; 0x18
    2144:	20 e0       	ldi	r18, 0x00	; 0
    2146:	3f ef       	ldi	r19, 0xFF	; 255
    2148:	4f e7       	ldi	r20, 0x7F	; 127
    214a:	57 e4       	ldi	r21, 0x47	; 71
    214c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2150:	18 16       	cp	r1, r24
    2152:	4c f5       	brge	.+82     	; 0x21a6 <LCD_init+0x31e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2154:	69 8d       	ldd	r22, Y+25	; 0x19
    2156:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2158:	8b 8d       	ldd	r24, Y+27	; 0x1b
    215a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    215c:	20 e0       	ldi	r18, 0x00	; 0
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	40 e2       	ldi	r20, 0x20	; 32
    2162:	51 e4       	ldi	r21, 0x41	; 65
    2164:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2168:	dc 01       	movw	r26, r24
    216a:	cb 01       	movw	r24, r22
    216c:	bc 01       	movw	r22, r24
    216e:	cd 01       	movw	r24, r26
    2170:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2174:	dc 01       	movw	r26, r24
    2176:	cb 01       	movw	r24, r22
    2178:	9c 8b       	std	Y+20, r25	; 0x14
    217a:	8b 8b       	std	Y+19, r24	; 0x13
    217c:	0f c0       	rjmp	.+30     	; 0x219c <LCD_init+0x314>
    217e:	88 ec       	ldi	r24, 0xC8	; 200
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	9a 8b       	std	Y+18, r25	; 0x12
    2184:	89 8b       	std	Y+17, r24	; 0x11
    2186:	89 89       	ldd	r24, Y+17	; 0x11
    2188:	9a 89       	ldd	r25, Y+18	; 0x12
    218a:	01 97       	sbiw	r24, 0x01	; 1
    218c:	f1 f7       	brne	.-4      	; 0x218a <LCD_init+0x302>
    218e:	9a 8b       	std	Y+18, r25	; 0x12
    2190:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2192:	8b 89       	ldd	r24, Y+19	; 0x13
    2194:	9c 89       	ldd	r25, Y+20	; 0x14
    2196:	01 97       	sbiw	r24, 0x01	; 1
    2198:	9c 8b       	std	Y+20, r25	; 0x14
    219a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    219c:	8b 89       	ldd	r24, Y+19	; 0x13
    219e:	9c 89       	ldd	r25, Y+20	; 0x14
    21a0:	00 97       	sbiw	r24, 0x00	; 0
    21a2:	69 f7       	brne	.-38     	; 0x217e <LCD_init+0x2f6>
    21a4:	14 c0       	rjmp	.+40     	; 0x21ce <LCD_init+0x346>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21a6:	6d 89       	ldd	r22, Y+21	; 0x15
    21a8:	7e 89       	ldd	r23, Y+22	; 0x16
    21aa:	8f 89       	ldd	r24, Y+23	; 0x17
    21ac:	98 8d       	ldd	r25, Y+24	; 0x18
    21ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b2:	dc 01       	movw	r26, r24
    21b4:	cb 01       	movw	r24, r22
    21b6:	9c 8b       	std	Y+20, r25	; 0x14
    21b8:	8b 8b       	std	Y+19, r24	; 0x13
    21ba:	8b 89       	ldd	r24, Y+19	; 0x13
    21bc:	9c 89       	ldd	r25, Y+20	; 0x14
    21be:	98 8b       	std	Y+16, r25	; 0x10
    21c0:	8f 87       	std	Y+15, r24	; 0x0f
    21c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    21c4:	98 89       	ldd	r25, Y+16	; 0x10
    21c6:	01 97       	sbiw	r24, 0x01	; 1
    21c8:	f1 f7       	brne	.-4      	; 0x21c6 <LCD_init+0x33e>
    21ca:	98 8b       	std	Y+16, r25	; 0x10
    21cc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	Write_cmd(0b00000001);
    21ce:	81 e0       	ldi	r24, 0x01	; 1
    21d0:	0e 94 65 11 	call	0x22ca	; 0x22ca <Write_cmd>
    21d4:	80 e0       	ldi	r24, 0x00	; 0
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	a0 e0       	ldi	r26, 0x00	; 0
    21da:	b0 e4       	ldi	r27, 0x40	; 64
    21dc:	8b 87       	std	Y+11, r24	; 0x0b
    21de:	9c 87       	std	Y+12, r25	; 0x0c
    21e0:	ad 87       	std	Y+13, r26	; 0x0d
    21e2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    21e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    21e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    21ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    21ec:	20 e0       	ldi	r18, 0x00	; 0
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	4a ef       	ldi	r20, 0xFA	; 250
    21f2:	54 e4       	ldi	r21, 0x44	; 68
    21f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21f8:	dc 01       	movw	r26, r24
    21fa:	cb 01       	movw	r24, r22
    21fc:	8f 83       	std	Y+7, r24	; 0x07
    21fe:	98 87       	std	Y+8, r25	; 0x08
    2200:	a9 87       	std	Y+9, r26	; 0x09
    2202:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2204:	6f 81       	ldd	r22, Y+7	; 0x07
    2206:	78 85       	ldd	r23, Y+8	; 0x08
    2208:	89 85       	ldd	r24, Y+9	; 0x09
    220a:	9a 85       	ldd	r25, Y+10	; 0x0a
    220c:	20 e0       	ldi	r18, 0x00	; 0
    220e:	30 e0       	ldi	r19, 0x00	; 0
    2210:	40 e8       	ldi	r20, 0x80	; 128
    2212:	5f e3       	ldi	r21, 0x3F	; 63
    2214:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2218:	88 23       	and	r24, r24
    221a:	2c f4       	brge	.+10     	; 0x2226 <LCD_init+0x39e>
		__ticks = 1;
    221c:	81 e0       	ldi	r24, 0x01	; 1
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	9e 83       	std	Y+6, r25	; 0x06
    2222:	8d 83       	std	Y+5, r24	; 0x05
    2224:	3f c0       	rjmp	.+126    	; 0x22a4 <LCD_init+0x41c>
	else if (__tmp > 65535)
    2226:	6f 81       	ldd	r22, Y+7	; 0x07
    2228:	78 85       	ldd	r23, Y+8	; 0x08
    222a:	89 85       	ldd	r24, Y+9	; 0x09
    222c:	9a 85       	ldd	r25, Y+10	; 0x0a
    222e:	20 e0       	ldi	r18, 0x00	; 0
    2230:	3f ef       	ldi	r19, 0xFF	; 255
    2232:	4f e7       	ldi	r20, 0x7F	; 127
    2234:	57 e4       	ldi	r21, 0x47	; 71
    2236:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    223a:	18 16       	cp	r1, r24
    223c:	4c f5       	brge	.+82     	; 0x2290 <LCD_init+0x408>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    223e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2240:	7c 85       	ldd	r23, Y+12	; 0x0c
    2242:	8d 85       	ldd	r24, Y+13	; 0x0d
    2244:	9e 85       	ldd	r25, Y+14	; 0x0e
    2246:	20 e0       	ldi	r18, 0x00	; 0
    2248:	30 e0       	ldi	r19, 0x00	; 0
    224a:	40 e2       	ldi	r20, 0x20	; 32
    224c:	51 e4       	ldi	r21, 0x41	; 65
    224e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2252:	dc 01       	movw	r26, r24
    2254:	cb 01       	movw	r24, r22
    2256:	bc 01       	movw	r22, r24
    2258:	cd 01       	movw	r24, r26
    225a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    225e:	dc 01       	movw	r26, r24
    2260:	cb 01       	movw	r24, r22
    2262:	9e 83       	std	Y+6, r25	; 0x06
    2264:	8d 83       	std	Y+5, r24	; 0x05
    2266:	0f c0       	rjmp	.+30     	; 0x2286 <LCD_init+0x3fe>
    2268:	88 ec       	ldi	r24, 0xC8	; 200
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	9c 83       	std	Y+4, r25	; 0x04
    226e:	8b 83       	std	Y+3, r24	; 0x03
    2270:	8b 81       	ldd	r24, Y+3	; 0x03
    2272:	9c 81       	ldd	r25, Y+4	; 0x04
    2274:	01 97       	sbiw	r24, 0x01	; 1
    2276:	f1 f7       	brne	.-4      	; 0x2274 <LCD_init+0x3ec>
    2278:	9c 83       	std	Y+4, r25	; 0x04
    227a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    227c:	8d 81       	ldd	r24, Y+5	; 0x05
    227e:	9e 81       	ldd	r25, Y+6	; 0x06
    2280:	01 97       	sbiw	r24, 0x01	; 1
    2282:	9e 83       	std	Y+6, r25	; 0x06
    2284:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2286:	8d 81       	ldd	r24, Y+5	; 0x05
    2288:	9e 81       	ldd	r25, Y+6	; 0x06
    228a:	00 97       	sbiw	r24, 0x00	; 0
    228c:	69 f7       	brne	.-38     	; 0x2268 <LCD_init+0x3e0>
    228e:	14 c0       	rjmp	.+40     	; 0x22b8 <LCD_init+0x430>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2290:	6f 81       	ldd	r22, Y+7	; 0x07
    2292:	78 85       	ldd	r23, Y+8	; 0x08
    2294:	89 85       	ldd	r24, Y+9	; 0x09
    2296:	9a 85       	ldd	r25, Y+10	; 0x0a
    2298:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    229c:	dc 01       	movw	r26, r24
    229e:	cb 01       	movw	r24, r22
    22a0:	9e 83       	std	Y+6, r25	; 0x06
    22a2:	8d 83       	std	Y+5, r24	; 0x05
    22a4:	8d 81       	ldd	r24, Y+5	; 0x05
    22a6:	9e 81       	ldd	r25, Y+6	; 0x06
    22a8:	9a 83       	std	Y+2, r25	; 0x02
    22aa:	89 83       	std	Y+1, r24	; 0x01
    22ac:	89 81       	ldd	r24, Y+1	; 0x01
    22ae:	9a 81       	ldd	r25, Y+2	; 0x02
    22b0:	01 97       	sbiw	r24, 0x01	; 1
    22b2:	f1 f7       	brne	.-4      	; 0x22b0 <LCD_init+0x428>
    22b4:	9a 83       	std	Y+2, r25	; 0x02
    22b6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
#endif
}
    22b8:	ea 96       	adiw	r28, 0x3a	; 58
    22ba:	0f b6       	in	r0, 0x3f	; 63
    22bc:	f8 94       	cli
    22be:	de bf       	out	0x3e, r29	; 62
    22c0:	0f be       	out	0x3f, r0	; 63
    22c2:	cd bf       	out	0x3d, r28	; 61
    22c4:	cf 91       	pop	r28
    22c6:	df 91       	pop	r29
    22c8:	08 95       	ret

000022ca <Write_cmd>:

void Write_cmd(u8 CMD)
{
    22ca:	df 93       	push	r29
    22cc:	cf 93       	push	r28
    22ce:	cd b7       	in	r28, 0x3d	; 61
    22d0:	de b7       	in	r29, 0x3e	; 62
    22d2:	61 97       	sbiw	r28, 0x11	; 17
    22d4:	0f b6       	in	r0, 0x3f	; 63
    22d6:	f8 94       	cli
    22d8:	de bf       	out	0x3e, r29	; 62
    22da:	0f be       	out	0x3f, r0	; 63
    22dc:	cd bf       	out	0x3d, r28	; 61
    22de:	89 8b       	std	Y+17, r24	; 0x11
	_delay_us(1);
//	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
	DIO_u8SetPinVal(LCD_CTRL_PORT,LCD_Enable,DIO_LOW);
	_delay_ms(2);
#elif LCD_INIT_MODE == LCD_8_BIT_MODE_TEST
	DIO_u8SetPinVal(LCD_RS_PORT,LCD_RS,DIO_LOW);//RS
    22e0:	80 e0       	ldi	r24, 0x00	; 0
    22e2:	67 e0       	ldi	r22, 0x07	; 7
    22e4:	40 e0       	ldi	r20, 0x00	; 0
    22e6:	0e 94 c2 0a 	call	0x1584	; 0x1584 <DIO_u8SetPinVal>
	DIO_u8SetPinVal(LCD_RW_PORT,LCD_RW,DIO_LOW);//R-W
    22ea:	80 e0       	ldi	r24, 0x00	; 0
    22ec:	66 e0       	ldi	r22, 0x06	; 6
    22ee:	40 e0       	ldi	r20, 0x00	; 0
    22f0:	0e 94 c2 0a 	call	0x1584	; 0x1584 <DIO_u8SetPinVal>
//	DIO_u8SetPortVal(LCD_PORT,CMD);
	for(i=0;i<=7;i++)
    22f4:	18 8a       	std	Y+16, r1	; 0x10
    22f6:	38 c0       	rjmp	.+112    	; 0x2368 <Write_cmd+0x9e>
	{
		for(j=0;j<=7;j++)
    22f8:	1f 86       	std	Y+15, r1	; 0x0f
    22fa:	30 c0       	rjmp	.+96     	; 0x235c <Write_cmd+0x92>
		{
			if(LCD_PIN_ARRAY[i]==j)
    22fc:	88 89       	ldd	r24, Y+16	; 0x10
    22fe:	88 2f       	mov	r24, r24
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	fc 01       	movw	r30, r24
    2304:	e4 5f       	subi	r30, 0xF4	; 244
    2306:	fa 4f       	sbci	r31, 0xFA	; 250
    2308:	90 81       	ld	r25, Z
    230a:	8f 85       	ldd	r24, Y+15	; 0x0f
    230c:	98 17       	cp	r25, r24
    230e:	19 f5       	brne	.+70     	; 0x2356 <Write_cmd+0x8c>
			{
				DIO_u8SetPinVal(LCD_PIN_PORT_ARRAY[i],LCD_PIN_ARRAY[i],get_bit(CMD,i));
    2310:	88 89       	ldd	r24, Y+16	; 0x10
    2312:	88 2f       	mov	r24, r24
    2314:	90 e0       	ldi	r25, 0x00	; 0
    2316:	fc 01       	movw	r30, r24
    2318:	ec 5e       	subi	r30, 0xEC	; 236
    231a:	fa 4f       	sbci	r31, 0xFA	; 250
    231c:	50 81       	ld	r21, Z
    231e:	88 89       	ldd	r24, Y+16	; 0x10
    2320:	88 2f       	mov	r24, r24
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	fc 01       	movw	r30, r24
    2326:	e4 5f       	subi	r30, 0xF4	; 244
    2328:	fa 4f       	sbci	r31, 0xFA	; 250
    232a:	40 81       	ld	r20, Z
    232c:	89 89       	ldd	r24, Y+17	; 0x11
    232e:	28 2f       	mov	r18, r24
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	88 89       	ldd	r24, Y+16	; 0x10
    2334:	88 2f       	mov	r24, r24
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	b9 01       	movw	r22, r18
    233a:	02 c0       	rjmp	.+4      	; 0x2340 <Write_cmd+0x76>
    233c:	75 95       	asr	r23
    233e:	67 95       	ror	r22
    2340:	8a 95       	dec	r24
    2342:	e2 f7       	brpl	.-8      	; 0x233c <Write_cmd+0x72>
    2344:	cb 01       	movw	r24, r22
    2346:	98 2f       	mov	r25, r24
    2348:	91 70       	andi	r25, 0x01	; 1
    234a:	85 2f       	mov	r24, r21
    234c:	64 2f       	mov	r22, r20
    234e:	49 2f       	mov	r20, r25
    2350:	0e 94 c2 0a 	call	0x1584	; 0x1584 <DIO_u8SetPinVal>
    2354:	06 c0       	rjmp	.+12     	; 0x2362 <Write_cmd+0x98>
	DIO_u8SetPinVal(LCD_RS_PORT,LCD_RS,DIO_LOW);//RS
	DIO_u8SetPinVal(LCD_RW_PORT,LCD_RW,DIO_LOW);//R-W
//	DIO_u8SetPortVal(LCD_PORT,CMD);
	for(i=0;i<=7;i++)
	{
		for(j=0;j<=7;j++)
    2356:	8f 85       	ldd	r24, Y+15	; 0x0f
    2358:	8f 5f       	subi	r24, 0xFF	; 255
    235a:	8f 87       	std	Y+15, r24	; 0x0f
    235c:	8f 85       	ldd	r24, Y+15	; 0x0f
    235e:	88 30       	cpi	r24, 0x08	; 8
    2360:	68 f2       	brcs	.-102    	; 0x22fc <Write_cmd+0x32>
	_delay_ms(2);
#elif LCD_INIT_MODE == LCD_8_BIT_MODE_TEST
	DIO_u8SetPinVal(LCD_RS_PORT,LCD_RS,DIO_LOW);//RS
	DIO_u8SetPinVal(LCD_RW_PORT,LCD_RW,DIO_LOW);//R-W
//	DIO_u8SetPortVal(LCD_PORT,CMD);
	for(i=0;i<=7;i++)
    2362:	88 89       	ldd	r24, Y+16	; 0x10
    2364:	8f 5f       	subi	r24, 0xFF	; 255
    2366:	88 8b       	std	Y+16, r24	; 0x10
    2368:	88 89       	ldd	r24, Y+16	; 0x10
    236a:	88 30       	cpi	r24, 0x08	; 8
    236c:	28 f2       	brcs	.-118    	; 0x22f8 <Write_cmd+0x2e>
				DIO_u8SetPinVal(LCD_PIN_PORT_ARRAY[i],LCD_PIN_ARRAY[i],get_bit(CMD,i));
				break;
			}
		}
	}
	DIO_u8SetPinVal(LCD_Enable_PORT,LCD_Enable,DIO_HIGH);//enable 1
    236e:	80 e0       	ldi	r24, 0x00	; 0
    2370:	65 e0       	ldi	r22, 0x05	; 5
    2372:	41 e0       	ldi	r20, 0x01	; 1
    2374:	0e 94 c2 0a 	call	0x1584	; 0x1584 <DIO_u8SetPinVal>
    2378:	80 e0       	ldi	r24, 0x00	; 0
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	a0 e0       	ldi	r26, 0x00	; 0
    237e:	b0 e4       	ldi	r27, 0x40	; 64
    2380:	8b 87       	std	Y+11, r24	; 0x0b
    2382:	9c 87       	std	Y+12, r25	; 0x0c
    2384:	ad 87       	std	Y+13, r26	; 0x0d
    2386:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2388:	6b 85       	ldd	r22, Y+11	; 0x0b
    238a:	7c 85       	ldd	r23, Y+12	; 0x0c
    238c:	8d 85       	ldd	r24, Y+13	; 0x0d
    238e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2390:	20 e0       	ldi	r18, 0x00	; 0
    2392:	30 e0       	ldi	r19, 0x00	; 0
    2394:	4a ef       	ldi	r20, 0xFA	; 250
    2396:	54 e4       	ldi	r21, 0x44	; 68
    2398:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    239c:	dc 01       	movw	r26, r24
    239e:	cb 01       	movw	r24, r22
    23a0:	8f 83       	std	Y+7, r24	; 0x07
    23a2:	98 87       	std	Y+8, r25	; 0x08
    23a4:	a9 87       	std	Y+9, r26	; 0x09
    23a6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23a8:	6f 81       	ldd	r22, Y+7	; 0x07
    23aa:	78 85       	ldd	r23, Y+8	; 0x08
    23ac:	89 85       	ldd	r24, Y+9	; 0x09
    23ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    23b0:	20 e0       	ldi	r18, 0x00	; 0
    23b2:	30 e0       	ldi	r19, 0x00	; 0
    23b4:	40 e8       	ldi	r20, 0x80	; 128
    23b6:	5f e3       	ldi	r21, 0x3F	; 63
    23b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23bc:	88 23       	and	r24, r24
    23be:	2c f4       	brge	.+10     	; 0x23ca <Write_cmd+0x100>
		__ticks = 1;
    23c0:	81 e0       	ldi	r24, 0x01	; 1
    23c2:	90 e0       	ldi	r25, 0x00	; 0
    23c4:	9e 83       	std	Y+6, r25	; 0x06
    23c6:	8d 83       	std	Y+5, r24	; 0x05
    23c8:	3f c0       	rjmp	.+126    	; 0x2448 <Write_cmd+0x17e>
	else if (__tmp > 65535)
    23ca:	6f 81       	ldd	r22, Y+7	; 0x07
    23cc:	78 85       	ldd	r23, Y+8	; 0x08
    23ce:	89 85       	ldd	r24, Y+9	; 0x09
    23d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    23d2:	20 e0       	ldi	r18, 0x00	; 0
    23d4:	3f ef       	ldi	r19, 0xFF	; 255
    23d6:	4f e7       	ldi	r20, 0x7F	; 127
    23d8:	57 e4       	ldi	r21, 0x47	; 71
    23da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23de:	18 16       	cp	r1, r24
    23e0:	4c f5       	brge	.+82     	; 0x2434 <Write_cmd+0x16a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    23e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    23e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    23e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    23ea:	20 e0       	ldi	r18, 0x00	; 0
    23ec:	30 e0       	ldi	r19, 0x00	; 0
    23ee:	40 e2       	ldi	r20, 0x20	; 32
    23f0:	51 e4       	ldi	r21, 0x41	; 65
    23f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23f6:	dc 01       	movw	r26, r24
    23f8:	cb 01       	movw	r24, r22
    23fa:	bc 01       	movw	r22, r24
    23fc:	cd 01       	movw	r24, r26
    23fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2402:	dc 01       	movw	r26, r24
    2404:	cb 01       	movw	r24, r22
    2406:	9e 83       	std	Y+6, r25	; 0x06
    2408:	8d 83       	std	Y+5, r24	; 0x05
    240a:	0f c0       	rjmp	.+30     	; 0x242a <Write_cmd+0x160>
    240c:	88 ec       	ldi	r24, 0xC8	; 200
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	9c 83       	std	Y+4, r25	; 0x04
    2412:	8b 83       	std	Y+3, r24	; 0x03
    2414:	8b 81       	ldd	r24, Y+3	; 0x03
    2416:	9c 81       	ldd	r25, Y+4	; 0x04
    2418:	01 97       	sbiw	r24, 0x01	; 1
    241a:	f1 f7       	brne	.-4      	; 0x2418 <Write_cmd+0x14e>
    241c:	9c 83       	std	Y+4, r25	; 0x04
    241e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2420:	8d 81       	ldd	r24, Y+5	; 0x05
    2422:	9e 81       	ldd	r25, Y+6	; 0x06
    2424:	01 97       	sbiw	r24, 0x01	; 1
    2426:	9e 83       	std	Y+6, r25	; 0x06
    2428:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    242a:	8d 81       	ldd	r24, Y+5	; 0x05
    242c:	9e 81       	ldd	r25, Y+6	; 0x06
    242e:	00 97       	sbiw	r24, 0x00	; 0
    2430:	69 f7       	brne	.-38     	; 0x240c <Write_cmd+0x142>
    2432:	14 c0       	rjmp	.+40     	; 0x245c <Write_cmd+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2434:	6f 81       	ldd	r22, Y+7	; 0x07
    2436:	78 85       	ldd	r23, Y+8	; 0x08
    2438:	89 85       	ldd	r24, Y+9	; 0x09
    243a:	9a 85       	ldd	r25, Y+10	; 0x0a
    243c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2440:	dc 01       	movw	r26, r24
    2442:	cb 01       	movw	r24, r22
    2444:	9e 83       	std	Y+6, r25	; 0x06
    2446:	8d 83       	std	Y+5, r24	; 0x05
    2448:	8d 81       	ldd	r24, Y+5	; 0x05
    244a:	9e 81       	ldd	r25, Y+6	; 0x06
    244c:	9a 83       	std	Y+2, r25	; 0x02
    244e:	89 83       	std	Y+1, r24	; 0x01
    2450:	89 81       	ldd	r24, Y+1	; 0x01
    2452:	9a 81       	ldd	r25, Y+2	; 0x02
    2454:	01 97       	sbiw	r24, 0x01	; 1
    2456:	f1 f7       	brne	.-4      	; 0x2454 <Write_cmd+0x18a>
    2458:	9a 83       	std	Y+2, r25	; 0x02
    245a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinVal(LCD_Enable_PORT,LCD_Enable,DIO_LOW);// enable 0
    245c:	80 e0       	ldi	r24, 0x00	; 0
    245e:	65 e0       	ldi	r22, 0x05	; 5
    2460:	40 e0       	ldi	r20, 0x00	; 0
    2462:	0e 94 c2 0a 	call	0x1584	; 0x1584 <DIO_u8SetPinVal>
#endif
}
    2466:	61 96       	adiw	r28, 0x11	; 17
    2468:	0f b6       	in	r0, 0x3f	; 63
    246a:	f8 94       	cli
    246c:	de bf       	out	0x3e, r29	; 62
    246e:	0f be       	out	0x3f, r0	; 63
    2470:	cd bf       	out	0x3d, r28	; 61
    2472:	cf 91       	pop	r28
    2474:	df 91       	pop	r29
    2476:	08 95       	ret

00002478 <Write_data>:

void Write_data(u8 DATA)
{
    2478:	df 93       	push	r29
    247a:	cf 93       	push	r28
    247c:	cd b7       	in	r28, 0x3d	; 61
    247e:	de b7       	in	r29, 0x3e	; 62
    2480:	61 97       	sbiw	r28, 0x11	; 17
    2482:	0f b6       	in	r0, 0x3f	; 63
    2484:	f8 94       	cli
    2486:	de bf       	out	0x3e, r29	; 62
    2488:	0f be       	out	0x3f, r0	; 63
    248a:	cd bf       	out	0x3d, r28	; 61
    248c:	89 8b       	std	Y+17, r24	; 0x11
	_delay_us(1);
//	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
	DIO_u8SetPinVal(LCD_CTRL_PORT,LCD_Enable,DIO_LOW);
	_delay_ms(2);
#elif LCD_INIT_MODE == LCD_8_BIT_MODE_TEST
	DIO_u8SetPinVal(LCD_RS_PORT,LCD_RS,DIO_HIGH);//data register 1
    248e:	80 e0       	ldi	r24, 0x00	; 0
    2490:	67 e0       	ldi	r22, 0x07	; 7
    2492:	41 e0       	ldi	r20, 0x01	; 1
    2494:	0e 94 c2 0a 	call	0x1584	; 0x1584 <DIO_u8SetPinVal>
	DIO_u8SetPinVal(LCD_RW_PORT,LCD_RW,DIO_LOW);//Write 0
    2498:	80 e0       	ldi	r24, 0x00	; 0
    249a:	66 e0       	ldi	r22, 0x06	; 6
    249c:	40 e0       	ldi	r20, 0x00	; 0
    249e:	0e 94 c2 0a 	call	0x1584	; 0x1584 <DIO_u8SetPinVal>
//	DIO_u8SetPortVal(LCD_PORT,DATA);
	for(i=0;i<=7;i++)
    24a2:	18 8a       	std	Y+16, r1	; 0x10
    24a4:	38 c0       	rjmp	.+112    	; 0x2516 <Write_data+0x9e>
	{
		for(j=0;j<=7;j++)
    24a6:	1f 86       	std	Y+15, r1	; 0x0f
    24a8:	30 c0       	rjmp	.+96     	; 0x250a <Write_data+0x92>
		{
			if(LCD_PIN_ARRAY[i]==j)
    24aa:	88 89       	ldd	r24, Y+16	; 0x10
    24ac:	88 2f       	mov	r24, r24
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	fc 01       	movw	r30, r24
    24b2:	e4 5f       	subi	r30, 0xF4	; 244
    24b4:	fa 4f       	sbci	r31, 0xFA	; 250
    24b6:	90 81       	ld	r25, Z
    24b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    24ba:	98 17       	cp	r25, r24
    24bc:	19 f5       	brne	.+70     	; 0x2504 <Write_data+0x8c>
			{
				DIO_u8SetPinVal(LCD_PIN_PORT_ARRAY[i],LCD_PIN_ARRAY[i],get_bit(DATA,i));
    24be:	88 89       	ldd	r24, Y+16	; 0x10
    24c0:	88 2f       	mov	r24, r24
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	fc 01       	movw	r30, r24
    24c6:	ec 5e       	subi	r30, 0xEC	; 236
    24c8:	fa 4f       	sbci	r31, 0xFA	; 250
    24ca:	50 81       	ld	r21, Z
    24cc:	88 89       	ldd	r24, Y+16	; 0x10
    24ce:	88 2f       	mov	r24, r24
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	fc 01       	movw	r30, r24
    24d4:	e4 5f       	subi	r30, 0xF4	; 244
    24d6:	fa 4f       	sbci	r31, 0xFA	; 250
    24d8:	40 81       	ld	r20, Z
    24da:	89 89       	ldd	r24, Y+17	; 0x11
    24dc:	28 2f       	mov	r18, r24
    24de:	30 e0       	ldi	r19, 0x00	; 0
    24e0:	88 89       	ldd	r24, Y+16	; 0x10
    24e2:	88 2f       	mov	r24, r24
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	b9 01       	movw	r22, r18
    24e8:	02 c0       	rjmp	.+4      	; 0x24ee <Write_data+0x76>
    24ea:	75 95       	asr	r23
    24ec:	67 95       	ror	r22
    24ee:	8a 95       	dec	r24
    24f0:	e2 f7       	brpl	.-8      	; 0x24ea <Write_data+0x72>
    24f2:	cb 01       	movw	r24, r22
    24f4:	98 2f       	mov	r25, r24
    24f6:	91 70       	andi	r25, 0x01	; 1
    24f8:	85 2f       	mov	r24, r21
    24fa:	64 2f       	mov	r22, r20
    24fc:	49 2f       	mov	r20, r25
    24fe:	0e 94 c2 0a 	call	0x1584	; 0x1584 <DIO_u8SetPinVal>
    2502:	06 c0       	rjmp	.+12     	; 0x2510 <Write_data+0x98>
	DIO_u8SetPinVal(LCD_RS_PORT,LCD_RS,DIO_HIGH);//data register 1
	DIO_u8SetPinVal(LCD_RW_PORT,LCD_RW,DIO_LOW);//Write 0
//	DIO_u8SetPortVal(LCD_PORT,DATA);
	for(i=0;i<=7;i++)
	{
		for(j=0;j<=7;j++)
    2504:	8f 85       	ldd	r24, Y+15	; 0x0f
    2506:	8f 5f       	subi	r24, 0xFF	; 255
    2508:	8f 87       	std	Y+15, r24	; 0x0f
    250a:	8f 85       	ldd	r24, Y+15	; 0x0f
    250c:	88 30       	cpi	r24, 0x08	; 8
    250e:	68 f2       	brcs	.-102    	; 0x24aa <Write_data+0x32>
	_delay_ms(2);
#elif LCD_INIT_MODE == LCD_8_BIT_MODE_TEST
	DIO_u8SetPinVal(LCD_RS_PORT,LCD_RS,DIO_HIGH);//data register 1
	DIO_u8SetPinVal(LCD_RW_PORT,LCD_RW,DIO_LOW);//Write 0
//	DIO_u8SetPortVal(LCD_PORT,DATA);
	for(i=0;i<=7;i++)
    2510:	88 89       	ldd	r24, Y+16	; 0x10
    2512:	8f 5f       	subi	r24, 0xFF	; 255
    2514:	88 8b       	std	Y+16, r24	; 0x10
    2516:	88 89       	ldd	r24, Y+16	; 0x10
    2518:	88 30       	cpi	r24, 0x08	; 8
    251a:	28 f2       	brcs	.-118    	; 0x24a6 <Write_data+0x2e>
				DIO_u8SetPinVal(LCD_PIN_PORT_ARRAY[i],LCD_PIN_ARRAY[i],get_bit(DATA,i));
				break;
			}
		}
	}
	DIO_u8SetPinVal(LCD_Enable_PORT,LCD_Enable,DIO_HIGH);//enable 1
    251c:	80 e0       	ldi	r24, 0x00	; 0
    251e:	65 e0       	ldi	r22, 0x05	; 5
    2520:	41 e0       	ldi	r20, 0x01	; 1
    2522:	0e 94 c2 0a 	call	0x1584	; 0x1584 <DIO_u8SetPinVal>
    2526:	80 e0       	ldi	r24, 0x00	; 0
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	a0 e0       	ldi	r26, 0x00	; 0
    252c:	b0 e4       	ldi	r27, 0x40	; 64
    252e:	8b 87       	std	Y+11, r24	; 0x0b
    2530:	9c 87       	std	Y+12, r25	; 0x0c
    2532:	ad 87       	std	Y+13, r26	; 0x0d
    2534:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2536:	6b 85       	ldd	r22, Y+11	; 0x0b
    2538:	7c 85       	ldd	r23, Y+12	; 0x0c
    253a:	8d 85       	ldd	r24, Y+13	; 0x0d
    253c:	9e 85       	ldd	r25, Y+14	; 0x0e
    253e:	20 e0       	ldi	r18, 0x00	; 0
    2540:	30 e0       	ldi	r19, 0x00	; 0
    2542:	4a ef       	ldi	r20, 0xFA	; 250
    2544:	54 e4       	ldi	r21, 0x44	; 68
    2546:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    254a:	dc 01       	movw	r26, r24
    254c:	cb 01       	movw	r24, r22
    254e:	8f 83       	std	Y+7, r24	; 0x07
    2550:	98 87       	std	Y+8, r25	; 0x08
    2552:	a9 87       	std	Y+9, r26	; 0x09
    2554:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2556:	6f 81       	ldd	r22, Y+7	; 0x07
    2558:	78 85       	ldd	r23, Y+8	; 0x08
    255a:	89 85       	ldd	r24, Y+9	; 0x09
    255c:	9a 85       	ldd	r25, Y+10	; 0x0a
    255e:	20 e0       	ldi	r18, 0x00	; 0
    2560:	30 e0       	ldi	r19, 0x00	; 0
    2562:	40 e8       	ldi	r20, 0x80	; 128
    2564:	5f e3       	ldi	r21, 0x3F	; 63
    2566:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    256a:	88 23       	and	r24, r24
    256c:	2c f4       	brge	.+10     	; 0x2578 <Write_data+0x100>
		__ticks = 1;
    256e:	81 e0       	ldi	r24, 0x01	; 1
    2570:	90 e0       	ldi	r25, 0x00	; 0
    2572:	9e 83       	std	Y+6, r25	; 0x06
    2574:	8d 83       	std	Y+5, r24	; 0x05
    2576:	3f c0       	rjmp	.+126    	; 0x25f6 <Write_data+0x17e>
	else if (__tmp > 65535)
    2578:	6f 81       	ldd	r22, Y+7	; 0x07
    257a:	78 85       	ldd	r23, Y+8	; 0x08
    257c:	89 85       	ldd	r24, Y+9	; 0x09
    257e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2580:	20 e0       	ldi	r18, 0x00	; 0
    2582:	3f ef       	ldi	r19, 0xFF	; 255
    2584:	4f e7       	ldi	r20, 0x7F	; 127
    2586:	57 e4       	ldi	r21, 0x47	; 71
    2588:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    258c:	18 16       	cp	r1, r24
    258e:	4c f5       	brge	.+82     	; 0x25e2 <Write_data+0x16a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2590:	6b 85       	ldd	r22, Y+11	; 0x0b
    2592:	7c 85       	ldd	r23, Y+12	; 0x0c
    2594:	8d 85       	ldd	r24, Y+13	; 0x0d
    2596:	9e 85       	ldd	r25, Y+14	; 0x0e
    2598:	20 e0       	ldi	r18, 0x00	; 0
    259a:	30 e0       	ldi	r19, 0x00	; 0
    259c:	40 e2       	ldi	r20, 0x20	; 32
    259e:	51 e4       	ldi	r21, 0x41	; 65
    25a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25a4:	dc 01       	movw	r26, r24
    25a6:	cb 01       	movw	r24, r22
    25a8:	bc 01       	movw	r22, r24
    25aa:	cd 01       	movw	r24, r26
    25ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25b0:	dc 01       	movw	r26, r24
    25b2:	cb 01       	movw	r24, r22
    25b4:	9e 83       	std	Y+6, r25	; 0x06
    25b6:	8d 83       	std	Y+5, r24	; 0x05
    25b8:	0f c0       	rjmp	.+30     	; 0x25d8 <Write_data+0x160>
    25ba:	88 ec       	ldi	r24, 0xC8	; 200
    25bc:	90 e0       	ldi	r25, 0x00	; 0
    25be:	9c 83       	std	Y+4, r25	; 0x04
    25c0:	8b 83       	std	Y+3, r24	; 0x03
    25c2:	8b 81       	ldd	r24, Y+3	; 0x03
    25c4:	9c 81       	ldd	r25, Y+4	; 0x04
    25c6:	01 97       	sbiw	r24, 0x01	; 1
    25c8:	f1 f7       	brne	.-4      	; 0x25c6 <Write_data+0x14e>
    25ca:	9c 83       	std	Y+4, r25	; 0x04
    25cc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25ce:	8d 81       	ldd	r24, Y+5	; 0x05
    25d0:	9e 81       	ldd	r25, Y+6	; 0x06
    25d2:	01 97       	sbiw	r24, 0x01	; 1
    25d4:	9e 83       	std	Y+6, r25	; 0x06
    25d6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25d8:	8d 81       	ldd	r24, Y+5	; 0x05
    25da:	9e 81       	ldd	r25, Y+6	; 0x06
    25dc:	00 97       	sbiw	r24, 0x00	; 0
    25de:	69 f7       	brne	.-38     	; 0x25ba <Write_data+0x142>
    25e0:	14 c0       	rjmp	.+40     	; 0x260a <Write_data+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25e2:	6f 81       	ldd	r22, Y+7	; 0x07
    25e4:	78 85       	ldd	r23, Y+8	; 0x08
    25e6:	89 85       	ldd	r24, Y+9	; 0x09
    25e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ee:	dc 01       	movw	r26, r24
    25f0:	cb 01       	movw	r24, r22
    25f2:	9e 83       	std	Y+6, r25	; 0x06
    25f4:	8d 83       	std	Y+5, r24	; 0x05
    25f6:	8d 81       	ldd	r24, Y+5	; 0x05
    25f8:	9e 81       	ldd	r25, Y+6	; 0x06
    25fa:	9a 83       	std	Y+2, r25	; 0x02
    25fc:	89 83       	std	Y+1, r24	; 0x01
    25fe:	89 81       	ldd	r24, Y+1	; 0x01
    2600:	9a 81       	ldd	r25, Y+2	; 0x02
    2602:	01 97       	sbiw	r24, 0x01	; 1
    2604:	f1 f7       	brne	.-4      	; 0x2602 <Write_data+0x18a>
    2606:	9a 83       	std	Y+2, r25	; 0x02
    2608:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinVal(LCD_Enable_PORT,LCD_Enable,DIO_LOW);//enable 0
    260a:	80 e0       	ldi	r24, 0x00	; 0
    260c:	65 e0       	ldi	r22, 0x05	; 5
    260e:	40 e0       	ldi	r20, 0x00	; 0
    2610:	0e 94 c2 0a 	call	0x1584	; 0x1584 <DIO_u8SetPinVal>
#endif
}
    2614:	61 96       	adiw	r28, 0x11	; 17
    2616:	0f b6       	in	r0, 0x3f	; 63
    2618:	f8 94       	cli
    261a:	de bf       	out	0x3e, r29	; 62
    261c:	0f be       	out	0x3f, r0	; 63
    261e:	cd bf       	out	0x3d, r28	; 61
    2620:	cf 91       	pop	r28
    2622:	df 91       	pop	r29
    2624:	08 95       	ret

00002626 <LCD_goto>:

void LCD_goto(u8 x,u8 y)//y 1st line and 2nd line ,x in the space horizontal
{
    2626:	df 93       	push	r29
    2628:	cf 93       	push	r28
    262a:	00 d0       	rcall	.+0      	; 0x262c <LCD_goto+0x6>
    262c:	cd b7       	in	r28, 0x3d	; 61
    262e:	de b7       	in	r29, 0x3e	; 62
    2630:	89 83       	std	Y+1, r24	; 0x01
    2632:	6a 83       	std	Y+2, r22	; 0x02
	if (y==0)
    2634:	8a 81       	ldd	r24, Y+2	; 0x02
    2636:	88 23       	and	r24, r24
    2638:	29 f4       	brne	.+10     	; 0x2644 <LCD_goto+0x1e>
	{
		Write_cmd(0b10000000+x);//right shift
    263a:	89 81       	ldd	r24, Y+1	; 0x01
    263c:	80 58       	subi	r24, 0x80	; 128
    263e:	0e 94 65 11 	call	0x22ca	; 0x22ca <Write_cmd>
    2642:	04 c0       	rjmp	.+8      	; 0x264c <LCD_goto+0x26>
	}
	else
	{
		Write_cmd(0b11000000+x);
    2644:	89 81       	ldd	r24, Y+1	; 0x01
    2646:	80 54       	subi	r24, 0x40	; 64
    2648:	0e 94 65 11 	call	0x22ca	; 0x22ca <Write_cmd>
	}
}
    264c:	0f 90       	pop	r0
    264e:	0f 90       	pop	r0
    2650:	cf 91       	pop	r28
    2652:	df 91       	pop	r29
    2654:	08 95       	ret

00002656 <LCD_CLR>:

void LCD_CLR(void)
{
    2656:	df 93       	push	r29
    2658:	cf 93       	push	r28
    265a:	cd b7       	in	r28, 0x3d	; 61
    265c:	de b7       	in	r29, 0x3e	; 62
	Write_cmd(0b00000001);
    265e:	81 e0       	ldi	r24, 0x01	; 1
    2660:	0e 94 65 11 	call	0x22ca	; 0x22ca <Write_cmd>
}
    2664:	cf 91       	pop	r28
    2666:	df 91       	pop	r29
    2668:	08 95       	ret

0000266a <LCD_CGR>:
 void LCD_CGR(void)
 {
    266a:	df 93       	push	r29
    266c:	cf 93       	push	r28
    266e:	cd b7       	in	r28, 0x3d	; 61
    2670:	de b7       	in	r29, 0x3e	; 62
	 Write_cmd(0b01000000);//write on CGRAM 0b11100000 awl tlat 111 mesh bytktb fehom 7aga
    2672:	80 e4       	ldi	r24, 0x40	; 64
    2674:	0e 94 65 11 	call	0x22ca	; 0x22ca <Write_cmd>
 }
    2678:	cf 91       	pop	r28
    267a:	df 91       	pop	r29
    267c:	08 95       	ret

0000267e <LCD_DDR>:

 void LCD_DDR(void)
 {
    267e:	df 93       	push	r29
    2680:	cf 93       	push	r28
    2682:	cd b7       	in	r28, 0x3d	; 61
    2684:	de b7       	in	r29, 0x3e	; 62
	 Write_cmd(0b10000000);
    2686:	80 e8       	ldi	r24, 0x80	; 128
    2688:	0e 94 65 11 	call	0x22ca	; 0x22ca <Write_cmd>
 }
    268c:	cf 91       	pop	r28
    268e:	df 91       	pop	r29
    2690:	08 95       	ret

00002692 <LCD_PrintNum>:

 void LCD_PrintNum(u32 Num)
 {
    2692:	df 93       	push	r29
    2694:	cf 93       	push	r28
    2696:	cd b7       	in	r28, 0x3d	; 61
    2698:	de b7       	in	r29, 0x3e	; 62
    269a:	a4 97       	sbiw	r28, 0x24	; 36
    269c:	0f b6       	in	r0, 0x3f	; 63
    269e:	f8 94       	cli
    26a0:	de bf       	out	0x3e, r29	; 62
    26a2:	0f be       	out	0x3f, r0	; 63
    26a4:	cd bf       	out	0x3d, r28	; 61
    26a6:	69 a3       	std	Y+33, r22	; 0x21
    26a8:	7a a3       	std	Y+34, r23	; 0x22
    26aa:	8b a3       	std	Y+35, r24	; 0x23
    26ac:	9c a3       	std	Y+36, r25	; 0x24


	 u32 x=0,y=0,z=0,h=0,k=0,L=0,m=0,temp=0;
    26ae:	1d 8e       	std	Y+29, r1	; 0x1d
    26b0:	1e 8e       	std	Y+30, r1	; 0x1e
    26b2:	1f 8e       	std	Y+31, r1	; 0x1f
    26b4:	18 a2       	std	Y+32, r1	; 0x20
    26b6:	19 8e       	std	Y+25, r1	; 0x19
    26b8:	1a 8e       	std	Y+26, r1	; 0x1a
    26ba:	1b 8e       	std	Y+27, r1	; 0x1b
    26bc:	1c 8e       	std	Y+28, r1	; 0x1c
    26be:	1d 8a       	std	Y+21, r1	; 0x15
    26c0:	1e 8a       	std	Y+22, r1	; 0x16
    26c2:	1f 8a       	std	Y+23, r1	; 0x17
    26c4:	18 8e       	std	Y+24, r1	; 0x18
    26c6:	19 8a       	std	Y+17, r1	; 0x11
    26c8:	1a 8a       	std	Y+18, r1	; 0x12
    26ca:	1b 8a       	std	Y+19, r1	; 0x13
    26cc:	1c 8a       	std	Y+20, r1	; 0x14
    26ce:	1d 86       	std	Y+13, r1	; 0x0d
    26d0:	1e 86       	std	Y+14, r1	; 0x0e
    26d2:	1f 86       	std	Y+15, r1	; 0x0f
    26d4:	18 8a       	std	Y+16, r1	; 0x10
    26d6:	19 86       	std	Y+9, r1	; 0x09
    26d8:	1a 86       	std	Y+10, r1	; 0x0a
    26da:	1b 86       	std	Y+11, r1	; 0x0b
    26dc:	1c 86       	std	Y+12, r1	; 0x0c
    26de:	1d 82       	std	Y+5, r1	; 0x05
    26e0:	1e 82       	std	Y+6, r1	; 0x06
    26e2:	1f 82       	std	Y+7, r1	; 0x07
    26e4:	18 86       	std	Y+8, r1	; 0x08
    26e6:	19 82       	std	Y+1, r1	; 0x01
    26e8:	1a 82       	std	Y+2, r1	; 0x02
    26ea:	1b 82       	std	Y+3, r1	; 0x03
    26ec:	1c 82       	std	Y+4, r1	; 0x04

	 if (Num==0)
    26ee:	89 a1       	ldd	r24, Y+33	; 0x21
    26f0:	9a a1       	ldd	r25, Y+34	; 0x22
    26f2:	ab a1       	ldd	r26, Y+35	; 0x23
    26f4:	bc a1       	ldd	r27, Y+36	; 0x24
    26f6:	00 97       	sbiw	r24, 0x00	; 0
    26f8:	a1 05       	cpc	r26, r1
    26fa:	b1 05       	cpc	r27, r1
    26fc:	21 f4       	brne	.+8      	; 0x2706 <LCD_PrintNum+0x74>
	 {
		 Write_data('0');
    26fe:	80 e3       	ldi	r24, 0x30	; 48
    2700:	0e 94 3c 12 	call	0x2478	; 0x2478 <Write_data>
    2704:	5c c4       	rjmp	.+2232   	; 0x2fbe <LCD_PrintNum+0x92c>
	 }else if(Num>0 && Num<10)
    2706:	89 a1       	ldd	r24, Y+33	; 0x21
    2708:	9a a1       	ldd	r25, Y+34	; 0x22
    270a:	ab a1       	ldd	r26, Y+35	; 0x23
    270c:	bc a1       	ldd	r27, Y+36	; 0x24
    270e:	00 97       	sbiw	r24, 0x00	; 0
    2710:	a1 05       	cpc	r26, r1
    2712:	b1 05       	cpc	r27, r1
    2714:	71 f0       	breq	.+28     	; 0x2732 <LCD_PrintNum+0xa0>
    2716:	89 a1       	ldd	r24, Y+33	; 0x21
    2718:	9a a1       	ldd	r25, Y+34	; 0x22
    271a:	ab a1       	ldd	r26, Y+35	; 0x23
    271c:	bc a1       	ldd	r27, Y+36	; 0x24
    271e:	8a 30       	cpi	r24, 0x0A	; 10
    2720:	91 05       	cpc	r25, r1
    2722:	a1 05       	cpc	r26, r1
    2724:	b1 05       	cpc	r27, r1
    2726:	28 f4       	brcc	.+10     	; 0x2732 <LCD_PrintNum+0xa0>
	 {
		 Write_data('0'+Num);
    2728:	89 a1       	ldd	r24, Y+33	; 0x21
    272a:	80 5d       	subi	r24, 0xD0	; 208
    272c:	0e 94 3c 12 	call	0x2478	; 0x2478 <Write_data>
    2730:	46 c4       	rjmp	.+2188   	; 0x2fbe <LCD_PrintNum+0x92c>
	 }else if(Num>=10 && Num<=99)
    2732:	89 a1       	ldd	r24, Y+33	; 0x21
    2734:	9a a1       	ldd	r25, Y+34	; 0x22
    2736:	ab a1       	ldd	r26, Y+35	; 0x23
    2738:	bc a1       	ldd	r27, Y+36	; 0x24
    273a:	8a 30       	cpi	r24, 0x0A	; 10
    273c:	91 05       	cpc	r25, r1
    273e:	a1 05       	cpc	r26, r1
    2740:	b1 05       	cpc	r27, r1
    2742:	b0 f1       	brcs	.+108    	; 0x27b0 <LCD_PrintNum+0x11e>
    2744:	89 a1       	ldd	r24, Y+33	; 0x21
    2746:	9a a1       	ldd	r25, Y+34	; 0x22
    2748:	ab a1       	ldd	r26, Y+35	; 0x23
    274a:	bc a1       	ldd	r27, Y+36	; 0x24
    274c:	84 36       	cpi	r24, 0x64	; 100
    274e:	91 05       	cpc	r25, r1
    2750:	a1 05       	cpc	r26, r1
    2752:	b1 05       	cpc	r27, r1
    2754:	68 f5       	brcc	.+90     	; 0x27b0 <LCD_PrintNum+0x11e>
	 {
		 x=Num/10;
    2756:	89 a1       	ldd	r24, Y+33	; 0x21
    2758:	9a a1       	ldd	r25, Y+34	; 0x22
    275a:	ab a1       	ldd	r26, Y+35	; 0x23
    275c:	bc a1       	ldd	r27, Y+36	; 0x24
    275e:	2a e0       	ldi	r18, 0x0A	; 10
    2760:	30 e0       	ldi	r19, 0x00	; 0
    2762:	40 e0       	ldi	r20, 0x00	; 0
    2764:	50 e0       	ldi	r21, 0x00	; 0
    2766:	bc 01       	movw	r22, r24
    2768:	cd 01       	movw	r24, r26
    276a:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <__udivmodsi4>
    276e:	da 01       	movw	r26, r20
    2770:	c9 01       	movw	r24, r18
    2772:	8d 8f       	std	Y+29, r24	; 0x1d
    2774:	9e 8f       	std	Y+30, r25	; 0x1e
    2776:	af 8f       	std	Y+31, r26	; 0x1f
    2778:	b8 a3       	std	Y+32, r27	; 0x20
		 y=Num%10;
    277a:	89 a1       	ldd	r24, Y+33	; 0x21
    277c:	9a a1       	ldd	r25, Y+34	; 0x22
    277e:	ab a1       	ldd	r26, Y+35	; 0x23
    2780:	bc a1       	ldd	r27, Y+36	; 0x24
    2782:	2a e0       	ldi	r18, 0x0A	; 10
    2784:	30 e0       	ldi	r19, 0x00	; 0
    2786:	40 e0       	ldi	r20, 0x00	; 0
    2788:	50 e0       	ldi	r21, 0x00	; 0
    278a:	bc 01       	movw	r22, r24
    278c:	cd 01       	movw	r24, r26
    278e:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <__udivmodsi4>
    2792:	dc 01       	movw	r26, r24
    2794:	cb 01       	movw	r24, r22
    2796:	89 8f       	std	Y+25, r24	; 0x19
    2798:	9a 8f       	std	Y+26, r25	; 0x1a
    279a:	ab 8f       	std	Y+27, r26	; 0x1b
    279c:	bc 8f       	std	Y+28, r27	; 0x1c
		 Write_data('0'+x);
    279e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27a0:	80 5d       	subi	r24, 0xD0	; 208
    27a2:	0e 94 3c 12 	call	0x2478	; 0x2478 <Write_data>
		 Write_data('0'+y);
    27a6:	89 8d       	ldd	r24, Y+25	; 0x19
    27a8:	80 5d       	subi	r24, 0xD0	; 208
    27aa:	0e 94 3c 12 	call	0x2478	; 0x2478 <Write_data>
    27ae:	07 c4       	rjmp	.+2062   	; 0x2fbe <LCD_PrintNum+0x92c>
	 }else if(Num>=100 && Num<=999)
    27b0:	89 a1       	ldd	r24, Y+33	; 0x21
    27b2:	9a a1       	ldd	r25, Y+34	; 0x22
    27b4:	ab a1       	ldd	r26, Y+35	; 0x23
    27b6:	bc a1       	ldd	r27, Y+36	; 0x24
    27b8:	84 36       	cpi	r24, 0x64	; 100
    27ba:	91 05       	cpc	r25, r1
    27bc:	a1 05       	cpc	r26, r1
    27be:	b1 05       	cpc	r27, r1
    27c0:	08 f4       	brcc	.+2      	; 0x27c4 <LCD_PrintNum+0x132>
    27c2:	62 c0       	rjmp	.+196    	; 0x2888 <LCD_PrintNum+0x1f6>
    27c4:	89 a1       	ldd	r24, Y+33	; 0x21
    27c6:	9a a1       	ldd	r25, Y+34	; 0x22
    27c8:	ab a1       	ldd	r26, Y+35	; 0x23
    27ca:	bc a1       	ldd	r27, Y+36	; 0x24
    27cc:	88 3e       	cpi	r24, 0xE8	; 232
    27ce:	23 e0       	ldi	r18, 0x03	; 3
    27d0:	92 07       	cpc	r25, r18
    27d2:	20 e0       	ldi	r18, 0x00	; 0
    27d4:	a2 07       	cpc	r26, r18
    27d6:	20 e0       	ldi	r18, 0x00	; 0
    27d8:	b2 07       	cpc	r27, r18
    27da:	08 f0       	brcs	.+2      	; 0x27de <LCD_PrintNum+0x14c>
    27dc:	55 c0       	rjmp	.+170    	; 0x2888 <LCD_PrintNum+0x1f6>
	 {
		 x=Num/100;//el 101 eg,101 ->1
    27de:	89 a1       	ldd	r24, Y+33	; 0x21
    27e0:	9a a1       	ldd	r25, Y+34	; 0x22
    27e2:	ab a1       	ldd	r26, Y+35	; 0x23
    27e4:	bc a1       	ldd	r27, Y+36	; 0x24
    27e6:	24 e6       	ldi	r18, 0x64	; 100
    27e8:	30 e0       	ldi	r19, 0x00	; 0
    27ea:	40 e0       	ldi	r20, 0x00	; 0
    27ec:	50 e0       	ldi	r21, 0x00	; 0
    27ee:	bc 01       	movw	r22, r24
    27f0:	cd 01       	movw	r24, r26
    27f2:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <__udivmodsi4>
    27f6:	da 01       	movw	r26, r20
    27f8:	c9 01       	movw	r24, r18
    27fa:	8d 8f       	std	Y+29, r24	; 0x1d
    27fc:	9e 8f       	std	Y+30, r25	; 0x1e
    27fe:	af 8f       	std	Y+31, r26	; 0x1f
    2800:	b8 a3       	std	Y+32, r27	; 0x20
		 y=Num%100;//1
    2802:	89 a1       	ldd	r24, Y+33	; 0x21
    2804:	9a a1       	ldd	r25, Y+34	; 0x22
    2806:	ab a1       	ldd	r26, Y+35	; 0x23
    2808:	bc a1       	ldd	r27, Y+36	; 0x24
    280a:	24 e6       	ldi	r18, 0x64	; 100
    280c:	30 e0       	ldi	r19, 0x00	; 0
    280e:	40 e0       	ldi	r20, 0x00	; 0
    2810:	50 e0       	ldi	r21, 0x00	; 0
    2812:	bc 01       	movw	r22, r24
    2814:	cd 01       	movw	r24, r26
    2816:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <__udivmodsi4>
    281a:	dc 01       	movw	r26, r24
    281c:	cb 01       	movw	r24, r22
    281e:	89 8f       	std	Y+25, r24	; 0x19
    2820:	9a 8f       	std	Y+26, r25	; 0x1a
    2822:	ab 8f       	std	Y+27, r26	; 0x1b
    2824:	bc 8f       	std	Y+28, r27	; 0x1c
		 //e=Num-x*100
		 temp=y/10;//0
    2826:	89 8d       	ldd	r24, Y+25	; 0x19
    2828:	9a 8d       	ldd	r25, Y+26	; 0x1a
    282a:	ab 8d       	ldd	r26, Y+27	; 0x1b
    282c:	bc 8d       	ldd	r27, Y+28	; 0x1c
    282e:	2a e0       	ldi	r18, 0x0A	; 10
    2830:	30 e0       	ldi	r19, 0x00	; 0
    2832:	40 e0       	ldi	r20, 0x00	; 0
    2834:	50 e0       	ldi	r21, 0x00	; 0
    2836:	bc 01       	movw	r22, r24
    2838:	cd 01       	movw	r24, r26
    283a:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <__udivmodsi4>
    283e:	da 01       	movw	r26, r20
    2840:	c9 01       	movw	r24, r18
    2842:	89 83       	std	Y+1, r24	; 0x01
    2844:	9a 83       	std	Y+2, r25	; 0x02
    2846:	ab 83       	std	Y+3, r26	; 0x03
    2848:	bc 83       	std	Y+4, r27	; 0x04
		 z=y%10;//0
    284a:	89 8d       	ldd	r24, Y+25	; 0x19
    284c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    284e:	ab 8d       	ldd	r26, Y+27	; 0x1b
    2850:	bc 8d       	ldd	r27, Y+28	; 0x1c
    2852:	2a e0       	ldi	r18, 0x0A	; 10
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	40 e0       	ldi	r20, 0x00	; 0
    2858:	50 e0       	ldi	r21, 0x00	; 0
    285a:	bc 01       	movw	r22, r24
    285c:	cd 01       	movw	r24, r26
    285e:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <__udivmodsi4>
    2862:	dc 01       	movw	r26, r24
    2864:	cb 01       	movw	r24, r22
    2866:	8d 8b       	std	Y+21, r24	; 0x15
    2868:	9e 8b       	std	Y+22, r25	; 0x16
    286a:	af 8b       	std	Y+23, r26	; 0x17
    286c:	b8 8f       	std	Y+24, r27	; 0x18
		 Write_data('0'+x);
    286e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2870:	80 5d       	subi	r24, 0xD0	; 208
    2872:	0e 94 3c 12 	call	0x2478	; 0x2478 <Write_data>
		 Write_data('0'+temp);
    2876:	89 81       	ldd	r24, Y+1	; 0x01
    2878:	80 5d       	subi	r24, 0xD0	; 208
    287a:	0e 94 3c 12 	call	0x2478	; 0x2478 <Write_data>
		 Write_data('0'+z);
    287e:	8d 89       	ldd	r24, Y+21	; 0x15
    2880:	80 5d       	subi	r24, 0xD0	; 208
    2882:	0e 94 3c 12 	call	0x2478	; 0x2478 <Write_data>
    2886:	9b c3       	rjmp	.+1846   	; 0x2fbe <LCD_PrintNum+0x92c>
	 }else if(Num>=1000 && Num<=9999)
    2888:	89 a1       	ldd	r24, Y+33	; 0x21
    288a:	9a a1       	ldd	r25, Y+34	; 0x22
    288c:	ab a1       	ldd	r26, Y+35	; 0x23
    288e:	bc a1       	ldd	r27, Y+36	; 0x24
    2890:	88 3e       	cpi	r24, 0xE8	; 232
    2892:	23 e0       	ldi	r18, 0x03	; 3
    2894:	92 07       	cpc	r25, r18
    2896:	20 e0       	ldi	r18, 0x00	; 0
    2898:	a2 07       	cpc	r26, r18
    289a:	20 e0       	ldi	r18, 0x00	; 0
    289c:	b2 07       	cpc	r27, r18
    289e:	08 f4       	brcc	.+2      	; 0x28a2 <LCD_PrintNum+0x210>
    28a0:	92 c0       	rjmp	.+292    	; 0x29c6 <LCD_PrintNum+0x334>
    28a2:	89 a1       	ldd	r24, Y+33	; 0x21
    28a4:	9a a1       	ldd	r25, Y+34	; 0x22
    28a6:	ab a1       	ldd	r26, Y+35	; 0x23
    28a8:	bc a1       	ldd	r27, Y+36	; 0x24
    28aa:	80 31       	cpi	r24, 0x10	; 16
    28ac:	27 e2       	ldi	r18, 0x27	; 39
    28ae:	92 07       	cpc	r25, r18
    28b0:	20 e0       	ldi	r18, 0x00	; 0
    28b2:	a2 07       	cpc	r26, r18
    28b4:	20 e0       	ldi	r18, 0x00	; 0
    28b6:	b2 07       	cpc	r27, r18
    28b8:	08 f0       	brcs	.+2      	; 0x28bc <LCD_PrintNum+0x22a>
    28ba:	85 c0       	rjmp	.+266    	; 0x29c6 <LCD_PrintNum+0x334>
	 {
		 x=Num/1000;//1244 ->x=1*
    28bc:	89 a1       	ldd	r24, Y+33	; 0x21
    28be:	9a a1       	ldd	r25, Y+34	; 0x22
    28c0:	ab a1       	ldd	r26, Y+35	; 0x23
    28c2:	bc a1       	ldd	r27, Y+36	; 0x24
    28c4:	28 ee       	ldi	r18, 0xE8	; 232
    28c6:	33 e0       	ldi	r19, 0x03	; 3
    28c8:	40 e0       	ldi	r20, 0x00	; 0
    28ca:	50 e0       	ldi	r21, 0x00	; 0
    28cc:	bc 01       	movw	r22, r24
    28ce:	cd 01       	movw	r24, r26
    28d0:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <__udivmodsi4>
    28d4:	da 01       	movw	r26, r20
    28d6:	c9 01       	movw	r24, r18
    28d8:	8d 8f       	std	Y+29, r24	; 0x1d
    28da:	9e 8f       	std	Y+30, r25	; 0x1e
    28dc:	af 8f       	std	Y+31, r26	; 0x1f
    28de:	b8 a3       	std	Y+32, r27	; 0x20
		 temp=Num%1000;//temp=244
    28e0:	89 a1       	ldd	r24, Y+33	; 0x21
    28e2:	9a a1       	ldd	r25, Y+34	; 0x22
    28e4:	ab a1       	ldd	r26, Y+35	; 0x23
    28e6:	bc a1       	ldd	r27, Y+36	; 0x24
    28e8:	28 ee       	ldi	r18, 0xE8	; 232
    28ea:	33 e0       	ldi	r19, 0x03	; 3
    28ec:	40 e0       	ldi	r20, 0x00	; 0
    28ee:	50 e0       	ldi	r21, 0x00	; 0
    28f0:	bc 01       	movw	r22, r24
    28f2:	cd 01       	movw	r24, r26
    28f4:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <__udivmodsi4>
    28f8:	dc 01       	movw	r26, r24
    28fa:	cb 01       	movw	r24, r22
    28fc:	89 83       	std	Y+1, r24	; 0x01
    28fe:	9a 83       	std	Y+2, r25	; 0x02
    2900:	ab 83       	std	Y+3, r26	; 0x03
    2902:	bc 83       	std	Y+4, r27	; 0x04
		 y=temp/100;//y=2*
    2904:	89 81       	ldd	r24, Y+1	; 0x01
    2906:	9a 81       	ldd	r25, Y+2	; 0x02
    2908:	ab 81       	ldd	r26, Y+3	; 0x03
    290a:	bc 81       	ldd	r27, Y+4	; 0x04
    290c:	24 e6       	ldi	r18, 0x64	; 100
    290e:	30 e0       	ldi	r19, 0x00	; 0
    2910:	40 e0       	ldi	r20, 0x00	; 0
    2912:	50 e0       	ldi	r21, 0x00	; 0
    2914:	bc 01       	movw	r22, r24
    2916:	cd 01       	movw	r24, r26
    2918:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <__udivmodsi4>
    291c:	da 01       	movw	r26, r20
    291e:	c9 01       	movw	r24, r18
    2920:	89 8f       	std	Y+25, r24	; 0x19
    2922:	9a 8f       	std	Y+26, r25	; 0x1a
    2924:	ab 8f       	std	Y+27, r26	; 0x1b
    2926:	bc 8f       	std	Y+28, r27	; 0x1c
		 z=temp%100;//z=44
    2928:	89 81       	ldd	r24, Y+1	; 0x01
    292a:	9a 81       	ldd	r25, Y+2	; 0x02
    292c:	ab 81       	ldd	r26, Y+3	; 0x03
    292e:	bc 81       	ldd	r27, Y+4	; 0x04
    2930:	24 e6       	ldi	r18, 0x64	; 100
    2932:	30 e0       	ldi	r19, 0x00	; 0
    2934:	40 e0       	ldi	r20, 0x00	; 0
    2936:	50 e0       	ldi	r21, 0x00	; 0
    2938:	bc 01       	movw	r22, r24
    293a:	cd 01       	movw	r24, r26
    293c:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <__udivmodsi4>
    2940:	dc 01       	movw	r26, r24
    2942:	cb 01       	movw	r24, r22
    2944:	8d 8b       	std	Y+21, r24	; 0x15
    2946:	9e 8b       	std	Y+22, r25	; 0x16
    2948:	af 8b       	std	Y+23, r26	; 0x17
    294a:	b8 8f       	std	Y+24, r27	; 0x18
		 temp=z;// temp=44
    294c:	8d 89       	ldd	r24, Y+21	; 0x15
    294e:	9e 89       	ldd	r25, Y+22	; 0x16
    2950:	af 89       	ldd	r26, Y+23	; 0x17
    2952:	b8 8d       	ldd	r27, Y+24	; 0x18
    2954:	89 83       	std	Y+1, r24	; 0x01
    2956:	9a 83       	std	Y+2, r25	; 0x02
    2958:	ab 83       	std	Y+3, r26	; 0x03
    295a:	bc 83       	std	Y+4, r27	; 0x04
		 z=temp/10;//z=4*
    295c:	89 81       	ldd	r24, Y+1	; 0x01
    295e:	9a 81       	ldd	r25, Y+2	; 0x02
    2960:	ab 81       	ldd	r26, Y+3	; 0x03
    2962:	bc 81       	ldd	r27, Y+4	; 0x04
    2964:	2a e0       	ldi	r18, 0x0A	; 10
    2966:	30 e0       	ldi	r19, 0x00	; 0
    2968:	40 e0       	ldi	r20, 0x00	; 0
    296a:	50 e0       	ldi	r21, 0x00	; 0
    296c:	bc 01       	movw	r22, r24
    296e:	cd 01       	movw	r24, r26
    2970:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <__udivmodsi4>
    2974:	da 01       	movw	r26, r20
    2976:	c9 01       	movw	r24, r18
    2978:	8d 8b       	std	Y+21, r24	; 0x15
    297a:	9e 8b       	std	Y+22, r25	; 0x16
    297c:	af 8b       	std	Y+23, r26	; 0x17
    297e:	b8 8f       	std	Y+24, r27	; 0x18
		 h=temp%10;//h=4*
    2980:	89 81       	ldd	r24, Y+1	; 0x01
    2982:	9a 81       	ldd	r25, Y+2	; 0x02
    2984:	ab 81       	ldd	r26, Y+3	; 0x03
    2986:	bc 81       	ldd	r27, Y+4	; 0x04
    2988:	2a e0       	ldi	r18, 0x0A	; 10
    298a:	30 e0       	ldi	r19, 0x00	; 0
    298c:	40 e0       	ldi	r20, 0x00	; 0
    298e:	50 e0       	ldi	r21, 0x00	; 0
    2990:	bc 01       	movw	r22, r24
    2992:	cd 01       	movw	r24, r26
    2994:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <__udivmodsi4>
    2998:	dc 01       	movw	r26, r24
    299a:	cb 01       	movw	r24, r22
    299c:	89 8b       	std	Y+17, r24	; 0x11
    299e:	9a 8b       	std	Y+18, r25	; 0x12
    29a0:	ab 8b       	std	Y+19, r26	; 0x13
    29a2:	bc 8b       	std	Y+20, r27	; 0x14
		 Write_data('0'+x);//1
    29a4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29a6:	80 5d       	subi	r24, 0xD0	; 208
    29a8:	0e 94 3c 12 	call	0x2478	; 0x2478 <Write_data>
		 Write_data('0'+y);//2
    29ac:	89 8d       	ldd	r24, Y+25	; 0x19
    29ae:	80 5d       	subi	r24, 0xD0	; 208
    29b0:	0e 94 3c 12 	call	0x2478	; 0x2478 <Write_data>
		 Write_data('0'+z);//4
    29b4:	8d 89       	ldd	r24, Y+21	; 0x15
    29b6:	80 5d       	subi	r24, 0xD0	; 208
    29b8:	0e 94 3c 12 	call	0x2478	; 0x2478 <Write_data>
		 Write_data('0'+h);//4
    29bc:	89 89       	ldd	r24, Y+17	; 0x11
    29be:	80 5d       	subi	r24, 0xD0	; 208
    29c0:	0e 94 3c 12 	call	0x2478	; 0x2478 <Write_data>
    29c4:	fc c2       	rjmp	.+1528   	; 0x2fbe <LCD_PrintNum+0x92c>

	 }
	 else if(Num>=10000 && Num<=99999)
    29c6:	89 a1       	ldd	r24, Y+33	; 0x21
    29c8:	9a a1       	ldd	r25, Y+34	; 0x22
    29ca:	ab a1       	ldd	r26, Y+35	; 0x23
    29cc:	bc a1       	ldd	r27, Y+36	; 0x24
    29ce:	80 31       	cpi	r24, 0x10	; 16
    29d0:	27 e2       	ldi	r18, 0x27	; 39
    29d2:	92 07       	cpc	r25, r18
    29d4:	20 e0       	ldi	r18, 0x00	; 0
    29d6:	a2 07       	cpc	r26, r18
    29d8:	20 e0       	ldi	r18, 0x00	; 0
    29da:	b2 07       	cpc	r27, r18
    29dc:	08 f4       	brcc	.+2      	; 0x29e0 <LCD_PrintNum+0x34e>
    29de:	c2 c0       	rjmp	.+388    	; 0x2b64 <LCD_PrintNum+0x4d2>
    29e0:	89 a1       	ldd	r24, Y+33	; 0x21
    29e2:	9a a1       	ldd	r25, Y+34	; 0x22
    29e4:	ab a1       	ldd	r26, Y+35	; 0x23
    29e6:	bc a1       	ldd	r27, Y+36	; 0x24
    29e8:	80 3a       	cpi	r24, 0xA0	; 160
    29ea:	26 e8       	ldi	r18, 0x86	; 134
    29ec:	92 07       	cpc	r25, r18
    29ee:	21 e0       	ldi	r18, 0x01	; 1
    29f0:	a2 07       	cpc	r26, r18
    29f2:	20 e0       	ldi	r18, 0x00	; 0
    29f4:	b2 07       	cpc	r27, r18
    29f6:	08 f0       	brcs	.+2      	; 0x29fa <LCD_PrintNum+0x368>
    29f8:	b5 c0       	rjmp	.+362    	; 0x2b64 <LCD_PrintNum+0x4d2>
	 	 {
	 		 x=Num/10000;//12444 ->x=1*
    29fa:	89 a1       	ldd	r24, Y+33	; 0x21
    29fc:	9a a1       	ldd	r25, Y+34	; 0x22
    29fe:	ab a1       	ldd	r26, Y+35	; 0x23
    2a00:	bc a1       	ldd	r27, Y+36	; 0x24
    2a02:	20 e1       	ldi	r18, 0x10	; 16
    2a04:	37 e2       	ldi	r19, 0x27	; 39
    2a06:	40 e0       	ldi	r20, 0x00	; 0
    2a08:	50 e0       	ldi	r21, 0x00	; 0
    2a0a:	bc 01       	movw	r22, r24
    2a0c:	cd 01       	movw	r24, r26
    2a0e:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <__udivmodsi4>
    2a12:	da 01       	movw	r26, r20
    2a14:	c9 01       	movw	r24, r18
    2a16:	8d 8f       	std	Y+29, r24	; 0x1d
    2a18:	9e 8f       	std	Y+30, r25	; 0x1e
    2a1a:	af 8f       	std	Y+31, r26	; 0x1f
    2a1c:	b8 a3       	std	Y+32, r27	; 0x20
	 		 temp=Num%10000;//temp=2444
    2a1e:	89 a1       	ldd	r24, Y+33	; 0x21
    2a20:	9a a1       	ldd	r25, Y+34	; 0x22
    2a22:	ab a1       	ldd	r26, Y+35	; 0x23
    2a24:	bc a1       	ldd	r27, Y+36	; 0x24
    2a26:	20 e1       	ldi	r18, 0x10	; 16
    2a28:	37 e2       	ldi	r19, 0x27	; 39
    2a2a:	40 e0       	ldi	r20, 0x00	; 0
    2a2c:	50 e0       	ldi	r21, 0x00	; 0
    2a2e:	bc 01       	movw	r22, r24
    2a30:	cd 01       	movw	r24, r26
    2a32:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <__udivmodsi4>
    2a36:	dc 01       	movw	r26, r24
    2a38:	cb 01       	movw	r24, r22
    2a3a:	89 83       	std	Y+1, r24	; 0x01
    2a3c:	9a 83       	std	Y+2, r25	; 0x02
    2a3e:	ab 83       	std	Y+3, r26	; 0x03
    2a40:	bc 83       	std	Y+4, r27	; 0x04
	 		 y=temp/1000;//y=2*
    2a42:	89 81       	ldd	r24, Y+1	; 0x01
    2a44:	9a 81       	ldd	r25, Y+2	; 0x02
    2a46:	ab 81       	ldd	r26, Y+3	; 0x03
    2a48:	bc 81       	ldd	r27, Y+4	; 0x04
    2a4a:	28 ee       	ldi	r18, 0xE8	; 232
    2a4c:	33 e0       	ldi	r19, 0x03	; 3
    2a4e:	40 e0       	ldi	r20, 0x00	; 0
    2a50:	50 e0       	ldi	r21, 0x00	; 0
    2a52:	bc 01       	movw	r22, r24
    2a54:	cd 01       	movw	r24, r26
    2a56:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <__udivmodsi4>
    2a5a:	da 01       	movw	r26, r20
    2a5c:	c9 01       	movw	r24, r18
    2a5e:	89 8f       	std	Y+25, r24	; 0x19
    2a60:	9a 8f       	std	Y+26, r25	; 0x1a
    2a62:	ab 8f       	std	Y+27, r26	; 0x1b
    2a64:	bc 8f       	std	Y+28, r27	; 0x1c
	 		 z=temp%1000;//z=444
    2a66:	89 81       	ldd	r24, Y+1	; 0x01
    2a68:	9a 81       	ldd	r25, Y+2	; 0x02
    2a6a:	ab 81       	ldd	r26, Y+3	; 0x03
    2a6c:	bc 81       	ldd	r27, Y+4	; 0x04
    2a6e:	28 ee       	ldi	r18, 0xE8	; 232
    2a70:	33 e0       	ldi	r19, 0x03	; 3
    2a72:	40 e0       	ldi	r20, 0x00	; 0
    2a74:	50 e0       	ldi	r21, 0x00	; 0
    2a76:	bc 01       	movw	r22, r24
    2a78:	cd 01       	movw	r24, r26
    2a7a:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <__udivmodsi4>
    2a7e:	dc 01       	movw	r26, r24
    2a80:	cb 01       	movw	r24, r22
    2a82:	8d 8b       	std	Y+21, r24	; 0x15
    2a84:	9e 8b       	std	Y+22, r25	; 0x16
    2a86:	af 8b       	std	Y+23, r26	; 0x17
    2a88:	b8 8f       	std	Y+24, r27	; 0x18
	 		 temp=z;// temp=444
    2a8a:	8d 89       	ldd	r24, Y+21	; 0x15
    2a8c:	9e 89       	ldd	r25, Y+22	; 0x16
    2a8e:	af 89       	ldd	r26, Y+23	; 0x17
    2a90:	b8 8d       	ldd	r27, Y+24	; 0x18
    2a92:	89 83       	std	Y+1, r24	; 0x01
    2a94:	9a 83       	std	Y+2, r25	; 0x02
    2a96:	ab 83       	std	Y+3, r26	; 0x03
    2a98:	bc 83       	std	Y+4, r27	; 0x04
	 		 z=temp/100;//z=4*
    2a9a:	89 81       	ldd	r24, Y+1	; 0x01
    2a9c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a9e:	ab 81       	ldd	r26, Y+3	; 0x03
    2aa0:	bc 81       	ldd	r27, Y+4	; 0x04
    2aa2:	24 e6       	ldi	r18, 0x64	; 100
    2aa4:	30 e0       	ldi	r19, 0x00	; 0
    2aa6:	40 e0       	ldi	r20, 0x00	; 0
    2aa8:	50 e0       	ldi	r21, 0x00	; 0
    2aaa:	bc 01       	movw	r22, r24
    2aac:	cd 01       	movw	r24, r26
    2aae:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <__udivmodsi4>
    2ab2:	da 01       	movw	r26, r20
    2ab4:	c9 01       	movw	r24, r18
    2ab6:	8d 8b       	std	Y+21, r24	; 0x15
    2ab8:	9e 8b       	std	Y+22, r25	; 0x16
    2aba:	af 8b       	std	Y+23, r26	; 0x17
    2abc:	b8 8f       	std	Y+24, r27	; 0x18
	 		 h=temp%100;//h=44
    2abe:	89 81       	ldd	r24, Y+1	; 0x01
    2ac0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ac2:	ab 81       	ldd	r26, Y+3	; 0x03
    2ac4:	bc 81       	ldd	r27, Y+4	; 0x04
    2ac6:	24 e6       	ldi	r18, 0x64	; 100
    2ac8:	30 e0       	ldi	r19, 0x00	; 0
    2aca:	40 e0       	ldi	r20, 0x00	; 0
    2acc:	50 e0       	ldi	r21, 0x00	; 0
    2ace:	bc 01       	movw	r22, r24
    2ad0:	cd 01       	movw	r24, r26
    2ad2:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <__udivmodsi4>
    2ad6:	dc 01       	movw	r26, r24
    2ad8:	cb 01       	movw	r24, r22
    2ada:	89 8b       	std	Y+17, r24	; 0x11
    2adc:	9a 8b       	std	Y+18, r25	; 0x12
    2ade:	ab 8b       	std	Y+19, r26	; 0x13
    2ae0:	bc 8b       	std	Y+20, r27	; 0x14
	 		 temp=h;
    2ae2:	89 89       	ldd	r24, Y+17	; 0x11
    2ae4:	9a 89       	ldd	r25, Y+18	; 0x12
    2ae6:	ab 89       	ldd	r26, Y+19	; 0x13
    2ae8:	bc 89       	ldd	r27, Y+20	; 0x14
    2aea:	89 83       	std	Y+1, r24	; 0x01
    2aec:	9a 83       	std	Y+2, r25	; 0x02
    2aee:	ab 83       	std	Y+3, r26	; 0x03
    2af0:	bc 83       	std	Y+4, r27	; 0x04
	 		 h=temp/10;//h=4
    2af2:	89 81       	ldd	r24, Y+1	; 0x01
    2af4:	9a 81       	ldd	r25, Y+2	; 0x02
    2af6:	ab 81       	ldd	r26, Y+3	; 0x03
    2af8:	bc 81       	ldd	r27, Y+4	; 0x04
    2afa:	2a e0       	ldi	r18, 0x0A	; 10
    2afc:	30 e0       	ldi	r19, 0x00	; 0
    2afe:	40 e0       	ldi	r20, 0x00	; 0
    2b00:	50 e0       	ldi	r21, 0x00	; 0
    2b02:	bc 01       	movw	r22, r24
    2b04:	cd 01       	movw	r24, r26
    2b06:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <__udivmodsi4>
    2b0a:	da 01       	movw	r26, r20
    2b0c:	c9 01       	movw	r24, r18
    2b0e:	89 8b       	std	Y+17, r24	; 0x11
    2b10:	9a 8b       	std	Y+18, r25	; 0x12
    2b12:	ab 8b       	std	Y+19, r26	; 0x13
    2b14:	bc 8b       	std	Y+20, r27	; 0x14
			 k=temp%10;
    2b16:	89 81       	ldd	r24, Y+1	; 0x01
    2b18:	9a 81       	ldd	r25, Y+2	; 0x02
    2b1a:	ab 81       	ldd	r26, Y+3	; 0x03
    2b1c:	bc 81       	ldd	r27, Y+4	; 0x04
    2b1e:	2a e0       	ldi	r18, 0x0A	; 10
    2b20:	30 e0       	ldi	r19, 0x00	; 0
    2b22:	40 e0       	ldi	r20, 0x00	; 0
    2b24:	50 e0       	ldi	r21, 0x00	; 0
    2b26:	bc 01       	movw	r22, r24
    2b28:	cd 01       	movw	r24, r26
    2b2a:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <__udivmodsi4>
    2b2e:	dc 01       	movw	r26, r24
    2b30:	cb 01       	movw	r24, r22
    2b32:	8d 87       	std	Y+13, r24	; 0x0d
    2b34:	9e 87       	std	Y+14, r25	; 0x0e
    2b36:	af 87       	std	Y+15, r26	; 0x0f
    2b38:	b8 8b       	std	Y+16, r27	; 0x10

	 		 Write_data('0'+x);//1
    2b3a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b3c:	80 5d       	subi	r24, 0xD0	; 208
    2b3e:	0e 94 3c 12 	call	0x2478	; 0x2478 <Write_data>
	 		 Write_data('0'+y);//2
    2b42:	89 8d       	ldd	r24, Y+25	; 0x19
    2b44:	80 5d       	subi	r24, 0xD0	; 208
    2b46:	0e 94 3c 12 	call	0x2478	; 0x2478 <Write_data>
	 		 Write_data('0'+z);//4
    2b4a:	8d 89       	ldd	r24, Y+21	; 0x15
    2b4c:	80 5d       	subi	r24, 0xD0	; 208
    2b4e:	0e 94 3c 12 	call	0x2478	; 0x2478 <Write_data>
	 		 Write_data('0'+h);//4
    2b52:	89 89       	ldd	r24, Y+17	; 0x11
    2b54:	80 5d       	subi	r24, 0xD0	; 208
    2b56:	0e 94 3c 12 	call	0x2478	; 0x2478 <Write_data>
	 		 Write_data('0'+k);//4
    2b5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b5c:	80 5d       	subi	r24, 0xD0	; 208
    2b5e:	0e 94 3c 12 	call	0x2478	; 0x2478 <Write_data>
    2b62:	2d c2       	rjmp	.+1114   	; 0x2fbe <LCD_PrintNum+0x92c>

	 	 }
	 else if(Num>=100000 && Num<=999999)
    2b64:	89 a1       	ldd	r24, Y+33	; 0x21
    2b66:	9a a1       	ldd	r25, Y+34	; 0x22
    2b68:	ab a1       	ldd	r26, Y+35	; 0x23
    2b6a:	bc a1       	ldd	r27, Y+36	; 0x24
    2b6c:	80 3a       	cpi	r24, 0xA0	; 160
    2b6e:	26 e8       	ldi	r18, 0x86	; 134
    2b70:	92 07       	cpc	r25, r18
    2b72:	21 e0       	ldi	r18, 0x01	; 1
    2b74:	a2 07       	cpc	r26, r18
    2b76:	20 e0       	ldi	r18, 0x00	; 0
    2b78:	b2 07       	cpc	r27, r18
    2b7a:	08 f4       	brcc	.+2      	; 0x2b7e <LCD_PrintNum+0x4ec>
    2b7c:	f2 c0       	rjmp	.+484    	; 0x2d62 <LCD_PrintNum+0x6d0>
    2b7e:	89 a1       	ldd	r24, Y+33	; 0x21
    2b80:	9a a1       	ldd	r25, Y+34	; 0x22
    2b82:	ab a1       	ldd	r26, Y+35	; 0x23
    2b84:	bc a1       	ldd	r27, Y+36	; 0x24
    2b86:	80 34       	cpi	r24, 0x40	; 64
    2b88:	22 e4       	ldi	r18, 0x42	; 66
    2b8a:	92 07       	cpc	r25, r18
    2b8c:	2f e0       	ldi	r18, 0x0F	; 15
    2b8e:	a2 07       	cpc	r26, r18
    2b90:	20 e0       	ldi	r18, 0x00	; 0
    2b92:	b2 07       	cpc	r27, r18
    2b94:	08 f0       	brcs	.+2      	; 0x2b98 <LCD_PrintNum+0x506>
    2b96:	e5 c0       	rjmp	.+458    	; 0x2d62 <LCD_PrintNum+0x6d0>
	 	 {
	 		 x=Num/100000;//124444 ->x=1*
    2b98:	89 a1       	ldd	r24, Y+33	; 0x21
    2b9a:	9a a1       	ldd	r25, Y+34	; 0x22
    2b9c:	ab a1       	ldd	r26, Y+35	; 0x23
    2b9e:	bc a1       	ldd	r27, Y+36	; 0x24
    2ba0:	20 ea       	ldi	r18, 0xA0	; 160
    2ba2:	36 e8       	ldi	r19, 0x86	; 134
    2ba4:	41 e0       	ldi	r20, 0x01	; 1
    2ba6:	50 e0       	ldi	r21, 0x00	; 0
    2ba8:	bc 01       	movw	r22, r24
    2baa:	cd 01       	movw	r24, r26
    2bac:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <__udivmodsi4>
    2bb0:	da 01       	movw	r26, r20
    2bb2:	c9 01       	movw	r24, r18
    2bb4:	8d 8f       	std	Y+29, r24	; 0x1d
    2bb6:	9e 8f       	std	Y+30, r25	; 0x1e
    2bb8:	af 8f       	std	Y+31, r26	; 0x1f
    2bba:	b8 a3       	std	Y+32, r27	; 0x20
	 		 temp=Num%100000;//temp=24444
    2bbc:	89 a1       	ldd	r24, Y+33	; 0x21
    2bbe:	9a a1       	ldd	r25, Y+34	; 0x22
    2bc0:	ab a1       	ldd	r26, Y+35	; 0x23
    2bc2:	bc a1       	ldd	r27, Y+36	; 0x24
    2bc4:	20 ea       	ldi	r18, 0xA0	; 160
    2bc6:	36 e8       	ldi	r19, 0x86	; 134
    2bc8:	41 e0       	ldi	r20, 0x01	; 1
    2bca:	50 e0       	ldi	r21, 0x00	; 0
    2bcc:	bc 01       	movw	r22, r24
    2bce:	cd 01       	movw	r24, r26
    2bd0:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <__udivmodsi4>
    2bd4:	dc 01       	movw	r26, r24
    2bd6:	cb 01       	movw	r24, r22
    2bd8:	89 83       	std	Y+1, r24	; 0x01
    2bda:	9a 83       	std	Y+2, r25	; 0x02
    2bdc:	ab 83       	std	Y+3, r26	; 0x03
    2bde:	bc 83       	std	Y+4, r27	; 0x04
	 		 y=temp/10000;//y=2*
    2be0:	89 81       	ldd	r24, Y+1	; 0x01
    2be2:	9a 81       	ldd	r25, Y+2	; 0x02
    2be4:	ab 81       	ldd	r26, Y+3	; 0x03
    2be6:	bc 81       	ldd	r27, Y+4	; 0x04
    2be8:	20 e1       	ldi	r18, 0x10	; 16
    2bea:	37 e2       	ldi	r19, 0x27	; 39
    2bec:	40 e0       	ldi	r20, 0x00	; 0
    2bee:	50 e0       	ldi	r21, 0x00	; 0
    2bf0:	bc 01       	movw	r22, r24
    2bf2:	cd 01       	movw	r24, r26
    2bf4:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <__udivmodsi4>
    2bf8:	da 01       	movw	r26, r20
    2bfa:	c9 01       	movw	r24, r18
    2bfc:	89 8f       	std	Y+25, r24	; 0x19
    2bfe:	9a 8f       	std	Y+26, r25	; 0x1a
    2c00:	ab 8f       	std	Y+27, r26	; 0x1b
    2c02:	bc 8f       	std	Y+28, r27	; 0x1c
	 		 z=temp%10000;//z=4444
    2c04:	89 81       	ldd	r24, Y+1	; 0x01
    2c06:	9a 81       	ldd	r25, Y+2	; 0x02
    2c08:	ab 81       	ldd	r26, Y+3	; 0x03
    2c0a:	bc 81       	ldd	r27, Y+4	; 0x04
    2c0c:	20 e1       	ldi	r18, 0x10	; 16
    2c0e:	37 e2       	ldi	r19, 0x27	; 39
    2c10:	40 e0       	ldi	r20, 0x00	; 0
    2c12:	50 e0       	ldi	r21, 0x00	; 0
    2c14:	bc 01       	movw	r22, r24
    2c16:	cd 01       	movw	r24, r26
    2c18:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <__udivmodsi4>
    2c1c:	dc 01       	movw	r26, r24
    2c1e:	cb 01       	movw	r24, r22
    2c20:	8d 8b       	std	Y+21, r24	; 0x15
    2c22:	9e 8b       	std	Y+22, r25	; 0x16
    2c24:	af 8b       	std	Y+23, r26	; 0x17
    2c26:	b8 8f       	std	Y+24, r27	; 0x18
	 		 temp=z;// temp=4444
    2c28:	8d 89       	ldd	r24, Y+21	; 0x15
    2c2a:	9e 89       	ldd	r25, Y+22	; 0x16
    2c2c:	af 89       	ldd	r26, Y+23	; 0x17
    2c2e:	b8 8d       	ldd	r27, Y+24	; 0x18
    2c30:	89 83       	std	Y+1, r24	; 0x01
    2c32:	9a 83       	std	Y+2, r25	; 0x02
    2c34:	ab 83       	std	Y+3, r26	; 0x03
    2c36:	bc 83       	std	Y+4, r27	; 0x04
	 		 z=temp/1000;//z=4*
    2c38:	89 81       	ldd	r24, Y+1	; 0x01
    2c3a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c3c:	ab 81       	ldd	r26, Y+3	; 0x03
    2c3e:	bc 81       	ldd	r27, Y+4	; 0x04
    2c40:	28 ee       	ldi	r18, 0xE8	; 232
    2c42:	33 e0       	ldi	r19, 0x03	; 3
    2c44:	40 e0       	ldi	r20, 0x00	; 0
    2c46:	50 e0       	ldi	r21, 0x00	; 0
    2c48:	bc 01       	movw	r22, r24
    2c4a:	cd 01       	movw	r24, r26
    2c4c:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <__udivmodsi4>
    2c50:	da 01       	movw	r26, r20
    2c52:	c9 01       	movw	r24, r18
    2c54:	8d 8b       	std	Y+21, r24	; 0x15
    2c56:	9e 8b       	std	Y+22, r25	; 0x16
    2c58:	af 8b       	std	Y+23, r26	; 0x17
    2c5a:	b8 8f       	std	Y+24, r27	; 0x18
	 		 h=temp%1000;//h=444
    2c5c:	89 81       	ldd	r24, Y+1	; 0x01
    2c5e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c60:	ab 81       	ldd	r26, Y+3	; 0x03
    2c62:	bc 81       	ldd	r27, Y+4	; 0x04
    2c64:	28 ee       	ldi	r18, 0xE8	; 232
    2c66:	33 e0       	ldi	r19, 0x03	; 3
    2c68:	40 e0       	ldi	r20, 0x00	; 0
    2c6a:	50 e0       	ldi	r21, 0x00	; 0
    2c6c:	bc 01       	movw	r22, r24
    2c6e:	cd 01       	movw	r24, r26
    2c70:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <__udivmodsi4>
    2c74:	dc 01       	movw	r26, r24
    2c76:	cb 01       	movw	r24, r22
    2c78:	89 8b       	std	Y+17, r24	; 0x11
    2c7a:	9a 8b       	std	Y+18, r25	; 0x12
    2c7c:	ab 8b       	std	Y+19, r26	; 0x13
    2c7e:	bc 8b       	std	Y+20, r27	; 0x14
	 		 temp=h;
    2c80:	89 89       	ldd	r24, Y+17	; 0x11
    2c82:	9a 89       	ldd	r25, Y+18	; 0x12
    2c84:	ab 89       	ldd	r26, Y+19	; 0x13
    2c86:	bc 89       	ldd	r27, Y+20	; 0x14
    2c88:	89 83       	std	Y+1, r24	; 0x01
    2c8a:	9a 83       	std	Y+2, r25	; 0x02
    2c8c:	ab 83       	std	Y+3, r26	; 0x03
    2c8e:	bc 83       	std	Y+4, r27	; 0x04
	 		 h=temp/100;//h=4
    2c90:	89 81       	ldd	r24, Y+1	; 0x01
    2c92:	9a 81       	ldd	r25, Y+2	; 0x02
    2c94:	ab 81       	ldd	r26, Y+3	; 0x03
    2c96:	bc 81       	ldd	r27, Y+4	; 0x04
    2c98:	24 e6       	ldi	r18, 0x64	; 100
    2c9a:	30 e0       	ldi	r19, 0x00	; 0
    2c9c:	40 e0       	ldi	r20, 0x00	; 0
    2c9e:	50 e0       	ldi	r21, 0x00	; 0
    2ca0:	bc 01       	movw	r22, r24
    2ca2:	cd 01       	movw	r24, r26
    2ca4:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <__udivmodsi4>
    2ca8:	da 01       	movw	r26, r20
    2caa:	c9 01       	movw	r24, r18
    2cac:	89 8b       	std	Y+17, r24	; 0x11
    2cae:	9a 8b       	std	Y+18, r25	; 0x12
    2cb0:	ab 8b       	std	Y+19, r26	; 0x13
    2cb2:	bc 8b       	std	Y+20, r27	; 0x14
			 k=temp%100;//k=44
    2cb4:	89 81       	ldd	r24, Y+1	; 0x01
    2cb6:	9a 81       	ldd	r25, Y+2	; 0x02
    2cb8:	ab 81       	ldd	r26, Y+3	; 0x03
    2cba:	bc 81       	ldd	r27, Y+4	; 0x04
    2cbc:	24 e6       	ldi	r18, 0x64	; 100
    2cbe:	30 e0       	ldi	r19, 0x00	; 0
    2cc0:	40 e0       	ldi	r20, 0x00	; 0
    2cc2:	50 e0       	ldi	r21, 0x00	; 0
    2cc4:	bc 01       	movw	r22, r24
    2cc6:	cd 01       	movw	r24, r26
    2cc8:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <__udivmodsi4>
    2ccc:	dc 01       	movw	r26, r24
    2cce:	cb 01       	movw	r24, r22
    2cd0:	8d 87       	std	Y+13, r24	; 0x0d
    2cd2:	9e 87       	std	Y+14, r25	; 0x0e
    2cd4:	af 87       	std	Y+15, r26	; 0x0f
    2cd6:	b8 8b       	std	Y+16, r27	; 0x10
			 temp=k;
    2cd8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cda:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cdc:	af 85       	ldd	r26, Y+15	; 0x0f
    2cde:	b8 89       	ldd	r27, Y+16	; 0x10
    2ce0:	89 83       	std	Y+1, r24	; 0x01
    2ce2:	9a 83       	std	Y+2, r25	; 0x02
    2ce4:	ab 83       	std	Y+3, r26	; 0x03
    2ce6:	bc 83       	std	Y+4, r27	; 0x04
			 k=temp/10;//k=4
    2ce8:	89 81       	ldd	r24, Y+1	; 0x01
    2cea:	9a 81       	ldd	r25, Y+2	; 0x02
    2cec:	ab 81       	ldd	r26, Y+3	; 0x03
    2cee:	bc 81       	ldd	r27, Y+4	; 0x04
    2cf0:	2a e0       	ldi	r18, 0x0A	; 10
    2cf2:	30 e0       	ldi	r19, 0x00	; 0
    2cf4:	40 e0       	ldi	r20, 0x00	; 0
    2cf6:	50 e0       	ldi	r21, 0x00	; 0
    2cf8:	bc 01       	movw	r22, r24
    2cfa:	cd 01       	movw	r24, r26
    2cfc:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <__udivmodsi4>
    2d00:	da 01       	movw	r26, r20
    2d02:	c9 01       	movw	r24, r18
    2d04:	8d 87       	std	Y+13, r24	; 0x0d
    2d06:	9e 87       	std	Y+14, r25	; 0x0e
    2d08:	af 87       	std	Y+15, r26	; 0x0f
    2d0a:	b8 8b       	std	Y+16, r27	; 0x10
			 L=temp%10;//L=4
    2d0c:	89 81       	ldd	r24, Y+1	; 0x01
    2d0e:	9a 81       	ldd	r25, Y+2	; 0x02
    2d10:	ab 81       	ldd	r26, Y+3	; 0x03
    2d12:	bc 81       	ldd	r27, Y+4	; 0x04
    2d14:	2a e0       	ldi	r18, 0x0A	; 10
    2d16:	30 e0       	ldi	r19, 0x00	; 0
    2d18:	40 e0       	ldi	r20, 0x00	; 0
    2d1a:	50 e0       	ldi	r21, 0x00	; 0
    2d1c:	bc 01       	movw	r22, r24
    2d1e:	cd 01       	movw	r24, r26
    2d20:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <__udivmodsi4>
    2d24:	dc 01       	movw	r26, r24
    2d26:	cb 01       	movw	r24, r22
    2d28:	89 87       	std	Y+9, r24	; 0x09
    2d2a:	9a 87       	std	Y+10, r25	; 0x0a
    2d2c:	ab 87       	std	Y+11, r26	; 0x0b
    2d2e:	bc 87       	std	Y+12, r27	; 0x0c

	 		 Write_data('0'+x);//1
    2d30:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d32:	80 5d       	subi	r24, 0xD0	; 208
    2d34:	0e 94 3c 12 	call	0x2478	; 0x2478 <Write_data>
	 		 Write_data('0'+y);//2
    2d38:	89 8d       	ldd	r24, Y+25	; 0x19
    2d3a:	80 5d       	subi	r24, 0xD0	; 208
    2d3c:	0e 94 3c 12 	call	0x2478	; 0x2478 <Write_data>
	 		 Write_data('0'+z);//4
    2d40:	8d 89       	ldd	r24, Y+21	; 0x15
    2d42:	80 5d       	subi	r24, 0xD0	; 208
    2d44:	0e 94 3c 12 	call	0x2478	; 0x2478 <Write_data>
	 		 Write_data('0'+h);//4
    2d48:	89 89       	ldd	r24, Y+17	; 0x11
    2d4a:	80 5d       	subi	r24, 0xD0	; 208
    2d4c:	0e 94 3c 12 	call	0x2478	; 0x2478 <Write_data>
	 		 Write_data('0'+k);//4
    2d50:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d52:	80 5d       	subi	r24, 0xD0	; 208
    2d54:	0e 94 3c 12 	call	0x2478	; 0x2478 <Write_data>
	 		 Write_data('0'+L);//4
    2d58:	89 85       	ldd	r24, Y+9	; 0x09
    2d5a:	80 5d       	subi	r24, 0xD0	; 208
    2d5c:	0e 94 3c 12 	call	0x2478	; 0x2478 <Write_data>
    2d60:	2e c1       	rjmp	.+604    	; 0x2fbe <LCD_PrintNum+0x92c>

	 	 }
	 else if(Num>=1000000 && Num<=9999999)
    2d62:	89 a1       	ldd	r24, Y+33	; 0x21
    2d64:	9a a1       	ldd	r25, Y+34	; 0x22
    2d66:	ab a1       	ldd	r26, Y+35	; 0x23
    2d68:	bc a1       	ldd	r27, Y+36	; 0x24
    2d6a:	80 34       	cpi	r24, 0x40	; 64
    2d6c:	22 e4       	ldi	r18, 0x42	; 66
    2d6e:	92 07       	cpc	r25, r18
    2d70:	2f e0       	ldi	r18, 0x0F	; 15
    2d72:	a2 07       	cpc	r26, r18
    2d74:	20 e0       	ldi	r18, 0x00	; 0
    2d76:	b2 07       	cpc	r27, r18
    2d78:	08 f4       	brcc	.+2      	; 0x2d7c <LCD_PrintNum+0x6ea>
    2d7a:	21 c1       	rjmp	.+578    	; 0x2fbe <LCD_PrintNum+0x92c>
    2d7c:	89 a1       	ldd	r24, Y+33	; 0x21
    2d7e:	9a a1       	ldd	r25, Y+34	; 0x22
    2d80:	ab a1       	ldd	r26, Y+35	; 0x23
    2d82:	bc a1       	ldd	r27, Y+36	; 0x24
    2d84:	80 38       	cpi	r24, 0x80	; 128
    2d86:	26 e9       	ldi	r18, 0x96	; 150
    2d88:	92 07       	cpc	r25, r18
    2d8a:	28 e9       	ldi	r18, 0x98	; 152
    2d8c:	a2 07       	cpc	r26, r18
    2d8e:	20 e0       	ldi	r18, 0x00	; 0
    2d90:	b2 07       	cpc	r27, r18
    2d92:	08 f0       	brcs	.+2      	; 0x2d96 <LCD_PrintNum+0x704>
    2d94:	14 c1       	rjmp	.+552    	; 0x2fbe <LCD_PrintNum+0x92c>
	 	 {
	 		 x=Num/1000000;//124444 ->x=1*
    2d96:	89 a1       	ldd	r24, Y+33	; 0x21
    2d98:	9a a1       	ldd	r25, Y+34	; 0x22
    2d9a:	ab a1       	ldd	r26, Y+35	; 0x23
    2d9c:	bc a1       	ldd	r27, Y+36	; 0x24
    2d9e:	20 e4       	ldi	r18, 0x40	; 64
    2da0:	32 e4       	ldi	r19, 0x42	; 66
    2da2:	4f e0       	ldi	r20, 0x0F	; 15
    2da4:	50 e0       	ldi	r21, 0x00	; 0
    2da6:	bc 01       	movw	r22, r24
    2da8:	cd 01       	movw	r24, r26
    2daa:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <__udivmodsi4>
    2dae:	da 01       	movw	r26, r20
    2db0:	c9 01       	movw	r24, r18
    2db2:	8d 8f       	std	Y+29, r24	; 0x1d
    2db4:	9e 8f       	std	Y+30, r25	; 0x1e
    2db6:	af 8f       	std	Y+31, r26	; 0x1f
    2db8:	b8 a3       	std	Y+32, r27	; 0x20
	 		 temp=Num%1000000;//temp=24444
    2dba:	89 a1       	ldd	r24, Y+33	; 0x21
    2dbc:	9a a1       	ldd	r25, Y+34	; 0x22
    2dbe:	ab a1       	ldd	r26, Y+35	; 0x23
    2dc0:	bc a1       	ldd	r27, Y+36	; 0x24
    2dc2:	20 e4       	ldi	r18, 0x40	; 64
    2dc4:	32 e4       	ldi	r19, 0x42	; 66
    2dc6:	4f e0       	ldi	r20, 0x0F	; 15
    2dc8:	50 e0       	ldi	r21, 0x00	; 0
    2dca:	bc 01       	movw	r22, r24
    2dcc:	cd 01       	movw	r24, r26
    2dce:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <__udivmodsi4>
    2dd2:	dc 01       	movw	r26, r24
    2dd4:	cb 01       	movw	r24, r22
    2dd6:	89 83       	std	Y+1, r24	; 0x01
    2dd8:	9a 83       	std	Y+2, r25	; 0x02
    2dda:	ab 83       	std	Y+3, r26	; 0x03
    2ddc:	bc 83       	std	Y+4, r27	; 0x04
	 		 y=temp/100000;//y=2*
    2dde:	89 81       	ldd	r24, Y+1	; 0x01
    2de0:	9a 81       	ldd	r25, Y+2	; 0x02
    2de2:	ab 81       	ldd	r26, Y+3	; 0x03
    2de4:	bc 81       	ldd	r27, Y+4	; 0x04
    2de6:	20 ea       	ldi	r18, 0xA0	; 160
    2de8:	36 e8       	ldi	r19, 0x86	; 134
    2dea:	41 e0       	ldi	r20, 0x01	; 1
    2dec:	50 e0       	ldi	r21, 0x00	; 0
    2dee:	bc 01       	movw	r22, r24
    2df0:	cd 01       	movw	r24, r26
    2df2:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <__udivmodsi4>
    2df6:	da 01       	movw	r26, r20
    2df8:	c9 01       	movw	r24, r18
    2dfa:	89 8f       	std	Y+25, r24	; 0x19
    2dfc:	9a 8f       	std	Y+26, r25	; 0x1a
    2dfe:	ab 8f       	std	Y+27, r26	; 0x1b
    2e00:	bc 8f       	std	Y+28, r27	; 0x1c
	 		 z=temp%100000;//z=4444
    2e02:	89 81       	ldd	r24, Y+1	; 0x01
    2e04:	9a 81       	ldd	r25, Y+2	; 0x02
    2e06:	ab 81       	ldd	r26, Y+3	; 0x03
    2e08:	bc 81       	ldd	r27, Y+4	; 0x04
    2e0a:	20 ea       	ldi	r18, 0xA0	; 160
    2e0c:	36 e8       	ldi	r19, 0x86	; 134
    2e0e:	41 e0       	ldi	r20, 0x01	; 1
    2e10:	50 e0       	ldi	r21, 0x00	; 0
    2e12:	bc 01       	movw	r22, r24
    2e14:	cd 01       	movw	r24, r26
    2e16:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <__udivmodsi4>
    2e1a:	dc 01       	movw	r26, r24
    2e1c:	cb 01       	movw	r24, r22
    2e1e:	8d 8b       	std	Y+21, r24	; 0x15
    2e20:	9e 8b       	std	Y+22, r25	; 0x16
    2e22:	af 8b       	std	Y+23, r26	; 0x17
    2e24:	b8 8f       	std	Y+24, r27	; 0x18
	 		 temp=z;// temp=4444
    2e26:	8d 89       	ldd	r24, Y+21	; 0x15
    2e28:	9e 89       	ldd	r25, Y+22	; 0x16
    2e2a:	af 89       	ldd	r26, Y+23	; 0x17
    2e2c:	b8 8d       	ldd	r27, Y+24	; 0x18
    2e2e:	89 83       	std	Y+1, r24	; 0x01
    2e30:	9a 83       	std	Y+2, r25	; 0x02
    2e32:	ab 83       	std	Y+3, r26	; 0x03
    2e34:	bc 83       	std	Y+4, r27	; 0x04
	 		 z=temp/10000;//z=4*
    2e36:	89 81       	ldd	r24, Y+1	; 0x01
    2e38:	9a 81       	ldd	r25, Y+2	; 0x02
    2e3a:	ab 81       	ldd	r26, Y+3	; 0x03
    2e3c:	bc 81       	ldd	r27, Y+4	; 0x04
    2e3e:	20 e1       	ldi	r18, 0x10	; 16
    2e40:	37 e2       	ldi	r19, 0x27	; 39
    2e42:	40 e0       	ldi	r20, 0x00	; 0
    2e44:	50 e0       	ldi	r21, 0x00	; 0
    2e46:	bc 01       	movw	r22, r24
    2e48:	cd 01       	movw	r24, r26
    2e4a:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <__udivmodsi4>
    2e4e:	da 01       	movw	r26, r20
    2e50:	c9 01       	movw	r24, r18
    2e52:	8d 8b       	std	Y+21, r24	; 0x15
    2e54:	9e 8b       	std	Y+22, r25	; 0x16
    2e56:	af 8b       	std	Y+23, r26	; 0x17
    2e58:	b8 8f       	std	Y+24, r27	; 0x18
	 		 h=temp%10000;//h=444
    2e5a:	89 81       	ldd	r24, Y+1	; 0x01
    2e5c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e5e:	ab 81       	ldd	r26, Y+3	; 0x03
    2e60:	bc 81       	ldd	r27, Y+4	; 0x04
    2e62:	20 e1       	ldi	r18, 0x10	; 16
    2e64:	37 e2       	ldi	r19, 0x27	; 39
    2e66:	40 e0       	ldi	r20, 0x00	; 0
    2e68:	50 e0       	ldi	r21, 0x00	; 0
    2e6a:	bc 01       	movw	r22, r24
    2e6c:	cd 01       	movw	r24, r26
    2e6e:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <__udivmodsi4>
    2e72:	dc 01       	movw	r26, r24
    2e74:	cb 01       	movw	r24, r22
    2e76:	89 8b       	std	Y+17, r24	; 0x11
    2e78:	9a 8b       	std	Y+18, r25	; 0x12
    2e7a:	ab 8b       	std	Y+19, r26	; 0x13
    2e7c:	bc 8b       	std	Y+20, r27	; 0x14
	 		 temp=h;
    2e7e:	89 89       	ldd	r24, Y+17	; 0x11
    2e80:	9a 89       	ldd	r25, Y+18	; 0x12
    2e82:	ab 89       	ldd	r26, Y+19	; 0x13
    2e84:	bc 89       	ldd	r27, Y+20	; 0x14
    2e86:	89 83       	std	Y+1, r24	; 0x01
    2e88:	9a 83       	std	Y+2, r25	; 0x02
    2e8a:	ab 83       	std	Y+3, r26	; 0x03
    2e8c:	bc 83       	std	Y+4, r27	; 0x04
	 		 h=temp/1000;//h=4
    2e8e:	89 81       	ldd	r24, Y+1	; 0x01
    2e90:	9a 81       	ldd	r25, Y+2	; 0x02
    2e92:	ab 81       	ldd	r26, Y+3	; 0x03
    2e94:	bc 81       	ldd	r27, Y+4	; 0x04
    2e96:	28 ee       	ldi	r18, 0xE8	; 232
    2e98:	33 e0       	ldi	r19, 0x03	; 3
    2e9a:	40 e0       	ldi	r20, 0x00	; 0
    2e9c:	50 e0       	ldi	r21, 0x00	; 0
    2e9e:	bc 01       	movw	r22, r24
    2ea0:	cd 01       	movw	r24, r26
    2ea2:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <__udivmodsi4>
    2ea6:	da 01       	movw	r26, r20
    2ea8:	c9 01       	movw	r24, r18
    2eaa:	89 8b       	std	Y+17, r24	; 0x11
    2eac:	9a 8b       	std	Y+18, r25	; 0x12
    2eae:	ab 8b       	std	Y+19, r26	; 0x13
    2eb0:	bc 8b       	std	Y+20, r27	; 0x14
			 k=temp%1000;//k=44
    2eb2:	89 81       	ldd	r24, Y+1	; 0x01
    2eb4:	9a 81       	ldd	r25, Y+2	; 0x02
    2eb6:	ab 81       	ldd	r26, Y+3	; 0x03
    2eb8:	bc 81       	ldd	r27, Y+4	; 0x04
    2eba:	28 ee       	ldi	r18, 0xE8	; 232
    2ebc:	33 e0       	ldi	r19, 0x03	; 3
    2ebe:	40 e0       	ldi	r20, 0x00	; 0
    2ec0:	50 e0       	ldi	r21, 0x00	; 0
    2ec2:	bc 01       	movw	r22, r24
    2ec4:	cd 01       	movw	r24, r26
    2ec6:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <__udivmodsi4>
    2eca:	dc 01       	movw	r26, r24
    2ecc:	cb 01       	movw	r24, r22
    2ece:	8d 87       	std	Y+13, r24	; 0x0d
    2ed0:	9e 87       	std	Y+14, r25	; 0x0e
    2ed2:	af 87       	std	Y+15, r26	; 0x0f
    2ed4:	b8 8b       	std	Y+16, r27	; 0x10
			 temp=k;
    2ed6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ed8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eda:	af 85       	ldd	r26, Y+15	; 0x0f
    2edc:	b8 89       	ldd	r27, Y+16	; 0x10
    2ede:	89 83       	std	Y+1, r24	; 0x01
    2ee0:	9a 83       	std	Y+2, r25	; 0x02
    2ee2:	ab 83       	std	Y+3, r26	; 0x03
    2ee4:	bc 83       	std	Y+4, r27	; 0x04
			 k=temp/100;//k=4
    2ee6:	89 81       	ldd	r24, Y+1	; 0x01
    2ee8:	9a 81       	ldd	r25, Y+2	; 0x02
    2eea:	ab 81       	ldd	r26, Y+3	; 0x03
    2eec:	bc 81       	ldd	r27, Y+4	; 0x04
    2eee:	24 e6       	ldi	r18, 0x64	; 100
    2ef0:	30 e0       	ldi	r19, 0x00	; 0
    2ef2:	40 e0       	ldi	r20, 0x00	; 0
    2ef4:	50 e0       	ldi	r21, 0x00	; 0
    2ef6:	bc 01       	movw	r22, r24
    2ef8:	cd 01       	movw	r24, r26
    2efa:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <__udivmodsi4>
    2efe:	da 01       	movw	r26, r20
    2f00:	c9 01       	movw	r24, r18
    2f02:	8d 87       	std	Y+13, r24	; 0x0d
    2f04:	9e 87       	std	Y+14, r25	; 0x0e
    2f06:	af 87       	std	Y+15, r26	; 0x0f
    2f08:	b8 8b       	std	Y+16, r27	; 0x10
			 L=temp%100;//L=4
    2f0a:	89 81       	ldd	r24, Y+1	; 0x01
    2f0c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f0e:	ab 81       	ldd	r26, Y+3	; 0x03
    2f10:	bc 81       	ldd	r27, Y+4	; 0x04
    2f12:	24 e6       	ldi	r18, 0x64	; 100
    2f14:	30 e0       	ldi	r19, 0x00	; 0
    2f16:	40 e0       	ldi	r20, 0x00	; 0
    2f18:	50 e0       	ldi	r21, 0x00	; 0
    2f1a:	bc 01       	movw	r22, r24
    2f1c:	cd 01       	movw	r24, r26
    2f1e:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <__udivmodsi4>
    2f22:	dc 01       	movw	r26, r24
    2f24:	cb 01       	movw	r24, r22
    2f26:	89 87       	std	Y+9, r24	; 0x09
    2f28:	9a 87       	std	Y+10, r25	; 0x0a
    2f2a:	ab 87       	std	Y+11, r26	; 0x0b
    2f2c:	bc 87       	std	Y+12, r27	; 0x0c
			 temp=L;
    2f2e:	89 85       	ldd	r24, Y+9	; 0x09
    2f30:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f32:	ab 85       	ldd	r26, Y+11	; 0x0b
    2f34:	bc 85       	ldd	r27, Y+12	; 0x0c
    2f36:	89 83       	std	Y+1, r24	; 0x01
    2f38:	9a 83       	std	Y+2, r25	; 0x02
    2f3a:	ab 83       	std	Y+3, r26	; 0x03
    2f3c:	bc 83       	std	Y+4, r27	; 0x04
			 L=temp/10;
    2f3e:	89 81       	ldd	r24, Y+1	; 0x01
    2f40:	9a 81       	ldd	r25, Y+2	; 0x02
    2f42:	ab 81       	ldd	r26, Y+3	; 0x03
    2f44:	bc 81       	ldd	r27, Y+4	; 0x04
    2f46:	2a e0       	ldi	r18, 0x0A	; 10
    2f48:	30 e0       	ldi	r19, 0x00	; 0
    2f4a:	40 e0       	ldi	r20, 0x00	; 0
    2f4c:	50 e0       	ldi	r21, 0x00	; 0
    2f4e:	bc 01       	movw	r22, r24
    2f50:	cd 01       	movw	r24, r26
    2f52:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <__udivmodsi4>
    2f56:	da 01       	movw	r26, r20
    2f58:	c9 01       	movw	r24, r18
    2f5a:	89 87       	std	Y+9, r24	; 0x09
    2f5c:	9a 87       	std	Y+10, r25	; 0x0a
    2f5e:	ab 87       	std	Y+11, r26	; 0x0b
    2f60:	bc 87       	std	Y+12, r27	; 0x0c
			 m=temp%10;
    2f62:	89 81       	ldd	r24, Y+1	; 0x01
    2f64:	9a 81       	ldd	r25, Y+2	; 0x02
    2f66:	ab 81       	ldd	r26, Y+3	; 0x03
    2f68:	bc 81       	ldd	r27, Y+4	; 0x04
    2f6a:	2a e0       	ldi	r18, 0x0A	; 10
    2f6c:	30 e0       	ldi	r19, 0x00	; 0
    2f6e:	40 e0       	ldi	r20, 0x00	; 0
    2f70:	50 e0       	ldi	r21, 0x00	; 0
    2f72:	bc 01       	movw	r22, r24
    2f74:	cd 01       	movw	r24, r26
    2f76:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <__udivmodsi4>
    2f7a:	dc 01       	movw	r26, r24
    2f7c:	cb 01       	movw	r24, r22
    2f7e:	8d 83       	std	Y+5, r24	; 0x05
    2f80:	9e 83       	std	Y+6, r25	; 0x06
    2f82:	af 83       	std	Y+7, r26	; 0x07
    2f84:	b8 87       	std	Y+8, r27	; 0x08

	 		 Write_data('0'+x);//1
    2f86:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f88:	80 5d       	subi	r24, 0xD0	; 208
    2f8a:	0e 94 3c 12 	call	0x2478	; 0x2478 <Write_data>
	 		 Write_data('0'+y);//2
    2f8e:	89 8d       	ldd	r24, Y+25	; 0x19
    2f90:	80 5d       	subi	r24, 0xD0	; 208
    2f92:	0e 94 3c 12 	call	0x2478	; 0x2478 <Write_data>
	 		 Write_data('0'+z);//3
    2f96:	8d 89       	ldd	r24, Y+21	; 0x15
    2f98:	80 5d       	subi	r24, 0xD0	; 208
    2f9a:	0e 94 3c 12 	call	0x2478	; 0x2478 <Write_data>
	 		 Write_data('0'+h);//4
    2f9e:	89 89       	ldd	r24, Y+17	; 0x11
    2fa0:	80 5d       	subi	r24, 0xD0	; 208
    2fa2:	0e 94 3c 12 	call	0x2478	; 0x2478 <Write_data>
	 		 Write_data('0'+k);//5
    2fa6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fa8:	80 5d       	subi	r24, 0xD0	; 208
    2faa:	0e 94 3c 12 	call	0x2478	; 0x2478 <Write_data>
	 		 Write_data('0'+L);//6
    2fae:	89 85       	ldd	r24, Y+9	; 0x09
    2fb0:	80 5d       	subi	r24, 0xD0	; 208
    2fb2:	0e 94 3c 12 	call	0x2478	; 0x2478 <Write_data>
	 		 Write_data('0'+m);//7
    2fb6:	8d 81       	ldd	r24, Y+5	; 0x05
    2fb8:	80 5d       	subi	r24, 0xD0	; 208
    2fba:	0e 94 3c 12 	call	0x2478	; 0x2478 <Write_data>

	 	 }

 }
    2fbe:	a4 96       	adiw	r28, 0x24	; 36
    2fc0:	0f b6       	in	r0, 0x3f	; 63
    2fc2:	f8 94       	cli
    2fc4:	de bf       	out	0x3e, r29	; 62
    2fc6:	0f be       	out	0x3f, r0	; 63
    2fc8:	cd bf       	out	0x3d, r28	; 61
    2fca:	cf 91       	pop	r28
    2fcc:	df 91       	pop	r29
    2fce:	08 95       	ret

00002fd0 <LCD_WriteString>:
//
//
//}

void LCD_WriteString(u8* Data)
{
    2fd0:	df 93       	push	r29
    2fd2:	cf 93       	push	r28
    2fd4:	cd b7       	in	r28, 0x3d	; 61
    2fd6:	de b7       	in	r29, 0x3e	; 62
    2fd8:	61 97       	sbiw	r28, 0x11	; 17
    2fda:	0f b6       	in	r0, 0x3f	; 63
    2fdc:	f8 94       	cli
    2fde:	de bf       	out	0x3e, r29	; 62
    2fe0:	0f be       	out	0x3f, r0	; 63
    2fe2:	cd bf       	out	0x3d, r28	; 61
    2fe4:	99 8b       	std	Y+17, r25	; 0x11
    2fe6:	88 8b       	std	Y+16, r24	; 0x10
	 u8 i=0;
    2fe8:	1f 86       	std	Y+15, r1	; 0x0f
    2fea:	80 c0       	rjmp	.+256    	; 0x30ec <LCD_WriteString+0x11c>

	    while(Data[i]!='\0')
	    {
	    	Write_data(Data[i]);
    2fec:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fee:	28 2f       	mov	r18, r24
    2ff0:	30 e0       	ldi	r19, 0x00	; 0
    2ff2:	88 89       	ldd	r24, Y+16	; 0x10
    2ff4:	99 89       	ldd	r25, Y+17	; 0x11
    2ff6:	fc 01       	movw	r30, r24
    2ff8:	e2 0f       	add	r30, r18
    2ffa:	f3 1f       	adc	r31, r19
    2ffc:	80 81       	ld	r24, Z
    2ffe:	0e 94 3c 12 	call	0x2478	; 0x2478 <Write_data>
    3002:	80 e0       	ldi	r24, 0x00	; 0
    3004:	90 e0       	ldi	r25, 0x00	; 0
    3006:	a0 e0       	ldi	r26, 0x00	; 0
    3008:	b0 e4       	ldi	r27, 0x40	; 64
    300a:	8b 87       	std	Y+11, r24	; 0x0b
    300c:	9c 87       	std	Y+12, r25	; 0x0c
    300e:	ad 87       	std	Y+13, r26	; 0x0d
    3010:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3012:	6b 85       	ldd	r22, Y+11	; 0x0b
    3014:	7c 85       	ldd	r23, Y+12	; 0x0c
    3016:	8d 85       	ldd	r24, Y+13	; 0x0d
    3018:	9e 85       	ldd	r25, Y+14	; 0x0e
    301a:	20 e0       	ldi	r18, 0x00	; 0
    301c:	30 e0       	ldi	r19, 0x00	; 0
    301e:	4a ef       	ldi	r20, 0xFA	; 250
    3020:	54 e4       	ldi	r21, 0x44	; 68
    3022:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3026:	dc 01       	movw	r26, r24
    3028:	cb 01       	movw	r24, r22
    302a:	8f 83       	std	Y+7, r24	; 0x07
    302c:	98 87       	std	Y+8, r25	; 0x08
    302e:	a9 87       	std	Y+9, r26	; 0x09
    3030:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3032:	6f 81       	ldd	r22, Y+7	; 0x07
    3034:	78 85       	ldd	r23, Y+8	; 0x08
    3036:	89 85       	ldd	r24, Y+9	; 0x09
    3038:	9a 85       	ldd	r25, Y+10	; 0x0a
    303a:	20 e0       	ldi	r18, 0x00	; 0
    303c:	30 e0       	ldi	r19, 0x00	; 0
    303e:	40 e8       	ldi	r20, 0x80	; 128
    3040:	5f e3       	ldi	r21, 0x3F	; 63
    3042:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3046:	88 23       	and	r24, r24
    3048:	2c f4       	brge	.+10     	; 0x3054 <LCD_WriteString+0x84>
		__ticks = 1;
    304a:	81 e0       	ldi	r24, 0x01	; 1
    304c:	90 e0       	ldi	r25, 0x00	; 0
    304e:	9e 83       	std	Y+6, r25	; 0x06
    3050:	8d 83       	std	Y+5, r24	; 0x05
    3052:	3f c0       	rjmp	.+126    	; 0x30d2 <LCD_WriteString+0x102>
	else if (__tmp > 65535)
    3054:	6f 81       	ldd	r22, Y+7	; 0x07
    3056:	78 85       	ldd	r23, Y+8	; 0x08
    3058:	89 85       	ldd	r24, Y+9	; 0x09
    305a:	9a 85       	ldd	r25, Y+10	; 0x0a
    305c:	20 e0       	ldi	r18, 0x00	; 0
    305e:	3f ef       	ldi	r19, 0xFF	; 255
    3060:	4f e7       	ldi	r20, 0x7F	; 127
    3062:	57 e4       	ldi	r21, 0x47	; 71
    3064:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3068:	18 16       	cp	r1, r24
    306a:	4c f5       	brge	.+82     	; 0x30be <LCD_WriteString+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    306c:	6b 85       	ldd	r22, Y+11	; 0x0b
    306e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3070:	8d 85       	ldd	r24, Y+13	; 0x0d
    3072:	9e 85       	ldd	r25, Y+14	; 0x0e
    3074:	20 e0       	ldi	r18, 0x00	; 0
    3076:	30 e0       	ldi	r19, 0x00	; 0
    3078:	40 e2       	ldi	r20, 0x20	; 32
    307a:	51 e4       	ldi	r21, 0x41	; 65
    307c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3080:	dc 01       	movw	r26, r24
    3082:	cb 01       	movw	r24, r22
    3084:	bc 01       	movw	r22, r24
    3086:	cd 01       	movw	r24, r26
    3088:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    308c:	dc 01       	movw	r26, r24
    308e:	cb 01       	movw	r24, r22
    3090:	9e 83       	std	Y+6, r25	; 0x06
    3092:	8d 83       	std	Y+5, r24	; 0x05
    3094:	0f c0       	rjmp	.+30     	; 0x30b4 <LCD_WriteString+0xe4>
    3096:	88 ec       	ldi	r24, 0xC8	; 200
    3098:	90 e0       	ldi	r25, 0x00	; 0
    309a:	9c 83       	std	Y+4, r25	; 0x04
    309c:	8b 83       	std	Y+3, r24	; 0x03
    309e:	8b 81       	ldd	r24, Y+3	; 0x03
    30a0:	9c 81       	ldd	r25, Y+4	; 0x04
    30a2:	01 97       	sbiw	r24, 0x01	; 1
    30a4:	f1 f7       	brne	.-4      	; 0x30a2 <LCD_WriteString+0xd2>
    30a6:	9c 83       	std	Y+4, r25	; 0x04
    30a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30aa:	8d 81       	ldd	r24, Y+5	; 0x05
    30ac:	9e 81       	ldd	r25, Y+6	; 0x06
    30ae:	01 97       	sbiw	r24, 0x01	; 1
    30b0:	9e 83       	std	Y+6, r25	; 0x06
    30b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30b4:	8d 81       	ldd	r24, Y+5	; 0x05
    30b6:	9e 81       	ldd	r25, Y+6	; 0x06
    30b8:	00 97       	sbiw	r24, 0x00	; 0
    30ba:	69 f7       	brne	.-38     	; 0x3096 <LCD_WriteString+0xc6>
    30bc:	14 c0       	rjmp	.+40     	; 0x30e6 <LCD_WriteString+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30be:	6f 81       	ldd	r22, Y+7	; 0x07
    30c0:	78 85       	ldd	r23, Y+8	; 0x08
    30c2:	89 85       	ldd	r24, Y+9	; 0x09
    30c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    30c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ca:	dc 01       	movw	r26, r24
    30cc:	cb 01       	movw	r24, r22
    30ce:	9e 83       	std	Y+6, r25	; 0x06
    30d0:	8d 83       	std	Y+5, r24	; 0x05
    30d2:	8d 81       	ldd	r24, Y+5	; 0x05
    30d4:	9e 81       	ldd	r25, Y+6	; 0x06
    30d6:	9a 83       	std	Y+2, r25	; 0x02
    30d8:	89 83       	std	Y+1, r24	; 0x01
    30da:	89 81       	ldd	r24, Y+1	; 0x01
    30dc:	9a 81       	ldd	r25, Y+2	; 0x02
    30de:	01 97       	sbiw	r24, 0x01	; 1
    30e0:	f1 f7       	brne	.-4      	; 0x30de <LCD_WriteString+0x10e>
    30e2:	9a 83       	std	Y+2, r25	; 0x02
    30e4:	89 83       	std	Y+1, r24	; 0x01
	    	_delay_ms(2);
	        i++;
    30e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    30e8:	8f 5f       	subi	r24, 0xFF	; 255
    30ea:	8f 87       	std	Y+15, r24	; 0x0f

void LCD_WriteString(u8* Data)
{
	 u8 i=0;

	    while(Data[i]!='\0')
    30ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    30ee:	28 2f       	mov	r18, r24
    30f0:	30 e0       	ldi	r19, 0x00	; 0
    30f2:	88 89       	ldd	r24, Y+16	; 0x10
    30f4:	99 89       	ldd	r25, Y+17	; 0x11
    30f6:	fc 01       	movw	r30, r24
    30f8:	e2 0f       	add	r30, r18
    30fa:	f3 1f       	adc	r31, r19
    30fc:	80 81       	ld	r24, Z
    30fe:	88 23       	and	r24, r24
    3100:	09 f0       	breq	.+2      	; 0x3104 <LCD_WriteString+0x134>
    3102:	74 cf       	rjmp	.-280    	; 0x2fec <LCD_WriteString+0x1c>
	    {
	    	Write_data(Data[i]);
	    	_delay_ms(2);
	        i++;
	    }
}
    3104:	61 96       	adiw	r28, 0x11	; 17
    3106:	0f b6       	in	r0, 0x3f	; 63
    3108:	f8 94       	cli
    310a:	de bf       	out	0x3e, r29	; 62
    310c:	0f be       	out	0x3f, r0	; 63
    310e:	cd bf       	out	0x3d, r28	; 61
    3110:	cf 91       	pop	r28
    3112:	df 91       	pop	r29
    3114:	08 95       	ret

00003116 <TIMER0_int>:
 Flag=1 Desired time=ovf time ~~ Flag=2 Desired time<ovf time ~~ Flag=3 Desired time > ovf time*/
static u8 TIMER0_State_Flag=0;
/* TIMER0 Init*/
#if (TIMER0_Control == TIMER0_Enable)
	void TIMER0_int(void)
	{
    3116:	df 93       	push	r29
    3118:	cf 93       	push	r28
    311a:	cd b7       	in	r28, 0x3d	; 61
    311c:	de b7       	in	r29, 0x3e	; 62
    311e:	62 97       	sbiw	r28, 0x12	; 18
    3120:	0f b6       	in	r0, 0x3f	; 63
    3122:	f8 94       	cli
    3124:	de bf       	out	0x3e, r29	; 62
    3126:	0f be       	out	0x3f, r0	; 63
    3128:	cd bf       	out	0x3d, r28	; 61
		u16 TIMER0_prescaler_switch;
		u16 TimeOVF0=256,TimeOVF1=2048,TimeOVF2=8192,TimeOVF3=32768;
    312a:	80 e0       	ldi	r24, 0x00	; 0
    312c:	91 e0       	ldi	r25, 0x01	; 1
    312e:	98 8b       	std	Y+16, r25	; 0x10
    3130:	8f 87       	std	Y+15, r24	; 0x0f
    3132:	80 e0       	ldi	r24, 0x00	; 0
    3134:	98 e0       	ldi	r25, 0x08	; 8
    3136:	9e 87       	std	Y+14, r25	; 0x0e
    3138:	8d 87       	std	Y+13, r24	; 0x0d
    313a:	80 e0       	ldi	r24, 0x00	; 0
    313c:	90 e2       	ldi	r25, 0x20	; 32
    313e:	9c 87       	std	Y+12, r25	; 0x0c
    3140:	8b 87       	std	Y+11, r24	; 0x0b
    3142:	80 e0       	ldi	r24, 0x00	; 0
    3144:	90 e8       	ldi	r25, 0x80	; 128
    3146:	9a 87       	std	Y+10, r25	; 0x0a
    3148:	89 87       	std	Y+9, r24	; 0x09
		u32 Desired_TimeInMicroSeconds=0,Temp_PartOfOVF=0;
    314a:	1d 82       	std	Y+5, r1	; 0x05
    314c:	1e 82       	std	Y+6, r1	; 0x06
    314e:	1f 82       	std	Y+7, r1	; 0x07
    3150:	18 86       	std	Y+8, r1	; 0x08
    3152:	19 82       	std	Y+1, r1	; 0x01
    3154:	1a 82       	std	Y+2, r1	; 0x02
    3156:	1b 82       	std	Y+3, r1	; 0x03
    3158:	1c 82       	std	Y+4, r1	; 0x04
		set_bit(TCCR0,6);
	#elif TIMER0_Mode == TIMER0_CTC_Mode
		set_bit(TCCR0,3);
		clr_bit(TCCR0,6);
	#elif TIMER0_Mode == TIMER0_FAST_PWM_Mode
		set_bit(TCCR0,3);
    315a:	a3 e5       	ldi	r26, 0x53	; 83
    315c:	b0 e0       	ldi	r27, 0x00	; 0
    315e:	e3 e5       	ldi	r30, 0x53	; 83
    3160:	f0 e0       	ldi	r31, 0x00	; 0
    3162:	80 81       	ld	r24, Z
    3164:	88 60       	ori	r24, 0x08	; 8
    3166:	8c 93       	st	X, r24
		set_bit(TCCR0,6);
    3168:	a3 e5       	ldi	r26, 0x53	; 83
    316a:	b0 e0       	ldi	r27, 0x00	; 0
    316c:	e3 e5       	ldi	r30, 0x53	; 83
    316e:	f0 e0       	ldi	r31, 0x00	; 0
    3170:	80 81       	ld	r24, Z
    3172:	80 64       	ori	r24, 0x40	; 64
    3174:	8c 93       	st	X, r24
		clr_bit(TCCR0,5);
		#elif(TIMER0_FAST_PWM_Mode_Selection == TIMER0_FAST_PWM_Reversed)
		set_bit(TCCR0,4);
		clr_bit(TCCR0,5);
		#elif(TIMER0_FAST_PWM_Mode_Selection == TIMER0_FAST_PWM_CLR_OC0_On_Match)
		clr_bit(TCCR0,4);
    3176:	a3 e5       	ldi	r26, 0x53	; 83
    3178:	b0 e0       	ldi	r27, 0x00	; 0
    317a:	e3 e5       	ldi	r30, 0x53	; 83
    317c:	f0 e0       	ldi	r31, 0x00	; 0
    317e:	80 81       	ld	r24, Z
    3180:	8f 7e       	andi	r24, 0xEF	; 239
    3182:	8c 93       	st	X, r24
		set_bit(TCCR0,5);
    3184:	a3 e5       	ldi	r26, 0x53	; 83
    3186:	b0 e0       	ldi	r27, 0x00	; 0
    3188:	e3 e5       	ldi	r30, 0x53	; 83
    318a:	f0 e0       	ldi	r31, 0x00	; 0
    318c:	80 81       	ld	r24, Z
    318e:	80 62       	ori	r24, 0x20	; 32
    3190:	8c 93       	st	X, r24
	#endif
		/* Enabling OverFlow Interrupt */
	#if TIMER0_OVF_INT == TIMER0_OVF_INT_ON
		set_bit(TIMSK,0);
	#elif TIMER0_OVF_INT == TIMER0_OVF_INT_OFF
		clr_bit(TIMSK,0);
    3192:	a9 e5       	ldi	r26, 0x59	; 89
    3194:	b0 e0       	ldi	r27, 0x00	; 0
    3196:	e9 e5       	ldi	r30, 0x59	; 89
    3198:	f0 e0       	ldi	r31, 0x00	; 0
    319a:	80 81       	ld	r24, Z
    319c:	8e 7f       	andi	r24, 0xFE	; 254
    319e:	8c 93       	st	X, r24
	#endif
		/* Enabling CTC Interrupt */
	#if TIMER0_CTC_INT == TIMER0_CTC_INT_ON
		set_bit(TIMSK,1);
	#elif TIMER0_CTC_INT == TIMER0_CTC_INT_OFF
		clr_bit(TIMSK,1);
    31a0:	a9 e5       	ldi	r26, 0x59	; 89
    31a2:	b0 e0       	ldi	r27, 0x00	; 0
    31a4:	e9 e5       	ldi	r30, 0x59	; 89
    31a6:	f0 e0       	ldi	r31, 0x00	; 0
    31a8:	80 81       	ld	r24, Z
    31aa:	8d 7f       	andi	r24, 0xFD	; 253
    31ac:	8c 93       	st	X, r24
	#endif
	TCNT0=TIMER0_Preload_Value;
    31ae:	e2 e5       	ldi	r30, 0x52	; 82
    31b0:	f0 e0       	ldi	r31, 0x00	; 0
    31b2:	80 91 27 05 	lds	r24, 0x0527
    31b6:	90 91 28 05 	lds	r25, 0x0528
    31ba:	a0 91 29 05 	lds	r26, 0x0529
    31be:	b0 91 2a 05 	lds	r27, 0x052A
    31c2:	80 83       	st	Z, r24
//	#elif TIMER0_Prescaler == TIMER0_Prescale_1024
//				set_bit(TCCR0,0);
//				set_bit(TCCR0,1);
//				clr_bit(TCCR0,2);
//	#endif
	}
    31c4:	62 96       	adiw	r28, 0x12	; 18
    31c6:	0f b6       	in	r0, 0x3f	; 63
    31c8:	f8 94       	cli
    31ca:	de bf       	out	0x3e, r29	; 62
    31cc:	0f be       	out	0x3f, r0	; 63
    31ce:	cd bf       	out	0x3d, r28	; 61
    31d0:	cf 91       	pop	r28
    31d2:	df 91       	pop	r29
    31d4:	08 95       	ret

000031d6 <TIMER0_FAST_PWM_DutyCycle>:
#endif
void TIMER0_FAST_PWM_DutyCycle(u8 DutyCycle_Percentage)
{
    31d6:	df 93       	push	r29
    31d8:	cf 93       	push	r28
    31da:	0f 92       	push	r0
    31dc:	cd b7       	in	r28, 0x3d	; 61
    31de:	de b7       	in	r29, 0x3e	; 62
    31e0:	89 83       	std	Y+1, r24	; 0x01
	if(DutyCycle_Percentage==0)
    31e2:	89 81       	ldd	r24, Y+1	; 0x01
    31e4:	88 23       	and	r24, r24
    31e6:	21 f4       	brne	.+8      	; 0x31f0 <TIMER0_FAST_PWM_DutyCycle+0x1a>
	{
		OCR0=0;
    31e8:	ec e5       	ldi	r30, 0x5C	; 92
    31ea:	f0 e0       	ldi	r31, 0x00	; 0
    31ec:	10 82       	st	Z, r1
    31ee:	0f c0       	rjmp	.+30     	; 0x320e <TIMER0_FAST_PWM_DutyCycle+0x38>
	}
	else if(DutyCycle_Percentage==100)
    31f0:	89 81       	ldd	r24, Y+1	; 0x01
    31f2:	84 36       	cpi	r24, 0x64	; 100
    31f4:	29 f4       	brne	.+10     	; 0x3200 <TIMER0_FAST_PWM_DutyCycle+0x2a>
	{
		OCR0=255;
    31f6:	ec e5       	ldi	r30, 0x5C	; 92
    31f8:	f0 e0       	ldi	r31, 0x00	; 0
    31fa:	8f ef       	ldi	r24, 0xFF	; 255
    31fc:	80 83       	st	Z, r24
    31fe:	07 c0       	rjmp	.+14     	; 0x320e <TIMER0_FAST_PWM_DutyCycle+0x38>
	}
	else if(DutyCycle_Percentage==50)
    3200:	89 81       	ldd	r24, Y+1	; 0x01
    3202:	82 33       	cpi	r24, 0x32	; 50
    3204:	21 f4       	brne	.+8      	; 0x320e <TIMER0_FAST_PWM_DutyCycle+0x38>
	{
		OCR0 = 127;//2.55 is (10*255-TIMER0 resolution)/1000 wel 10 3shan nkbr el rkm ykon akbr mel > 1
    3206:	ec e5       	ldi	r30, 0x5C	; 92
    3208:	f0 e0       	ldi	r31, 0x00	; 0
    320a:	8f e7       	ldi	r24, 0x7F	; 127
    320c:	80 83       	st	Z, r24

	}
}
    320e:	0f 90       	pop	r0
    3210:	cf 91       	pop	r28
    3212:	df 91       	pop	r29
    3214:	08 95       	ret

00003216 <TIMER0_Start>:
void TIMER0_Start(void)
{
    3216:	df 93       	push	r29
    3218:	cf 93       	push	r28
    321a:	cd b7       	in	r28, 0x3d	; 61
    321c:	de b7       	in	r29, 0x3e	; 62
	clr_bit(TCCR0,0);
    321e:	a3 e5       	ldi	r26, 0x53	; 83
    3220:	b0 e0       	ldi	r27, 0x00	; 0
    3222:	e3 e5       	ldi	r30, 0x53	; 83
    3224:	f0 e0       	ldi	r31, 0x00	; 0
    3226:	80 81       	ld	r24, Z
    3228:	8e 7f       	andi	r24, 0xFE	; 254
    322a:	8c 93       	st	X, r24
	set_bit(TCCR0,1);
    322c:	a3 e5       	ldi	r26, 0x53	; 83
    322e:	b0 e0       	ldi	r27, 0x00	; 0
    3230:	e3 e5       	ldi	r30, 0x53	; 83
    3232:	f0 e0       	ldi	r31, 0x00	; 0
    3234:	80 81       	ld	r24, Z
    3236:	82 60       	ori	r24, 0x02	; 2
    3238:	8c 93       	st	X, r24
	clr_bit(TCCR0,2);
    323a:	a3 e5       	ldi	r26, 0x53	; 83
    323c:	b0 e0       	ldi	r27, 0x00	; 0
    323e:	e3 e5       	ldi	r30, 0x53	; 83
    3240:	f0 e0       	ldi	r31, 0x00	; 0
    3242:	80 81       	ld	r24, Z
    3244:	8b 7f       	andi	r24, 0xFB	; 251
    3246:	8c 93       	st	X, r24
}
    3248:	cf 91       	pop	r28
    324a:	df 91       	pop	r29
    324c:	08 95       	ret

0000324e <TIMER0_Stop>:
void TIMER0_Stop(void)
{
    324e:	df 93       	push	r29
    3250:	cf 93       	push	r28
    3252:	cd b7       	in	r28, 0x3d	; 61
    3254:	de b7       	in	r29, 0x3e	; 62
	clr_bit(TCCR0,0);
    3256:	a3 e5       	ldi	r26, 0x53	; 83
    3258:	b0 e0       	ldi	r27, 0x00	; 0
    325a:	e3 e5       	ldi	r30, 0x53	; 83
    325c:	f0 e0       	ldi	r31, 0x00	; 0
    325e:	80 81       	ld	r24, Z
    3260:	8e 7f       	andi	r24, 0xFE	; 254
    3262:	8c 93       	st	X, r24
	clr_bit(TCCR0,1);
    3264:	a3 e5       	ldi	r26, 0x53	; 83
    3266:	b0 e0       	ldi	r27, 0x00	; 0
    3268:	e3 e5       	ldi	r30, 0x53	; 83
    326a:	f0 e0       	ldi	r31, 0x00	; 0
    326c:	80 81       	ld	r24, Z
    326e:	8d 7f       	andi	r24, 0xFD	; 253
    3270:	8c 93       	st	X, r24
	clr_bit(TCCR0,2);
    3272:	a3 e5       	ldi	r26, 0x53	; 83
    3274:	b0 e0       	ldi	r27, 0x00	; 0
    3276:	e3 e5       	ldi	r30, 0x53	; 83
    3278:	f0 e0       	ldi	r31, 0x00	; 0
    327a:	80 81       	ld	r24, Z
    327c:	8b 7f       	andi	r24, 0xFB	; 251
    327e:	8c 93       	st	X, r24
}
    3280:	cf 91       	pop	r28
    3282:	df 91       	pop	r29
    3284:	08 95       	ret

00003286 <TIMER1_int>:
/* TIMER1 Init */
#if ( TIMER1_Control == TIMER1_Enable)
	void TIMER1_int(void)
	{
    3286:	df 93       	push	r29
    3288:	cf 93       	push	r28
    328a:	cd b7       	in	r28, 0x3d	; 61
    328c:	de b7       	in	r29, 0x3e	; 62
			clr_bit(TCCR1A,0);
			clr_bit(TCCR1A,1);
			set_bit(TCCR1B,3);
			set_bit(TCCR1B,4);
	#elif  	(TIMER1_Mode == TIMER1_FAST_PWM_Mode_ICR1 )//14
			clr_bit(TCCR1A,0);
    328e:	af e4       	ldi	r26, 0x4F	; 79
    3290:	b0 e0       	ldi	r27, 0x00	; 0
    3292:	ef e4       	ldi	r30, 0x4F	; 79
    3294:	f0 e0       	ldi	r31, 0x00	; 0
    3296:	80 81       	ld	r24, Z
    3298:	8e 7f       	andi	r24, 0xFE	; 254
    329a:	8c 93       	st	X, r24
			set_bit(TCCR1A,1);
    329c:	af e4       	ldi	r26, 0x4F	; 79
    329e:	b0 e0       	ldi	r27, 0x00	; 0
    32a0:	ef e4       	ldi	r30, 0x4F	; 79
    32a2:	f0 e0       	ldi	r31, 0x00	; 0
    32a4:	80 81       	ld	r24, Z
    32a6:	82 60       	ori	r24, 0x02	; 2
    32a8:	8c 93       	st	X, r24
			set_bit(TCCR1B,3);
    32aa:	ae e4       	ldi	r26, 0x4E	; 78
    32ac:	b0 e0       	ldi	r27, 0x00	; 0
    32ae:	ee e4       	ldi	r30, 0x4E	; 78
    32b0:	f0 e0       	ldi	r31, 0x00	; 0
    32b2:	80 81       	ld	r24, Z
    32b4:	88 60       	ori	r24, 0x08	; 8
    32b6:	8c 93       	st	X, r24
			set_bit(TCCR1B,4);
    32b8:	ae e4       	ldi	r26, 0x4E	; 78
    32ba:	b0 e0       	ldi	r27, 0x00	; 0
    32bc:	ee e4       	ldi	r30, 0x4E	; 78
    32be:	f0 e0       	ldi	r31, 0x00	; 0
    32c0:	80 81       	ld	r24, Z
    32c2:	80 61       	ori	r24, 0x10	; 16
    32c4:	8c 93       	st	X, r24
			clr_bit(TCCR1A,7);
			#elif(TIMER1_FAST_PWM_Mode_Selection == TIMER1_FAST_PWM_Reversed)
			set_bit(TCCR1A,6);
			clr_bit(TCCR1A,7);
			#elif(TIMER1_FAST_PWM_Mode_Selection == TIMER1_FAST_PWM_CLR_OC1_On_Match)
			clr_bit(TCCR1A,6);
    32c6:	af e4       	ldi	r26, 0x4F	; 79
    32c8:	b0 e0       	ldi	r27, 0x00	; 0
    32ca:	ef e4       	ldi	r30, 0x4F	; 79
    32cc:	f0 e0       	ldi	r31, 0x00	; 0
    32ce:	80 81       	ld	r24, Z
    32d0:	8f 7b       	andi	r24, 0xBF	; 191
    32d2:	8c 93       	st	X, r24
			set_bit(TCCR1A,7);
    32d4:	af e4       	ldi	r26, 0x4F	; 79
    32d6:	b0 e0       	ldi	r27, 0x00	; 0
    32d8:	ef e4       	ldi	r30, 0x4F	; 79
    32da:	f0 e0       	ldi	r31, 0x00	; 0
    32dc:	80 81       	ld	r24, Z
    32de:	80 68       	ori	r24, 0x80	; 128
    32e0:	8c 93       	st	X, r24
//				set_bit(TCCR1B,0);
//				clr_bit(TCCR1B,1);
//				set_bit(TCCR1B,2);
//	#endif

	}//End of TIMER1 INIT
    32e2:	cf 91       	pop	r28
    32e4:	df 91       	pop	r29
    32e6:	08 95       	ret

000032e8 <TIMER1_Stop>:
#endif

void TIMER1_Stop(void)
{
    32e8:	df 93       	push	r29
    32ea:	cf 93       	push	r28
    32ec:	cd b7       	in	r28, 0x3d	; 61
    32ee:	de b7       	in	r29, 0x3e	; 62
	clr_bit(TCCR1B,0);
    32f0:	ae e4       	ldi	r26, 0x4E	; 78
    32f2:	b0 e0       	ldi	r27, 0x00	; 0
    32f4:	ee e4       	ldi	r30, 0x4E	; 78
    32f6:	f0 e0       	ldi	r31, 0x00	; 0
    32f8:	80 81       	ld	r24, Z
    32fa:	8e 7f       	andi	r24, 0xFE	; 254
    32fc:	8c 93       	st	X, r24
	clr_bit(TCCR1B,1);
    32fe:	ae e4       	ldi	r26, 0x4E	; 78
    3300:	b0 e0       	ldi	r27, 0x00	; 0
    3302:	ee e4       	ldi	r30, 0x4E	; 78
    3304:	f0 e0       	ldi	r31, 0x00	; 0
    3306:	80 81       	ld	r24, Z
    3308:	8d 7f       	andi	r24, 0xFD	; 253
    330a:	8c 93       	st	X, r24
	clr_bit(TCCR1B,2);
    330c:	ae e4       	ldi	r26, 0x4E	; 78
    330e:	b0 e0       	ldi	r27, 0x00	; 0
    3310:	ee e4       	ldi	r30, 0x4E	; 78
    3312:	f0 e0       	ldi	r31, 0x00	; 0
    3314:	80 81       	ld	r24, Z
    3316:	8b 7f       	andi	r24, 0xFB	; 251
    3318:	8c 93       	st	X, r24
}
    331a:	cf 91       	pop	r28
    331c:	df 91       	pop	r29
    331e:	08 95       	ret

00003320 <TIMER1_Start>:
void TIMER1_Start(void)
{
    3320:	df 93       	push	r29
    3322:	cf 93       	push	r28
    3324:	cd b7       	in	r28, 0x3d	; 61
    3326:	de b7       	in	r29, 0x3e	; 62
	clr_bit(TCCR1B,0);
    3328:	ae e4       	ldi	r26, 0x4E	; 78
    332a:	b0 e0       	ldi	r27, 0x00	; 0
    332c:	ee e4       	ldi	r30, 0x4E	; 78
    332e:	f0 e0       	ldi	r31, 0x00	; 0
    3330:	80 81       	ld	r24, Z
    3332:	8e 7f       	andi	r24, 0xFE	; 254
    3334:	8c 93       	st	X, r24
	set_bit(TCCR1B,1);
    3336:	ae e4       	ldi	r26, 0x4E	; 78
    3338:	b0 e0       	ldi	r27, 0x00	; 0
    333a:	ee e4       	ldi	r30, 0x4E	; 78
    333c:	f0 e0       	ldi	r31, 0x00	; 0
    333e:	80 81       	ld	r24, Z
    3340:	82 60       	ori	r24, 0x02	; 2
    3342:	8c 93       	st	X, r24
	clr_bit(TCCR1B,2);
    3344:	ae e4       	ldi	r26, 0x4E	; 78
    3346:	b0 e0       	ldi	r27, 0x00	; 0
    3348:	ee e4       	ldi	r30, 0x4E	; 78
    334a:	f0 e0       	ldi	r31, 0x00	; 0
    334c:	80 81       	ld	r24, Z
    334e:	8b 7f       	andi	r24, 0xFB	; 251
    3350:	8c 93       	st	X, r24
}
    3352:	cf 91       	pop	r28
    3354:	df 91       	pop	r29
    3356:	08 95       	ret

00003358 <TIMER1_FAST_PWM_ICR1_Val>:
void TIMER1_FAST_PWM_ICR1_Val (u16 Top_Value_ICR1)
{
    3358:	df 93       	push	r29
    335a:	cf 93       	push	r28
    335c:	00 d0       	rcall	.+0      	; 0x335e <TIMER1_FAST_PWM_ICR1_Val+0x6>
    335e:	cd b7       	in	r28, 0x3d	; 61
    3360:	de b7       	in	r29, 0x3e	; 62
    3362:	9a 83       	std	Y+2, r25	; 0x02
    3364:	89 83       	std	Y+1, r24	; 0x01
	//Top_Value_ICR1  In Micro Seconds depends on Prescaler Value
	ICR1 = Top_Value_ICR1;
    3366:	e6 e4       	ldi	r30, 0x46	; 70
    3368:	f0 e0       	ldi	r31, 0x00	; 0
    336a:	89 81       	ldd	r24, Y+1	; 0x01
    336c:	9a 81       	ldd	r25, Y+2	; 0x02
    336e:	91 83       	std	Z+1, r25	; 0x01
    3370:	80 83       	st	Z, r24
}
    3372:	0f 90       	pop	r0
    3374:	0f 90       	pop	r0
    3376:	cf 91       	pop	r28
    3378:	df 91       	pop	r29
    337a:	08 95       	ret

0000337c <TIMER0_OverFlowSetCallBack>:

void TIMER0_OverFlowSetCallBack( void (*Action_CounterOverFlow)(void) )
{
    337c:	df 93       	push	r29
    337e:	cf 93       	push	r28
    3380:	00 d0       	rcall	.+0      	; 0x3382 <TIMER0_OverFlowSetCallBack+0x6>
    3382:	cd b7       	in	r28, 0x3d	; 61
    3384:	de b7       	in	r29, 0x3e	; 62
    3386:	9a 83       	std	Y+2, r25	; 0x02
    3388:	89 83       	std	Y+1, r24	; 0x01
	if(Action_CounterOverFlow!=NULL)
    338a:	89 81       	ldd	r24, Y+1	; 0x01
    338c:	9a 81       	ldd	r25, Y+2	; 0x02
    338e:	00 97       	sbiw	r24, 0x00	; 0
    3390:	31 f0       	breq	.+12     	; 0x339e <TIMER0_OverFlowSetCallBack+0x22>
	{
		TIMER0_pf_OVERFLOW=Action_CounterOverFlow;
    3392:	89 81       	ldd	r24, Y+1	; 0x01
    3394:	9a 81       	ldd	r25, Y+2	; 0x02
    3396:	90 93 1f 05 	sts	0x051F, r25
    339a:	80 93 1e 05 	sts	0x051E, r24
	}
}
    339e:	0f 90       	pop	r0
    33a0:	0f 90       	pop	r0
    33a2:	cf 91       	pop	r28
    33a4:	df 91       	pop	r29
    33a6:	08 95       	ret

000033a8 <TIMER0_CTCSetCallBack>:
void TIMER0_CTCSetCallBack( void (*Action_CounterCTC)(void) )
{
    33a8:	df 93       	push	r29
    33aa:	cf 93       	push	r28
    33ac:	00 d0       	rcall	.+0      	; 0x33ae <TIMER0_CTCSetCallBack+0x6>
    33ae:	cd b7       	in	r28, 0x3d	; 61
    33b0:	de b7       	in	r29, 0x3e	; 62
    33b2:	9a 83       	std	Y+2, r25	; 0x02
    33b4:	89 83       	std	Y+1, r24	; 0x01
	if(Action_CounterCTC!=NULL)
    33b6:	89 81       	ldd	r24, Y+1	; 0x01
    33b8:	9a 81       	ldd	r25, Y+2	; 0x02
    33ba:	00 97       	sbiw	r24, 0x00	; 0
    33bc:	31 f0       	breq	.+12     	; 0x33ca <TIMER0_CTCSetCallBack+0x22>
	{
		TIMER0_pf_CTC=Action_CounterCTC;
    33be:	89 81       	ldd	r24, Y+1	; 0x01
    33c0:	9a 81       	ldd	r25, Y+2	; 0x02
    33c2:	90 93 21 05 	sts	0x0521, r25
    33c6:	80 93 20 05 	sts	0x0520, r24
	}
}
    33ca:	0f 90       	pop	r0
    33cc:	0f 90       	pop	r0
    33ce:	cf 91       	pop	r28
    33d0:	df 91       	pop	r29
    33d2:	08 95       	ret

000033d4 <UART_init>:
	/* Global Variables */
static u8  USART_size_of_string_transmitted;
static u8  USART_transmit_index=0;

void UART_init(void)
{
    33d4:	df 93       	push	r29
    33d6:	cf 93       	push	r28
    33d8:	cd b7       	in	r28, 0x3d	; 61
    33da:	de b7       	in	r29, 0x3e	; 62
//#elif ( USART_STOP_BIT == USART_Two_Stop_Bit )
//	set_bit(Local_UCSRC_Modifier,3);
//#endif
////UCSRC=Local_UCSRC_Modifier;
//	UCSRC = 0b10000110;
	   set_bit(UCSRB,RXEN);
    33dc:	aa e2       	ldi	r26, 0x2A	; 42
    33de:	b0 e0       	ldi	r27, 0x00	; 0
    33e0:	ea e2       	ldi	r30, 0x2A	; 42
    33e2:	f0 e0       	ldi	r31, 0x00	; 0
    33e4:	80 81       	ld	r24, Z
    33e6:	80 61       	ori	r24, 0x10	; 16
    33e8:	8c 93       	st	X, r24
	    set_bit(UCSRB,TXEN);
    33ea:	aa e2       	ldi	r26, 0x2A	; 42
    33ec:	b0 e0       	ldi	r27, 0x00	; 0
    33ee:	ea e2       	ldi	r30, 0x2A	; 42
    33f0:	f0 e0       	ldi	r31, 0x00	; 0
    33f2:	80 81       	ld	r24, Z
    33f4:	88 60       	ori	r24, 0x08	; 8
    33f6:	8c 93       	st	X, r24
	//    ClrBit(UCSRC,UPM1);
	//    ClrBit(UCSRC,UPM0);
	//
	//    ClrBit(UCSRC,USBS);
	//
	    clr_bit(UCSRB,UCSZ2);
    33f8:	aa e2       	ldi	r26, 0x2A	; 42
    33fa:	b0 e0       	ldi	r27, 0x00	; 0
    33fc:	ea e2       	ldi	r30, 0x2A	; 42
    33fe:	f0 e0       	ldi	r31, 0x00	; 0
    3400:	80 81       	ld	r24, Z
    3402:	8b 7f       	andi	r24, 0xFB	; 251
    3404:	8c 93       	st	X, r24
	//    SetBit(UCSRC,UCSZ1);
	//    SetBit(UCSRC,UCSZ0);

	    UCSRC=0b10000110;
    3406:	e0 e4       	ldi	r30, 0x40	; 64
    3408:	f0 e0       	ldi	r31, 0x00	; 0
    340a:	86 e8       	ldi	r24, 0x86	; 134
    340c:	80 83       	st	Z, r24
	    clr_bit(UCSRA,U2X);
    340e:	ab e2       	ldi	r26, 0x2B	; 43
    3410:	b0 e0       	ldi	r27, 0x00	; 0
    3412:	eb e2       	ldi	r30, 0x2B	; 43
    3414:	f0 e0       	ldi	r31, 0x00	; 0
    3416:	80 81       	ld	r24, Z
    3418:	8d 7f       	andi	r24, 0xFD	; 253
    341a:	8c 93       	st	X, r24
	//    ClrBit(UBRRH,URSEL);
	//    ClrBit(UBRRH,PIN0);
	//    ClrBit(UBRRH,PIN1);
	//    ClrBit(UBRRH,PIN2);
	//    ClrBit(UBRRH,PIN3);
	    UBRRH=0;
    341c:	e0 e4       	ldi	r30, 0x40	; 64
    341e:	f0 e0       	ldi	r31, 0x00	; 0
    3420:	10 82       	st	Z, r1
	    UBRRL=51;
    3422:	e9 e2       	ldi	r30, 0x29	; 41
    3424:	f0 e0       	ldi	r31, 0x00	; 0
    3426:	83 e3       	ldi	r24, 0x33	; 51
    3428:	80 83       	st	Z, r24
}
    342a:	cf 91       	pop	r28
    342c:	df 91       	pop	r29
    342e:	08 95       	ret

00003430 <UART_SendByteSynchronous>:

void UART_SendByteSynchronous(u8 DataByte)
{
    3430:	df 93       	push	r29
    3432:	cf 93       	push	r28
    3434:	0f 92       	push	r0
    3436:	cd b7       	in	r28, 0x3d	; 61
    3438:	de b7       	in	r29, 0x3e	; 62
    343a:	89 83       	std	Y+1, r24	; 0x01
//	u16 Local_USART_MAX_TIMEOUT_Counter=0;
//	while( (get_bit(UCSRA,5) == 0) && (Local_USART_MAX_TIMEOUT_Counter <= USART_MAX_TIMEOUT) )
//	{
//		Local_USART_MAX_TIMEOUT_Counter++;
//	}
	 UDR=DataByte;
    343c:	ec e2       	ldi	r30, 0x2C	; 44
    343e:	f0 e0       	ldi	r31, 0x00	; 0
    3440:	89 81       	ldd	r24, Y+1	; 0x01
    3442:	80 83       	st	Z, r24
	    while(get_bit(UCSRA,UDRE)==0);
    3444:	eb e2       	ldi	r30, 0x2B	; 43
    3446:	f0 e0       	ldi	r31, 0x00	; 0
    3448:	80 81       	ld	r24, Z
    344a:	82 95       	swap	r24
    344c:	86 95       	lsr	r24
    344e:	87 70       	andi	r24, 0x07	; 7
    3450:	88 2f       	mov	r24, r24
    3452:	90 e0       	ldi	r25, 0x00	; 0
    3454:	81 70       	andi	r24, 0x01	; 1
    3456:	90 70       	andi	r25, 0x00	; 0
    3458:	00 97       	sbiw	r24, 0x00	; 0
    345a:	a1 f3       	breq	.-24     	; 0x3444 <UART_SendByteSynchronous+0x14>
//	if(Local_USART_MAX_TIMEOUT_Counter  <= USART_MAX_TIMEOUT)
//	{
//		UDR = DataByte;
//	}

}
    345c:	0f 90       	pop	r0
    345e:	cf 91       	pop	r28
    3460:	df 91       	pop	r29
    3462:	08 95       	ret

00003464 <UART_ReceiveByteSynchronous>:
void UART_ReceiveByteSynchronous(u8* ReceiveByte )
{
    3464:	df 93       	push	r29
    3466:	cf 93       	push	r28
    3468:	00 d0       	rcall	.+0      	; 0x346a <UART_ReceiveByteSynchronous+0x6>
    346a:	cd b7       	in	r28, 0x3d	; 61
    346c:	de b7       	in	r29, 0x3e	; 62
    346e:	9a 83       	std	Y+2, r25	; 0x02
    3470:	89 83       	std	Y+1, r24	; 0x01
	//u16 Local_USART_MAX_TIMEOUT_Counter=0;
	/* Check Pointer Validation */
	if(ReceiveByte != NULL)
    3472:	89 81       	ldd	r24, Y+1	; 0x01
    3474:	9a 81       	ldd	r25, Y+2	; 0x02
    3476:	00 97       	sbiw	r24, 0x00	; 0
    3478:	91 f0       	breq	.+36     	; 0x349e <UART_ReceiveByteSynchronous+0x3a>
	{
		while (get_bit(UCSRA,7) == 0);// && (Local_USART_MAX_TIMEOUT_Counter <= USART_MAX_TIMEOUT))
    347a:	eb e2       	ldi	r30, 0x2B	; 43
    347c:	f0 e0       	ldi	r31, 0x00	; 0
    347e:	80 81       	ld	r24, Z
    3480:	88 23       	and	r24, r24
    3482:	dc f7       	brge	.-10     	; 0x347a <UART_ReceiveByteSynchronous+0x16>
		//{
			//Local_USART_MAX_TIMEOUT_Counter++;
		//}
		*ReceiveByte=UDR;
    3484:	ec e2       	ldi	r30, 0x2C	; 44
    3486:	f0 e0       	ldi	r31, 0x00	; 0
    3488:	80 81       	ld	r24, Z
    348a:	e9 81       	ldd	r30, Y+1	; 0x01
    348c:	fa 81       	ldd	r31, Y+2	; 0x02
    348e:	80 83       	st	Z, r24
		clr_bit(UCSRA,7);
    3490:	ab e2       	ldi	r26, 0x2B	; 43
    3492:	b0 e0       	ldi	r27, 0x00	; 0
    3494:	eb e2       	ldi	r30, 0x2B	; 43
    3496:	f0 e0       	ldi	r31, 0x00	; 0
    3498:	80 81       	ld	r24, Z
    349a:	8f 77       	andi	r24, 0x7F	; 127
    349c:	8c 93       	st	X, r24
		{
			*ReceiveByte=UDR;
		}*/
	}

}
    349e:	0f 90       	pop	r0
    34a0:	0f 90       	pop	r0
    34a2:	cf 91       	pop	r28
    34a4:	df 91       	pop	r29
    34a6:	08 95       	ret

000034a8 <__vector_15>:
//
//}

/* USART ISR FOR TX COMPLETE */
void __vector_15(void)
{
    34a8:	1f 92       	push	r1
    34aa:	0f 92       	push	r0
    34ac:	0f b6       	in	r0, 0x3f	; 63
    34ae:	0f 92       	push	r0
    34b0:	11 24       	eor	r1, r1
    34b2:	2f 93       	push	r18
    34b4:	3f 93       	push	r19
    34b6:	4f 93       	push	r20
    34b8:	5f 93       	push	r21
    34ba:	6f 93       	push	r22
    34bc:	7f 93       	push	r23
    34be:	8f 93       	push	r24
    34c0:	9f 93       	push	r25
    34c2:	af 93       	push	r26
    34c4:	bf 93       	push	r27
    34c6:	ef 93       	push	r30
    34c8:	ff 93       	push	r31
    34ca:	df 93       	push	r29
    34cc:	cf 93       	push	r28
    34ce:	cd b7       	in	r28, 0x3d	; 61
    34d0:	de b7       	in	r29, 0x3e	; 62
	USART_transmit_index++;
    34d2:	80 91 2f 05 	lds	r24, 0x052F
    34d6:	8f 5f       	subi	r24, 0xFF	; 255
    34d8:	80 93 2f 05 	sts	0x052F, r24
	if (USART_transmit_index < USART_size_of_string_transmitted)
    34dc:	90 91 2f 05 	lds	r25, 0x052F
    34e0:	80 91 30 05 	lds	r24, 0x0530
    34e4:	98 17       	cp	r25, r24
    34e6:	80 f4       	brcc	.+32     	; 0x3508 <__vector_15+0x60>
	{
		/* To Send The next Byte */
		UDR = USART_pointer_to_transmitted_string[USART_transmit_index];
    34e8:	ac e2       	ldi	r26, 0x2C	; 44
    34ea:	b0 e0       	ldi	r27, 0x00	; 0
    34ec:	20 91 2b 05 	lds	r18, 0x052B
    34f0:	30 91 2c 05 	lds	r19, 0x052C
    34f4:	80 91 2f 05 	lds	r24, 0x052F
    34f8:	88 2f       	mov	r24, r24
    34fa:	90 e0       	ldi	r25, 0x00	; 0
    34fc:	f9 01       	movw	r30, r18
    34fe:	e8 0f       	add	r30, r24
    3500:	f9 1f       	adc	r31, r25
    3502:	80 81       	ld	r24, Z
    3504:	8c 93       	st	X, r24
    3506:	0c c0       	rjmp	.+24     	; 0x3520 <__vector_15+0x78>
	}
	else
	{
		/* To Disable Tx Interrupt */
		clr_bit(UCSRB,6);
    3508:	aa e2       	ldi	r26, 0x2A	; 42
    350a:	b0 e0       	ldi	r27, 0x00	; 0
    350c:	ea e2       	ldi	r30, 0x2A	; 42
    350e:	f0 e0       	ldi	r31, 0x00	; 0
    3510:	80 81       	ld	r24, Z
    3512:	8f 7b       	andi	r24, 0xBF	; 191
    3514:	8c 93       	st	X, r24
		/* To Call the Notification function */
		USART_pointer_to_notification_function();
    3516:	e0 91 2d 05 	lds	r30, 0x052D
    351a:	f0 91 2e 05 	lds	r31, 0x052E
    351e:	09 95       	icall
	}
}
    3520:	cf 91       	pop	r28
    3522:	df 91       	pop	r29
    3524:	ff 91       	pop	r31
    3526:	ef 91       	pop	r30
    3528:	bf 91       	pop	r27
    352a:	af 91       	pop	r26
    352c:	9f 91       	pop	r25
    352e:	8f 91       	pop	r24
    3530:	7f 91       	pop	r23
    3532:	6f 91       	pop	r22
    3534:	5f 91       	pop	r21
    3536:	4f 91       	pop	r20
    3538:	3f 91       	pop	r19
    353a:	2f 91       	pop	r18
    353c:	0f 90       	pop	r0
    353e:	0f be       	out	0x3f, r0	; 63
    3540:	0f 90       	pop	r0
    3542:	1f 90       	pop	r1
    3544:	18 95       	reti

00003546 <UART_u8Receiver>:

u8 UART_u8Receiver(void)
{
    3546:	df 93       	push	r29
    3548:	cf 93       	push	r28
    354a:	cd b7       	in	r28, 0x3d	; 61
    354c:	de b7       	in	r29, 0x3e	; 62

	while(get_bit(UCSRA,7)==0);
    354e:	eb e2       	ldi	r30, 0x2B	; 43
    3550:	f0 e0       	ldi	r31, 0x00	; 0
    3552:	80 81       	ld	r24, Z
    3554:	88 23       	and	r24, r24
    3556:	dc f7       	brge	.-10     	; 0x354e <UART_u8Receiver+0x8>
	//LCD_PrintNum('0'+get_bit(UCSRA,7));
//	set_bit(UCSRA,7);
	return (UDR);
    3558:	ec e2       	ldi	r30, 0x2C	; 44
    355a:	f0 e0       	ldi	r31, 0x00	; 0
    355c:	80 81       	ld	r24, Z
}
    355e:	cf 91       	pop	r28
    3560:	df 91       	pop	r29
    3562:	08 95       	ret

00003564 <Bluetooth_SendString>:
//{
//
//}

void Bluetooth_SendString(u8* Data)
{
    3564:	df 93       	push	r29
    3566:	cf 93       	push	r28
    3568:	00 d0       	rcall	.+0      	; 0x356a <Bluetooth_SendString+0x6>
    356a:	0f 92       	push	r0
    356c:	cd b7       	in	r28, 0x3d	; 61
    356e:	de b7       	in	r29, 0x3e	; 62
    3570:	9b 83       	std	Y+3, r25	; 0x03
    3572:	8a 83       	std	Y+2, r24	; 0x02
    u8 i=0;
    3574:	19 82       	std	Y+1, r1	; 0x01
    3576:	0e c0       	rjmp	.+28     	; 0x3594 <Bluetooth_SendString+0x30>

    while(Data[i]!='\0')
    {
    	UART_SendByteSynchronous(Data[i]);
    3578:	89 81       	ldd	r24, Y+1	; 0x01
    357a:	28 2f       	mov	r18, r24
    357c:	30 e0       	ldi	r19, 0x00	; 0
    357e:	8a 81       	ldd	r24, Y+2	; 0x02
    3580:	9b 81       	ldd	r25, Y+3	; 0x03
    3582:	fc 01       	movw	r30, r24
    3584:	e2 0f       	add	r30, r18
    3586:	f3 1f       	adc	r31, r19
    3588:	80 81       	ld	r24, Z
    358a:	0e 94 18 1a 	call	0x3430	; 0x3430 <UART_SendByteSynchronous>
        i++;
    358e:	89 81       	ldd	r24, Y+1	; 0x01
    3590:	8f 5f       	subi	r24, 0xFF	; 255
    3592:	89 83       	std	Y+1, r24	; 0x01

void Bluetooth_SendString(u8* Data)
{
    u8 i=0;

    while(Data[i]!='\0')
    3594:	89 81       	ldd	r24, Y+1	; 0x01
    3596:	28 2f       	mov	r18, r24
    3598:	30 e0       	ldi	r19, 0x00	; 0
    359a:	8a 81       	ldd	r24, Y+2	; 0x02
    359c:	9b 81       	ldd	r25, Y+3	; 0x03
    359e:	fc 01       	movw	r30, r24
    35a0:	e2 0f       	add	r30, r18
    35a2:	f3 1f       	adc	r31, r19
    35a4:	80 81       	ld	r24, Z
    35a6:	88 23       	and	r24, r24
    35a8:	39 f7       	brne	.-50     	; 0x3578 <Bluetooth_SendString+0x14>
    {
    	UART_SendByteSynchronous(Data[i]);
        i++;
    }
}
    35aa:	0f 90       	pop	r0
    35ac:	0f 90       	pop	r0
    35ae:	0f 90       	pop	r0
    35b0:	cf 91       	pop	r28
    35b2:	df 91       	pop	r29
    35b4:	08 95       	ret

000035b6 <Bluetooth_SendNumber>:
void Bluetooth_SendNumber(u16 Number)
{
    35b6:	df 93       	push	r29
    35b8:	cf 93       	push	r28
    35ba:	00 d0       	rcall	.+0      	; 0x35bc <Bluetooth_SendNumber+0x6>
    35bc:	00 d0       	rcall	.+0      	; 0x35be <Bluetooth_SendNumber+0x8>
    35be:	cd b7       	in	r28, 0x3d	; 61
    35c0:	de b7       	in	r29, 0x3e	; 62
    35c2:	9c 83       	std	Y+4, r25	; 0x04
    35c4:	8b 83       	std	Y+3, r24	; 0x03
	u8 x,y;
	 if (Number==0)
    35c6:	8b 81       	ldd	r24, Y+3	; 0x03
    35c8:	9c 81       	ldd	r25, Y+4	; 0x04
    35ca:	00 97       	sbiw	r24, 0x00	; 0
    35cc:	21 f4       	brne	.+8      	; 0x35d6 <Bluetooth_SendNumber+0x20>
	 {
		 UART_SendByteSynchronous(48);
    35ce:	80 e3       	ldi	r24, 0x30	; 48
    35d0:	0e 94 18 1a 	call	0x3430	; 0x3430 <UART_SendByteSynchronous>
    35d4:	31 c0       	rjmp	.+98     	; 0x3638 <Bluetooth_SendNumber+0x82>
	 }else if(Number>0 && Number<10)
    35d6:	8b 81       	ldd	r24, Y+3	; 0x03
    35d8:	9c 81       	ldd	r25, Y+4	; 0x04
    35da:	00 97       	sbiw	r24, 0x00	; 0
    35dc:	51 f0       	breq	.+20     	; 0x35f2 <Bluetooth_SendNumber+0x3c>
    35de:	8b 81       	ldd	r24, Y+3	; 0x03
    35e0:	9c 81       	ldd	r25, Y+4	; 0x04
    35e2:	8a 30       	cpi	r24, 0x0A	; 10
    35e4:	91 05       	cpc	r25, r1
    35e6:	28 f4       	brcc	.+10     	; 0x35f2 <Bluetooth_SendNumber+0x3c>
	 {
		 UART_SendByteSynchronous((Number+48));
    35e8:	8b 81       	ldd	r24, Y+3	; 0x03
    35ea:	80 5d       	subi	r24, 0xD0	; 208
    35ec:	0e 94 18 1a 	call	0x3430	; 0x3430 <UART_SendByteSynchronous>
    35f0:	23 c0       	rjmp	.+70     	; 0x3638 <Bluetooth_SendNumber+0x82>
	 }else if(Number>=10 && Number<=99)
    35f2:	8b 81       	ldd	r24, Y+3	; 0x03
    35f4:	9c 81       	ldd	r25, Y+4	; 0x04
    35f6:	8a 30       	cpi	r24, 0x0A	; 10
    35f8:	91 05       	cpc	r25, r1
    35fa:	f0 f0       	brcs	.+60     	; 0x3638 <Bluetooth_SendNumber+0x82>
    35fc:	8b 81       	ldd	r24, Y+3	; 0x03
    35fe:	9c 81       	ldd	r25, Y+4	; 0x04
    3600:	84 36       	cpi	r24, 0x64	; 100
    3602:	91 05       	cpc	r25, r1
    3604:	c8 f4       	brcc	.+50     	; 0x3638 <Bluetooth_SendNumber+0x82>
	 {
		 x=Number/10;
    3606:	8b 81       	ldd	r24, Y+3	; 0x03
    3608:	9c 81       	ldd	r25, Y+4	; 0x04
    360a:	2a e0       	ldi	r18, 0x0A	; 10
    360c:	30 e0       	ldi	r19, 0x00	; 0
    360e:	b9 01       	movw	r22, r18
    3610:	0e 94 cd 3a 	call	0x759a	; 0x759a <__udivmodhi4>
    3614:	cb 01       	movw	r24, r22
    3616:	8a 83       	std	Y+2, r24	; 0x02
		 y=Number%10;
    3618:	8b 81       	ldd	r24, Y+3	; 0x03
    361a:	9c 81       	ldd	r25, Y+4	; 0x04
    361c:	2a e0       	ldi	r18, 0x0A	; 10
    361e:	30 e0       	ldi	r19, 0x00	; 0
    3620:	b9 01       	movw	r22, r18
    3622:	0e 94 cd 3a 	call	0x759a	; 0x759a <__udivmodhi4>
    3626:	89 83       	std	Y+1, r24	; 0x01
		 UART_SendByteSynchronous((x+48));
    3628:	8a 81       	ldd	r24, Y+2	; 0x02
    362a:	80 5d       	subi	r24, 0xD0	; 208
    362c:	0e 94 18 1a 	call	0x3430	; 0x3430 <UART_SendByteSynchronous>
		 UART_SendByteSynchronous((y+48));
    3630:	89 81       	ldd	r24, Y+1	; 0x01
    3632:	80 5d       	subi	r24, 0xD0	; 208
    3634:	0e 94 18 1a 	call	0x3430	; 0x3430 <UART_SendByteSynchronous>
	 }
}
    3638:	0f 90       	pop	r0
    363a:	0f 90       	pop	r0
    363c:	0f 90       	pop	r0
    363e:	0f 90       	pop	r0
    3640:	cf 91       	pop	r28
    3642:	df 91       	pop	r29
    3644:	08 95       	ret

00003646 <main>:
u8 Array_Of_Addresses_Location[10]={0};
u8 Array_Of_User_Status[10]={0};


void main(void)
{
    3646:	df 93       	push	r29
    3648:	cf 93       	push	r28
    364a:	cd b7       	in	r28, 0x3d	; 61
    364c:	de b7       	in	r29, 0x3e	; 62
    364e:	a2 97       	sbiw	r28, 0x22	; 34
    3650:	0f b6       	in	r0, 0x3f	; 63
    3652:	f8 94       	cli
    3654:	de bf       	out	0x3e, r29	; 62
    3656:	0f be       	out	0x3f, r0	; 63
    3658:	cd bf       	out	0x3d, r28	; 61
	LCD_init();
    365a:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <LCD_init>
	UART_init();
    365e:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <UART_init>
	eeprom_init();
    3662:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <eeprom_init>
	/* Light Pin Output */
	DIO_u8SetPinDir(DIO_PORTC,DIO_PIN7,DIO_OUTPUT);
    3666:	82 e0       	ldi	r24, 0x02	; 2
    3668:	67 e0       	ldi	r22, 0x07	; 7
    366a:	41 e0       	ldi	r20, 0x01	; 1
    366c:	0e 94 9f 09 	call	0x133e	; 0x133e <DIO_u8SetPinDir>
	/* LCD BackLight Controlable PIN */
	DIO_u8SetPinDir(DIO_PORTC,DIO_PIN6,DIO_OUTPUT);
    3670:	82 e0       	ldi	r24, 0x02	; 2
    3672:	66 e0       	ldi	r22, 0x06	; 6
    3674:	41 e0       	ldi	r20, 0x01	; 1
    3676:	0e 94 9f 09 	call	0x133e	; 0x133e <DIO_u8SetPinDir>
	DIO_u8SetPinDir(DIO_PORTB,DIO_PIN3,DIO_OUTPUT);//PWM output for Timer0
    367a:	81 e0       	ldi	r24, 0x01	; 1
    367c:	63 e0       	ldi	r22, 0x03	; 3
    367e:	41 e0       	ldi	r20, 0x01	; 1
    3680:	0e 94 9f 09 	call	0x133e	; 0x133e <DIO_u8SetPinDir>
	/* Door Control PWM TIMER1 */
	DIO_u8SetPinDir(DIO_PORTD,DIO_PIN5,DIO_OUTPUT);//OCR1 Pin Output
    3684:	83 e0       	ldi	r24, 0x03	; 3
    3686:	65 e0       	ldi	r22, 0x05	; 5
    3688:	41 e0       	ldi	r20, 0x01	; 1
    368a:	0e 94 9f 09 	call	0x133e	; 0x133e <DIO_u8SetPinDir>
	TIMER1_FAST_PWM_ICR1_Val(19999);//Top Limit 20000 ms for servo pulse
    368e:	8f e1       	ldi	r24, 0x1F	; 31
    3690:	9e e4       	ldi	r25, 0x4E	; 78
    3692:	0e 94 ac 19 	call	0x3358	; 0x3358 <TIMER1_FAST_PWM_ICR1_Val>
	TIMER1_int();
    3696:	0e 94 43 19 	call	0x3286	; 0x3286 <TIMER1_int>
	TIMER0_int();
    369a:	0e 94 8b 18 	call	0x3116	; 0x3116 <TIMER0_int>
	/* Initializing arrays value */
	Recovering_Addresses_Location();
    369e:	0e 94 e1 2f 	call	0x5fc2	; 0x5fc2 <Recovering_Addresses_Location>
	Recovering_Users_Status();
    36a2:	0e 94 06 30 	call	0x600c	; 0x600c <Recovering_Users_Status>
	u8 User_Choice,exit_flag=0,Connect_DC_ExitFlag=0,Connect_DC_input;
    36a6:	1f 8e       	std	Y+31, r1	; 0x1f
    36a8:	1e 8e       	std	Y+30, r1	; 0x1e
	while(1)
	{
		/* LCD's Back Light Turned off */
		DIO_u8SetPinVal(DIO_PORTC,DIO_PIN6,DIO_LOW);
    36aa:	82 e0       	ldi	r24, 0x02	; 2
    36ac:	66 e0       	ldi	r22, 0x06	; 6
    36ae:	40 e0       	ldi	r20, 0x00	; 0
    36b0:	0e 94 c2 0a 	call	0x1584	; 0x1584 <DIO_u8SetPinVal>
    36b4:	90 c0       	rjmp	.+288    	; 0x37d6 <main+0x190>
		while(Connect_DC_ExitFlag==0)
		{
			LCD_CLR();
    36b6:	0e 94 2b 13 	call	0x2656	; 0x2656 <LCD_CLR>
			Connect_DC_input = UART_u8Receiver();
    36ba:	0e 94 a3 1a 	call	0x3546	; 0x3546 <UART_u8Receiver>
    36be:	8d 8f       	std	Y+29, r24	; 0x1d
			if(Connect_DC_input=='x')
    36c0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    36c2:	88 37       	cpi	r24, 0x78	; 120
    36c4:	09 f0       	breq	.+2      	; 0x36c8 <main+0x82>
    36c6:	87 c0       	rjmp	.+270    	; 0x37d6 <main+0x190>
			{
				LCD_CLR();
    36c8:	0e 94 2b 13 	call	0x2656	; 0x2656 <LCD_CLR>
				Connect_DC_ExitFlag=1;
    36cc:	81 e0       	ldi	r24, 0x01	; 1
    36ce:	8e 8f       	std	Y+30, r24	; 0x1e
				DIO_u8SetPinVal(DIO_PORTC,DIO_PIN6,DIO_HIGH);
    36d0:	82 e0       	ldi	r24, 0x02	; 2
    36d2:	66 e0       	ldi	r22, 0x06	; 6
    36d4:	41 e0       	ldi	r20, 0x01	; 1
    36d6:	0e 94 c2 0a 	call	0x1584	; 0x1584 <DIO_u8SetPinVal>
//				 Bluetooth_SendString("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
				 Bluetooth_SendString("\n--------------------\n");
    36da:	80 e6       	ldi	r24, 0x60	; 96
    36dc:	90 e0       	ldi	r25, 0x00	; 0
    36de:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
				 Bluetooth_SendString("Connected To your House");
    36e2:	87 e7       	ldi	r24, 0x77	; 119
    36e4:	90 e0       	ldi	r25, 0x00	; 0
    36e6:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
				LCD_WriteString("Connected!");
    36ea:	8f e8       	ldi	r24, 0x8F	; 143
    36ec:	90 e0       	ldi	r25, 0x00	; 0
    36ee:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LCD_WriteString>
    36f2:	80 e0       	ldi	r24, 0x00	; 0
    36f4:	90 e0       	ldi	r25, 0x00	; 0
    36f6:	aa e7       	ldi	r26, 0x7A	; 122
    36f8:	b4 e4       	ldi	r27, 0x44	; 68
    36fa:	89 8f       	std	Y+25, r24	; 0x19
    36fc:	9a 8f       	std	Y+26, r25	; 0x1a
    36fe:	ab 8f       	std	Y+27, r26	; 0x1b
    3700:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3702:	69 8d       	ldd	r22, Y+25	; 0x19
    3704:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3706:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3708:	9c 8d       	ldd	r25, Y+28	; 0x1c
    370a:	20 e0       	ldi	r18, 0x00	; 0
    370c:	30 e0       	ldi	r19, 0x00	; 0
    370e:	4a ef       	ldi	r20, 0xFA	; 250
    3710:	54 e4       	ldi	r21, 0x44	; 68
    3712:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3716:	dc 01       	movw	r26, r24
    3718:	cb 01       	movw	r24, r22
    371a:	8d 8b       	std	Y+21, r24	; 0x15
    371c:	9e 8b       	std	Y+22, r25	; 0x16
    371e:	af 8b       	std	Y+23, r26	; 0x17
    3720:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3722:	6d 89       	ldd	r22, Y+21	; 0x15
    3724:	7e 89       	ldd	r23, Y+22	; 0x16
    3726:	8f 89       	ldd	r24, Y+23	; 0x17
    3728:	98 8d       	ldd	r25, Y+24	; 0x18
    372a:	20 e0       	ldi	r18, 0x00	; 0
    372c:	30 e0       	ldi	r19, 0x00	; 0
    372e:	40 e8       	ldi	r20, 0x80	; 128
    3730:	5f e3       	ldi	r21, 0x3F	; 63
    3732:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3736:	88 23       	and	r24, r24
    3738:	2c f4       	brge	.+10     	; 0x3744 <main+0xfe>
		__ticks = 1;
    373a:	81 e0       	ldi	r24, 0x01	; 1
    373c:	90 e0       	ldi	r25, 0x00	; 0
    373e:	9c 8b       	std	Y+20, r25	; 0x14
    3740:	8b 8b       	std	Y+19, r24	; 0x13
    3742:	3f c0       	rjmp	.+126    	; 0x37c2 <main+0x17c>
	else if (__tmp > 65535)
    3744:	6d 89       	ldd	r22, Y+21	; 0x15
    3746:	7e 89       	ldd	r23, Y+22	; 0x16
    3748:	8f 89       	ldd	r24, Y+23	; 0x17
    374a:	98 8d       	ldd	r25, Y+24	; 0x18
    374c:	20 e0       	ldi	r18, 0x00	; 0
    374e:	3f ef       	ldi	r19, 0xFF	; 255
    3750:	4f e7       	ldi	r20, 0x7F	; 127
    3752:	57 e4       	ldi	r21, 0x47	; 71
    3754:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3758:	18 16       	cp	r1, r24
    375a:	4c f5       	brge	.+82     	; 0x37ae <main+0x168>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    375c:	69 8d       	ldd	r22, Y+25	; 0x19
    375e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3760:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3762:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3764:	20 e0       	ldi	r18, 0x00	; 0
    3766:	30 e0       	ldi	r19, 0x00	; 0
    3768:	40 e2       	ldi	r20, 0x20	; 32
    376a:	51 e4       	ldi	r21, 0x41	; 65
    376c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3770:	dc 01       	movw	r26, r24
    3772:	cb 01       	movw	r24, r22
    3774:	bc 01       	movw	r22, r24
    3776:	cd 01       	movw	r24, r26
    3778:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    377c:	dc 01       	movw	r26, r24
    377e:	cb 01       	movw	r24, r22
    3780:	9c 8b       	std	Y+20, r25	; 0x14
    3782:	8b 8b       	std	Y+19, r24	; 0x13
    3784:	0f c0       	rjmp	.+30     	; 0x37a4 <main+0x15e>
    3786:	88 ec       	ldi	r24, 0xC8	; 200
    3788:	90 e0       	ldi	r25, 0x00	; 0
    378a:	9a 8b       	std	Y+18, r25	; 0x12
    378c:	89 8b       	std	Y+17, r24	; 0x11
    378e:	89 89       	ldd	r24, Y+17	; 0x11
    3790:	9a 89       	ldd	r25, Y+18	; 0x12
    3792:	01 97       	sbiw	r24, 0x01	; 1
    3794:	f1 f7       	brne	.-4      	; 0x3792 <main+0x14c>
    3796:	9a 8b       	std	Y+18, r25	; 0x12
    3798:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    379a:	8b 89       	ldd	r24, Y+19	; 0x13
    379c:	9c 89       	ldd	r25, Y+20	; 0x14
    379e:	01 97       	sbiw	r24, 0x01	; 1
    37a0:	9c 8b       	std	Y+20, r25	; 0x14
    37a2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37a4:	8b 89       	ldd	r24, Y+19	; 0x13
    37a6:	9c 89       	ldd	r25, Y+20	; 0x14
    37a8:	00 97       	sbiw	r24, 0x00	; 0
    37aa:	69 f7       	brne	.-38     	; 0x3786 <main+0x140>
    37ac:	14 c0       	rjmp	.+40     	; 0x37d6 <main+0x190>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37ae:	6d 89       	ldd	r22, Y+21	; 0x15
    37b0:	7e 89       	ldd	r23, Y+22	; 0x16
    37b2:	8f 89       	ldd	r24, Y+23	; 0x17
    37b4:	98 8d       	ldd	r25, Y+24	; 0x18
    37b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37ba:	dc 01       	movw	r26, r24
    37bc:	cb 01       	movw	r24, r22
    37be:	9c 8b       	std	Y+20, r25	; 0x14
    37c0:	8b 8b       	std	Y+19, r24	; 0x13
    37c2:	8b 89       	ldd	r24, Y+19	; 0x13
    37c4:	9c 89       	ldd	r25, Y+20	; 0x14
    37c6:	98 8b       	std	Y+16, r25	; 0x10
    37c8:	8f 87       	std	Y+15, r24	; 0x0f
    37ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    37cc:	98 89       	ldd	r25, Y+16	; 0x10
    37ce:	01 97       	sbiw	r24, 0x01	; 1
    37d0:	f1 f7       	brne	.-4      	; 0x37ce <main+0x188>
    37d2:	98 8b       	std	Y+16, r25	; 0x10
    37d4:	8f 87       	std	Y+15, r24	; 0x0f
	u8 User_Choice,exit_flag=0,Connect_DC_ExitFlag=0,Connect_DC_input;
	while(1)
	{
		/* LCD's Back Light Turned off */
		DIO_u8SetPinVal(DIO_PORTC,DIO_PIN6,DIO_LOW);
		while(Connect_DC_ExitFlag==0)
    37d6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    37d8:	88 23       	and	r24, r24
    37da:	09 f4       	brne	.+2      	; 0x37de <main+0x198>
    37dc:	6c cf       	rjmp	.-296    	; 0x36b6 <main+0x70>
				LCD_WriteString("Connected!");
				_delay_ms(1000);
			}
		}
		/* Restting Connecting Flag */
		Connect_DC_ExitFlag=0;
    37de:	1e 8e       	std	Y+30, r1	; 0x1e
    37e0:	c0 c0       	rjmp	.+384    	; 0x3962 <main+0x31c>
		while(exit_flag==0)
		{
			Bluetooth_SendString("\n--------------------\n");
    37e2:	80 e6       	ldi	r24, 0x60	; 96
    37e4:	90 e0       	ldi	r25, 0x00	; 0
    37e6:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
			Bluetooth_SendString("1)Admin Mode\n2)User Mode\n3)Disconnect");
    37ea:	8a e9       	ldi	r24, 0x9A	; 154
    37ec:	90 e0       	ldi	r25, 0x00	; 0
    37ee:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
			LCD_CLR();
    37f2:	0e 94 2b 13 	call	0x2656	; 0x2656 <LCD_CLR>
			LCD_WriteString("1)Admin 2)User");
    37f6:	80 ec       	ldi	r24, 0xC0	; 192
    37f8:	90 e0       	ldi	r25, 0x00	; 0
    37fa:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LCD_WriteString>
			LCD_goto(0,1);
    37fe:	80 e0       	ldi	r24, 0x00	; 0
    3800:	61 e0       	ldi	r22, 0x01	; 1
    3802:	0e 94 13 13 	call	0x2626	; 0x2626 <LCD_goto>
			LCD_WriteString("3)Disconnect");
    3806:	8f ec       	ldi	r24, 0xCF	; 207
    3808:	90 e0       	ldi	r25, 0x00	; 0
    380a:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LCD_WriteString>
			User_Choice=UART_u8Receiver();
    380e:	0e 94 a3 1a 	call	0x3546	; 0x3546 <UART_u8Receiver>
    3812:	88 a3       	std	Y+32, r24	; 0x20
			ASCII_Conversion(&User_Choice);
    3814:	ce 01       	movw	r24, r28
    3816:	80 96       	adiw	r24, 0x20	; 32
    3818:	0e 94 b7 1c 	call	0x396e	; 0x396e <ASCII_Conversion>
					switch (User_Choice)
    381c:	88 a1       	ldd	r24, Y+32	; 0x20
    381e:	28 2f       	mov	r18, r24
    3820:	30 e0       	ldi	r19, 0x00	; 0
    3822:	3a a3       	std	Y+34, r19	; 0x22
    3824:	29 a3       	std	Y+33, r18	; 0x21
    3826:	89 a1       	ldd	r24, Y+33	; 0x21
    3828:	9a a1       	ldd	r25, Y+34	; 0x22
    382a:	82 30       	cpi	r24, 0x02	; 2
    382c:	91 05       	cpc	r25, r1
    382e:	91 f0       	breq	.+36     	; 0x3854 <main+0x20e>
    3830:	29 a1       	ldd	r18, Y+33	; 0x21
    3832:	3a a1       	ldd	r19, Y+34	; 0x22
    3834:	23 30       	cpi	r18, 0x03	; 3
    3836:	31 05       	cpc	r19, r1
    3838:	91 f0       	breq	.+36     	; 0x385e <main+0x218>
    383a:	89 a1       	ldd	r24, Y+33	; 0x21
    383c:	9a a1       	ldd	r25, Y+34	; 0x22
    383e:	81 30       	cpi	r24, 0x01	; 1
    3840:	91 05       	cpc	r25, r1
    3842:	09 f0       	breq	.+2      	; 0x3846 <main+0x200>
    3844:	8e c0       	rjmp	.+284    	; 0x3962 <main+0x31c>
					{
						case 1:LCD_CLR();
    3846:	0e 94 2b 13 	call	0x2656	; 0x2656 <LCD_CLR>
							   Admin_Mode();
    384a:	0e 94 ca 1c 	call	0x3994	; 0x3994 <Admin_Mode>
							   Delete_User_Global_Return=0;
    384e:	10 92 31 05 	sts	0x0531, r1
    3852:	87 c0       	rjmp	.+270    	; 0x3962 <main+0x31c>
							   break;
						case 2:LCD_CLR();
    3854:	0e 94 2b 13 	call	0x2656	; 0x2656 <LCD_CLR>
							   User_Mode();
    3858:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <User_Mode>
    385c:	82 c0       	rjmp	.+260    	; 0x3962 <main+0x31c>
							   break;

						case 3:LCD_CLR();
    385e:	0e 94 2b 13 	call	0x2656	; 0x2656 <LCD_CLR>
							   exit_flag=1;
    3862:	81 e0       	ldi	r24, 0x01	; 1
    3864:	8f 8f       	std	Y+31, r24	; 0x1f
							   Bluetooth_SendString("\n--------------------\n");
    3866:	80 e6       	ldi	r24, 0x60	; 96
    3868:	90 e0       	ldi	r25, 0x00	; 0
    386a:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
							   Bluetooth_SendString("Disconnected!");
    386e:	8c ed       	ldi	r24, 0xDC	; 220
    3870:	90 e0       	ldi	r25, 0x00	; 0
    3872:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
							   LCD_WriteString("Disconnected!");
    3876:	8c ed       	ldi	r24, 0xDC	; 220
    3878:	90 e0       	ldi	r25, 0x00	; 0
    387a:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LCD_WriteString>
    387e:	80 e0       	ldi	r24, 0x00	; 0
    3880:	90 e0       	ldi	r25, 0x00	; 0
    3882:	aa e7       	ldi	r26, 0x7A	; 122
    3884:	b4 e4       	ldi	r27, 0x44	; 68
    3886:	8b 87       	std	Y+11, r24	; 0x0b
    3888:	9c 87       	std	Y+12, r25	; 0x0c
    388a:	ad 87       	std	Y+13, r26	; 0x0d
    388c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    388e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3890:	7c 85       	ldd	r23, Y+12	; 0x0c
    3892:	8d 85       	ldd	r24, Y+13	; 0x0d
    3894:	9e 85       	ldd	r25, Y+14	; 0x0e
    3896:	20 e0       	ldi	r18, 0x00	; 0
    3898:	30 e0       	ldi	r19, 0x00	; 0
    389a:	4a ef       	ldi	r20, 0xFA	; 250
    389c:	54 e4       	ldi	r21, 0x44	; 68
    389e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38a2:	dc 01       	movw	r26, r24
    38a4:	cb 01       	movw	r24, r22
    38a6:	8f 83       	std	Y+7, r24	; 0x07
    38a8:	98 87       	std	Y+8, r25	; 0x08
    38aa:	a9 87       	std	Y+9, r26	; 0x09
    38ac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    38ae:	6f 81       	ldd	r22, Y+7	; 0x07
    38b0:	78 85       	ldd	r23, Y+8	; 0x08
    38b2:	89 85       	ldd	r24, Y+9	; 0x09
    38b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    38b6:	20 e0       	ldi	r18, 0x00	; 0
    38b8:	30 e0       	ldi	r19, 0x00	; 0
    38ba:	40 e8       	ldi	r20, 0x80	; 128
    38bc:	5f e3       	ldi	r21, 0x3F	; 63
    38be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    38c2:	88 23       	and	r24, r24
    38c4:	2c f4       	brge	.+10     	; 0x38d0 <main+0x28a>
		__ticks = 1;
    38c6:	81 e0       	ldi	r24, 0x01	; 1
    38c8:	90 e0       	ldi	r25, 0x00	; 0
    38ca:	9e 83       	std	Y+6, r25	; 0x06
    38cc:	8d 83       	std	Y+5, r24	; 0x05
    38ce:	3f c0       	rjmp	.+126    	; 0x394e <main+0x308>
	else if (__tmp > 65535)
    38d0:	6f 81       	ldd	r22, Y+7	; 0x07
    38d2:	78 85       	ldd	r23, Y+8	; 0x08
    38d4:	89 85       	ldd	r24, Y+9	; 0x09
    38d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    38d8:	20 e0       	ldi	r18, 0x00	; 0
    38da:	3f ef       	ldi	r19, 0xFF	; 255
    38dc:	4f e7       	ldi	r20, 0x7F	; 127
    38de:	57 e4       	ldi	r21, 0x47	; 71
    38e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    38e4:	18 16       	cp	r1, r24
    38e6:	4c f5       	brge	.+82     	; 0x393a <main+0x2f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    38ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    38ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    38ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    38f0:	20 e0       	ldi	r18, 0x00	; 0
    38f2:	30 e0       	ldi	r19, 0x00	; 0
    38f4:	40 e2       	ldi	r20, 0x20	; 32
    38f6:	51 e4       	ldi	r21, 0x41	; 65
    38f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38fc:	dc 01       	movw	r26, r24
    38fe:	cb 01       	movw	r24, r22
    3900:	bc 01       	movw	r22, r24
    3902:	cd 01       	movw	r24, r26
    3904:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3908:	dc 01       	movw	r26, r24
    390a:	cb 01       	movw	r24, r22
    390c:	9e 83       	std	Y+6, r25	; 0x06
    390e:	8d 83       	std	Y+5, r24	; 0x05
    3910:	0f c0       	rjmp	.+30     	; 0x3930 <main+0x2ea>
    3912:	88 ec       	ldi	r24, 0xC8	; 200
    3914:	90 e0       	ldi	r25, 0x00	; 0
    3916:	9c 83       	std	Y+4, r25	; 0x04
    3918:	8b 83       	std	Y+3, r24	; 0x03
    391a:	8b 81       	ldd	r24, Y+3	; 0x03
    391c:	9c 81       	ldd	r25, Y+4	; 0x04
    391e:	01 97       	sbiw	r24, 0x01	; 1
    3920:	f1 f7       	brne	.-4      	; 0x391e <main+0x2d8>
    3922:	9c 83       	std	Y+4, r25	; 0x04
    3924:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3926:	8d 81       	ldd	r24, Y+5	; 0x05
    3928:	9e 81       	ldd	r25, Y+6	; 0x06
    392a:	01 97       	sbiw	r24, 0x01	; 1
    392c:	9e 83       	std	Y+6, r25	; 0x06
    392e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3930:	8d 81       	ldd	r24, Y+5	; 0x05
    3932:	9e 81       	ldd	r25, Y+6	; 0x06
    3934:	00 97       	sbiw	r24, 0x00	; 0
    3936:	69 f7       	brne	.-38     	; 0x3912 <main+0x2cc>
    3938:	14 c0       	rjmp	.+40     	; 0x3962 <main+0x31c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    393a:	6f 81       	ldd	r22, Y+7	; 0x07
    393c:	78 85       	ldd	r23, Y+8	; 0x08
    393e:	89 85       	ldd	r24, Y+9	; 0x09
    3940:	9a 85       	ldd	r25, Y+10	; 0x0a
    3942:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3946:	dc 01       	movw	r26, r24
    3948:	cb 01       	movw	r24, r22
    394a:	9e 83       	std	Y+6, r25	; 0x06
    394c:	8d 83       	std	Y+5, r24	; 0x05
    394e:	8d 81       	ldd	r24, Y+5	; 0x05
    3950:	9e 81       	ldd	r25, Y+6	; 0x06
    3952:	9a 83       	std	Y+2, r25	; 0x02
    3954:	89 83       	std	Y+1, r24	; 0x01
    3956:	89 81       	ldd	r24, Y+1	; 0x01
    3958:	9a 81       	ldd	r25, Y+2	; 0x02
    395a:	01 97       	sbiw	r24, 0x01	; 1
    395c:	f1 f7       	brne	.-4      	; 0x395a <main+0x314>
    395e:	9a 83       	std	Y+2, r25	; 0x02
    3960:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(1000);
			}
		}
		/* Restting Connecting Flag */
		Connect_DC_ExitFlag=0;
		while(exit_flag==0)
    3962:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3964:	88 23       	and	r24, r24
    3966:	09 f4       	brne	.+2      	; 0x396a <main+0x324>
    3968:	3c cf       	rjmp	.-392    	; 0x37e2 <main+0x19c>
							   _delay_ms(1000);
							   break;
					}
		}
		/* Resetting main application menue flag */
		exit_flag=0;
    396a:	1f 8e       	std	Y+31, r1	; 0x1f
    396c:	9e ce       	rjmp	.-708    	; 0x36aa <main+0x64>

0000396e <ASCII_Conversion>:
	}
}
void ASCII_Conversion(u8 *Data)
{
    396e:	df 93       	push	r29
    3970:	cf 93       	push	r28
    3972:	00 d0       	rcall	.+0      	; 0x3974 <ASCII_Conversion+0x6>
    3974:	cd b7       	in	r28, 0x3d	; 61
    3976:	de b7       	in	r29, 0x3e	; 62
    3978:	9a 83       	std	Y+2, r25	; 0x02
    397a:	89 83       	std	Y+1, r24	; 0x01
	*Data-=48;
    397c:	e9 81       	ldd	r30, Y+1	; 0x01
    397e:	fa 81       	ldd	r31, Y+2	; 0x02
    3980:	80 81       	ld	r24, Z
    3982:	80 53       	subi	r24, 0x30	; 48
    3984:	e9 81       	ldd	r30, Y+1	; 0x01
    3986:	fa 81       	ldd	r31, Y+2	; 0x02
    3988:	80 83       	st	Z, r24
}
    398a:	0f 90       	pop	r0
    398c:	0f 90       	pop	r0
    398e:	cf 91       	pop	r28
    3990:	df 91       	pop	r29
    3992:	08 95       	ret

00003994 <Admin_Mode>:

void Admin_Mode(void)
{
    3994:	df 93       	push	r29
    3996:	cf 93       	push	r28
    3998:	cd b7       	in	r28, 0x3d	; 61
    399a:	de b7       	in	r29, 0x3e	; 62
    399c:	c8 54       	subi	r28, 0x48	; 72
    399e:	d0 40       	sbci	r29, 0x00	; 0
    39a0:	0f b6       	in	r0, 0x3f	; 63
    39a2:	f8 94       	cli
    39a4:	de bf       	out	0x3e, r29	; 62
    39a6:	0f be       	out	0x3f, r0	; 63
    39a8:	cd bf       	out	0x3d, r28	; 61
		 u8 Admin_input,Admin_Pass[4]={1,2,3,4},User_Pass_Input[4]={0},counter=0,i,flag=0;
    39aa:	fe 01       	movw	r30, r28
    39ac:	ff 96       	adiw	r30, 0x3f	; 63
    39ae:	81 e0       	ldi	r24, 0x01	; 1
    39b0:	80 83       	st	Z, r24
    39b2:	fe 01       	movw	r30, r28
    39b4:	ff 96       	adiw	r30, 0x3f	; 63
    39b6:	82 e0       	ldi	r24, 0x02	; 2
    39b8:	81 83       	std	Z+1, r24	; 0x01
    39ba:	fe 01       	movw	r30, r28
    39bc:	ff 96       	adiw	r30, 0x3f	; 63
    39be:	83 e0       	ldi	r24, 0x03	; 3
    39c0:	82 83       	std	Z+2, r24	; 0x02
    39c2:	fe 01       	movw	r30, r28
    39c4:	ff 96       	adiw	r30, 0x3f	; 63
    39c6:	84 e0       	ldi	r24, 0x04	; 4
    39c8:	83 83       	std	Z+3, r24	; 0x03
    39ca:	fe 01       	movw	r30, r28
    39cc:	ed 5b       	subi	r30, 0xBD	; 189
    39ce:	ff 4f       	sbci	r31, 0xFF	; 255
    39d0:	10 82       	st	Z, r1
    39d2:	11 82       	std	Z+1, r1	; 0x01
    39d4:	12 82       	std	Z+2, r1	; 0x02
    39d6:	13 82       	std	Z+3, r1	; 0x03
    39d8:	1d ae       	std	Y+61, r1	; 0x3d
    39da:	1b ae       	std	Y+59, r1	; 0x3b
		 u8 Admin_Menu_Exit_Flag=1;//TimeOut_Counter;
    39dc:	81 e0       	ldi	r24, 0x01	; 1
    39de:	8a af       	std	Y+58, r24	; 0x3a
		 u8 Admin_Max_Trial_counter=0;//for maximum trial of password of3 times
    39e0:	19 ae       	std	Y+57, r1	; 0x39
		 Bluetooth_SendString("\nEnter Admin Password\n");
    39e2:	8a ee       	ldi	r24, 0xEA	; 234
    39e4:	90 e0       	ldi	r25, 0x00	; 0
    39e6:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
		 LCD_WriteString("Enter Admin Pass");
    39ea:	81 e0       	ldi	r24, 0x01	; 1
    39ec:	91 e0       	ldi	r25, 0x01	; 1
    39ee:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LCD_WriteString>
		 LCD_goto(5,1);
    39f2:	85 e0       	ldi	r24, 0x05	; 5
    39f4:	61 e0       	ldi	r22, 0x01	; 1
    39f6:	0e 94 13 13 	call	0x2626	; 0x2626 <LCD_goto>
    39fa:	ea c1       	rjmp	.+980    	; 0x3dd0 <Admin_Mode+0x43c>
		 while(Admin_Max_Trial_counter<=3)
		 {
			 while(counter<=3)
			 {

				 Admin_input = UART_u8Receiver();
    39fc:	0e 94 a3 1a 	call	0x3546	; 0x3546 <UART_u8Receiver>
    3a00:	8e af       	std	Y+62, r24	; 0x3e
				 ASCII_Conversion(&Admin_input);
    3a02:	ce 01       	movw	r24, r28
    3a04:	ce 96       	adiw	r24, 0x3e	; 62
    3a06:	0e 94 b7 1c 	call	0x396e	; 0x396e <ASCII_Conversion>
				if(Admin_input !=0)
    3a0a:	8e ad       	ldd	r24, Y+62	; 0x3e
    3a0c:	88 23       	and	r24, r24
    3a0e:	11 f1       	breq	.+68     	; 0x3a54 <Admin_Mode+0xc0>
				{
					if( (Admin_input<10) && (counter <=3) )
    3a10:	8e ad       	ldd	r24, Y+62	; 0x3e
    3a12:	8a 30       	cpi	r24, 0x0A	; 10
    3a14:	f8 f4       	brcc	.+62     	; 0x3a54 <Admin_Mode+0xc0>
    3a16:	8d ad       	ldd	r24, Y+61	; 0x3d
    3a18:	84 30       	cpi	r24, 0x04	; 4
    3a1a:	e0 f4       	brcc	.+56     	; 0x3a54 <Admin_Mode+0xc0>
						{
							User_Pass_Input[counter]=Admin_input;
    3a1c:	8d ad       	ldd	r24, Y+61	; 0x3d
    3a1e:	28 2f       	mov	r18, r24
    3a20:	30 e0       	ldi	r19, 0x00	; 0
    3a22:	4e ad       	ldd	r20, Y+62	; 0x3e
    3a24:	ce 01       	movw	r24, r28
    3a26:	8d 5b       	subi	r24, 0xBD	; 189
    3a28:	9f 4f       	sbci	r25, 0xFF	; 255
    3a2a:	fc 01       	movw	r30, r24
    3a2c:	e2 0f       	add	r30, r18
    3a2e:	f3 1f       	adc	r31, r19
    3a30:	40 83       	st	Z, r20
							Write_data('0'+User_Pass_Input[counter] );
    3a32:	8d ad       	ldd	r24, Y+61	; 0x3d
    3a34:	28 2f       	mov	r18, r24
    3a36:	30 e0       	ldi	r19, 0x00	; 0
    3a38:	ce 01       	movw	r24, r28
    3a3a:	8d 5b       	subi	r24, 0xBD	; 189
    3a3c:	9f 4f       	sbci	r25, 0xFF	; 255
    3a3e:	fc 01       	movw	r30, r24
    3a40:	e2 0f       	add	r30, r18
    3a42:	f3 1f       	adc	r31, r19
    3a44:	80 81       	ld	r24, Z
    3a46:	80 5d       	subi	r24, 0xD0	; 208
    3a48:	0e 94 3c 12 	call	0x2478	; 0x2478 <Write_data>
							counter++;
    3a4c:	8d ad       	ldd	r24, Y+61	; 0x3d
    3a4e:	8f 5f       	subi	r24, 0xFF	; 255
    3a50:	8d af       	std	Y+61, r24	; 0x3d
							Admin_input=0;
    3a52:	1e ae       	std	Y+62, r1	; 0x3e
		 LCD_WriteString("Enter Admin Pass");
		 LCD_goto(5,1);
		 /* Add a loop for time out 5 seconds */
		 while(Admin_Max_Trial_counter<=3)
		 {
			 while(counter<=3)
    3a54:	8d ad       	ldd	r24, Y+61	; 0x3d
    3a56:	84 30       	cpi	r24, 0x04	; 4
    3a58:	88 f2       	brcs	.-94     	; 0x39fc <Admin_Mode+0x68>
    3a5a:	80 e0       	ldi	r24, 0x00	; 0
    3a5c:	90 e0       	ldi	r25, 0x00	; 0
    3a5e:	aa ef       	ldi	r26, 0xFA	; 250
    3a60:	b3 e4       	ldi	r27, 0x43	; 67
    3a62:	8d ab       	std	Y+53, r24	; 0x35
    3a64:	9e ab       	std	Y+54, r25	; 0x36
    3a66:	af ab       	std	Y+55, r26	; 0x37
    3a68:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a6a:	6d a9       	ldd	r22, Y+53	; 0x35
    3a6c:	7e a9       	ldd	r23, Y+54	; 0x36
    3a6e:	8f a9       	ldd	r24, Y+55	; 0x37
    3a70:	98 ad       	ldd	r25, Y+56	; 0x38
    3a72:	20 e0       	ldi	r18, 0x00	; 0
    3a74:	30 e0       	ldi	r19, 0x00	; 0
    3a76:	4a ef       	ldi	r20, 0xFA	; 250
    3a78:	54 e4       	ldi	r21, 0x44	; 68
    3a7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a7e:	dc 01       	movw	r26, r24
    3a80:	cb 01       	movw	r24, r22
    3a82:	89 ab       	std	Y+49, r24	; 0x31
    3a84:	9a ab       	std	Y+50, r25	; 0x32
    3a86:	ab ab       	std	Y+51, r26	; 0x33
    3a88:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3a8a:	69 a9       	ldd	r22, Y+49	; 0x31
    3a8c:	7a a9       	ldd	r23, Y+50	; 0x32
    3a8e:	8b a9       	ldd	r24, Y+51	; 0x33
    3a90:	9c a9       	ldd	r25, Y+52	; 0x34
    3a92:	20 e0       	ldi	r18, 0x00	; 0
    3a94:	30 e0       	ldi	r19, 0x00	; 0
    3a96:	40 e8       	ldi	r20, 0x80	; 128
    3a98:	5f e3       	ldi	r21, 0x3F	; 63
    3a9a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a9e:	88 23       	and	r24, r24
    3aa0:	2c f4       	brge	.+10     	; 0x3aac <Admin_Mode+0x118>
		__ticks = 1;
    3aa2:	81 e0       	ldi	r24, 0x01	; 1
    3aa4:	90 e0       	ldi	r25, 0x00	; 0
    3aa6:	98 ab       	std	Y+48, r25	; 0x30
    3aa8:	8f a7       	std	Y+47, r24	; 0x2f
    3aaa:	3f c0       	rjmp	.+126    	; 0x3b2a <Admin_Mode+0x196>
	else if (__tmp > 65535)
    3aac:	69 a9       	ldd	r22, Y+49	; 0x31
    3aae:	7a a9       	ldd	r23, Y+50	; 0x32
    3ab0:	8b a9       	ldd	r24, Y+51	; 0x33
    3ab2:	9c a9       	ldd	r25, Y+52	; 0x34
    3ab4:	20 e0       	ldi	r18, 0x00	; 0
    3ab6:	3f ef       	ldi	r19, 0xFF	; 255
    3ab8:	4f e7       	ldi	r20, 0x7F	; 127
    3aba:	57 e4       	ldi	r21, 0x47	; 71
    3abc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3ac0:	18 16       	cp	r1, r24
    3ac2:	4c f5       	brge	.+82     	; 0x3b16 <Admin_Mode+0x182>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ac4:	6d a9       	ldd	r22, Y+53	; 0x35
    3ac6:	7e a9       	ldd	r23, Y+54	; 0x36
    3ac8:	8f a9       	ldd	r24, Y+55	; 0x37
    3aca:	98 ad       	ldd	r25, Y+56	; 0x38
    3acc:	20 e0       	ldi	r18, 0x00	; 0
    3ace:	30 e0       	ldi	r19, 0x00	; 0
    3ad0:	40 e2       	ldi	r20, 0x20	; 32
    3ad2:	51 e4       	ldi	r21, 0x41	; 65
    3ad4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ad8:	dc 01       	movw	r26, r24
    3ada:	cb 01       	movw	r24, r22
    3adc:	bc 01       	movw	r22, r24
    3ade:	cd 01       	movw	r24, r26
    3ae0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ae4:	dc 01       	movw	r26, r24
    3ae6:	cb 01       	movw	r24, r22
    3ae8:	98 ab       	std	Y+48, r25	; 0x30
    3aea:	8f a7       	std	Y+47, r24	; 0x2f
    3aec:	0f c0       	rjmp	.+30     	; 0x3b0c <Admin_Mode+0x178>
    3aee:	88 ec       	ldi	r24, 0xC8	; 200
    3af0:	90 e0       	ldi	r25, 0x00	; 0
    3af2:	9e a7       	std	Y+46, r25	; 0x2e
    3af4:	8d a7       	std	Y+45, r24	; 0x2d
    3af6:	8d a5       	ldd	r24, Y+45	; 0x2d
    3af8:	9e a5       	ldd	r25, Y+46	; 0x2e
    3afa:	01 97       	sbiw	r24, 0x01	; 1
    3afc:	f1 f7       	brne	.-4      	; 0x3afa <Admin_Mode+0x166>
    3afe:	9e a7       	std	Y+46, r25	; 0x2e
    3b00:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b02:	8f a5       	ldd	r24, Y+47	; 0x2f
    3b04:	98 a9       	ldd	r25, Y+48	; 0x30
    3b06:	01 97       	sbiw	r24, 0x01	; 1
    3b08:	98 ab       	std	Y+48, r25	; 0x30
    3b0a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b0c:	8f a5       	ldd	r24, Y+47	; 0x2f
    3b0e:	98 a9       	ldd	r25, Y+48	; 0x30
    3b10:	00 97       	sbiw	r24, 0x00	; 0
    3b12:	69 f7       	brne	.-38     	; 0x3aee <Admin_Mode+0x15a>
    3b14:	14 c0       	rjmp	.+40     	; 0x3b3e <Admin_Mode+0x1aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b16:	69 a9       	ldd	r22, Y+49	; 0x31
    3b18:	7a a9       	ldd	r23, Y+50	; 0x32
    3b1a:	8b a9       	ldd	r24, Y+51	; 0x33
    3b1c:	9c a9       	ldd	r25, Y+52	; 0x34
    3b1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b22:	dc 01       	movw	r26, r24
    3b24:	cb 01       	movw	r24, r22
    3b26:	98 ab       	std	Y+48, r25	; 0x30
    3b28:	8f a7       	std	Y+47, r24	; 0x2f
    3b2a:	8f a5       	ldd	r24, Y+47	; 0x2f
    3b2c:	98 a9       	ldd	r25, Y+48	; 0x30
    3b2e:	9c a7       	std	Y+44, r25	; 0x2c
    3b30:	8b a7       	std	Y+43, r24	; 0x2b
    3b32:	8b a5       	ldd	r24, Y+43	; 0x2b
    3b34:	9c a5       	ldd	r25, Y+44	; 0x2c
    3b36:	01 97       	sbiw	r24, 0x01	; 1
    3b38:	f1 f7       	brne	.-4      	; 0x3b36 <Admin_Mode+0x1a2>
    3b3a:	9c a7       	std	Y+44, r25	; 0x2c
    3b3c:	8b a7       	std	Y+43, r24	; 0x2b
							Admin_input=0;
						}
				}
			 }
			 _delay_ms(500);
			 if(counter == 4)
    3b3e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3b40:	84 30       	cpi	r24, 0x04	; 4
    3b42:	f9 f4       	brne	.+62     	; 0x3b82 <Admin_Mode+0x1ee>
			 {
				 for(i=0;i<=3;i++)
    3b44:	1c ae       	std	Y+60, r1	; 0x3c
    3b46:	1a c0       	rjmp	.+52     	; 0x3b7c <Admin_Mode+0x1e8>
				 {
					 if (Admin_Pass[i]==User_Pass_Input[i])
    3b48:	8c ad       	ldd	r24, Y+60	; 0x3c
    3b4a:	28 2f       	mov	r18, r24
    3b4c:	30 e0       	ldi	r19, 0x00	; 0
    3b4e:	ce 01       	movw	r24, r28
    3b50:	cf 96       	adiw	r24, 0x3f	; 63
    3b52:	fc 01       	movw	r30, r24
    3b54:	e2 0f       	add	r30, r18
    3b56:	f3 1f       	adc	r31, r19
    3b58:	40 81       	ld	r20, Z
    3b5a:	8c ad       	ldd	r24, Y+60	; 0x3c
    3b5c:	28 2f       	mov	r18, r24
    3b5e:	30 e0       	ldi	r19, 0x00	; 0
    3b60:	ce 01       	movw	r24, r28
    3b62:	8d 5b       	subi	r24, 0xBD	; 189
    3b64:	9f 4f       	sbci	r25, 0xFF	; 255
    3b66:	fc 01       	movw	r30, r24
    3b68:	e2 0f       	add	r30, r18
    3b6a:	f3 1f       	adc	r31, r19
    3b6c:	80 81       	ld	r24, Z
    3b6e:	48 17       	cp	r20, r24
    3b70:	11 f0       	breq	.+4      	; 0x3b76 <Admin_Mode+0x1e2>
					 {
						 continue;
					 }
					 else
					 {
						 flag=1;
    3b72:	81 e0       	ldi	r24, 0x01	; 1
    3b74:	8b af       	std	Y+59, r24	; 0x3b
				}
			 }
			 _delay_ms(500);
			 if(counter == 4)
			 {
				 for(i=0;i<=3;i++)
    3b76:	8c ad       	ldd	r24, Y+60	; 0x3c
    3b78:	8f 5f       	subi	r24, 0xFF	; 255
    3b7a:	8c af       	std	Y+60, r24	; 0x3c
    3b7c:	8c ad       	ldd	r24, Y+60	; 0x3c
    3b7e:	84 30       	cpi	r24, 0x04	; 4
    3b80:	18 f3       	brcs	.-58     	; 0x3b48 <Admin_Mode+0x1b4>
					 {
						 flag=1;
					 }
				 }
			 }
			 if(flag==1)
    3b82:	8b ad       	ldd	r24, Y+59	; 0x3b
    3b84:	81 30       	cpi	r24, 0x01	; 1
    3b86:	09 f0       	breq	.+2      	; 0x3b8a <Admin_Mode+0x1f6>
    3b88:	98 c0       	rjmp	.+304    	; 0x3cba <Admin_Mode+0x326>
			 {
				 LCD_CLR();
    3b8a:	0e 94 2b 13 	call	0x2656	; 0x2656 <LCD_CLR>
				 Bluetooth_SendString("\n--------------------\n");
    3b8e:	80 e6       	ldi	r24, 0x60	; 96
    3b90:	90 e0       	ldi	r25, 0x00	; 0
    3b92:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
				 Bluetooth_SendString("Wrong Pass");
    3b96:	82 e1       	ldi	r24, 0x12	; 18
    3b98:	91 e0       	ldi	r25, 0x01	; 1
    3b9a:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
				 LCD_WriteString("Wrong Pass");
    3b9e:	82 e1       	ldi	r24, 0x12	; 18
    3ba0:	91 e0       	ldi	r25, 0x01	; 1
    3ba2:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LCD_WriteString>
				 flag=0;
    3ba6:	1b ae       	std	Y+59, r1	; 0x3b
				 counter=0;//to reset the array
    3ba8:	1d ae       	std	Y+61, r1	; 0x3d
				 Admin_Max_Trial_counter++;
    3baa:	89 ad       	ldd	r24, Y+57	; 0x39
    3bac:	8f 5f       	subi	r24, 0xFF	; 255
    3bae:	89 af       	std	Y+57, r24	; 0x39
    3bb0:	80 e0       	ldi	r24, 0x00	; 0
    3bb2:	90 e4       	ldi	r25, 0x40	; 64
    3bb4:	ac e1       	ldi	r26, 0x1C	; 28
    3bb6:	b5 e4       	ldi	r27, 0x45	; 69
    3bb8:	8f a3       	std	Y+39, r24	; 0x27
    3bba:	98 a7       	std	Y+40, r25	; 0x28
    3bbc:	a9 a7       	std	Y+41, r26	; 0x29
    3bbe:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bc0:	6f a1       	ldd	r22, Y+39	; 0x27
    3bc2:	78 a5       	ldd	r23, Y+40	; 0x28
    3bc4:	89 a5       	ldd	r24, Y+41	; 0x29
    3bc6:	9a a5       	ldd	r25, Y+42	; 0x2a
    3bc8:	20 e0       	ldi	r18, 0x00	; 0
    3bca:	30 e0       	ldi	r19, 0x00	; 0
    3bcc:	4a ef       	ldi	r20, 0xFA	; 250
    3bce:	54 e4       	ldi	r21, 0x44	; 68
    3bd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bd4:	dc 01       	movw	r26, r24
    3bd6:	cb 01       	movw	r24, r22
    3bd8:	8b a3       	std	Y+35, r24	; 0x23
    3bda:	9c a3       	std	Y+36, r25	; 0x24
    3bdc:	ad a3       	std	Y+37, r26	; 0x25
    3bde:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3be0:	6b a1       	ldd	r22, Y+35	; 0x23
    3be2:	7c a1       	ldd	r23, Y+36	; 0x24
    3be4:	8d a1       	ldd	r24, Y+37	; 0x25
    3be6:	9e a1       	ldd	r25, Y+38	; 0x26
    3be8:	20 e0       	ldi	r18, 0x00	; 0
    3bea:	30 e0       	ldi	r19, 0x00	; 0
    3bec:	40 e8       	ldi	r20, 0x80	; 128
    3bee:	5f e3       	ldi	r21, 0x3F	; 63
    3bf0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3bf4:	88 23       	and	r24, r24
    3bf6:	2c f4       	brge	.+10     	; 0x3c02 <Admin_Mode+0x26e>
		__ticks = 1;
    3bf8:	81 e0       	ldi	r24, 0x01	; 1
    3bfa:	90 e0       	ldi	r25, 0x00	; 0
    3bfc:	9a a3       	std	Y+34, r25	; 0x22
    3bfe:	89 a3       	std	Y+33, r24	; 0x21
    3c00:	3f c0       	rjmp	.+126    	; 0x3c80 <Admin_Mode+0x2ec>
	else if (__tmp > 65535)
    3c02:	6b a1       	ldd	r22, Y+35	; 0x23
    3c04:	7c a1       	ldd	r23, Y+36	; 0x24
    3c06:	8d a1       	ldd	r24, Y+37	; 0x25
    3c08:	9e a1       	ldd	r25, Y+38	; 0x26
    3c0a:	20 e0       	ldi	r18, 0x00	; 0
    3c0c:	3f ef       	ldi	r19, 0xFF	; 255
    3c0e:	4f e7       	ldi	r20, 0x7F	; 127
    3c10:	57 e4       	ldi	r21, 0x47	; 71
    3c12:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3c16:	18 16       	cp	r1, r24
    3c18:	4c f5       	brge	.+82     	; 0x3c6c <Admin_Mode+0x2d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c1a:	6f a1       	ldd	r22, Y+39	; 0x27
    3c1c:	78 a5       	ldd	r23, Y+40	; 0x28
    3c1e:	89 a5       	ldd	r24, Y+41	; 0x29
    3c20:	9a a5       	ldd	r25, Y+42	; 0x2a
    3c22:	20 e0       	ldi	r18, 0x00	; 0
    3c24:	30 e0       	ldi	r19, 0x00	; 0
    3c26:	40 e2       	ldi	r20, 0x20	; 32
    3c28:	51 e4       	ldi	r21, 0x41	; 65
    3c2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c2e:	dc 01       	movw	r26, r24
    3c30:	cb 01       	movw	r24, r22
    3c32:	bc 01       	movw	r22, r24
    3c34:	cd 01       	movw	r24, r26
    3c36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c3a:	dc 01       	movw	r26, r24
    3c3c:	cb 01       	movw	r24, r22
    3c3e:	9a a3       	std	Y+34, r25	; 0x22
    3c40:	89 a3       	std	Y+33, r24	; 0x21
    3c42:	0f c0       	rjmp	.+30     	; 0x3c62 <Admin_Mode+0x2ce>
    3c44:	88 ec       	ldi	r24, 0xC8	; 200
    3c46:	90 e0       	ldi	r25, 0x00	; 0
    3c48:	98 a3       	std	Y+32, r25	; 0x20
    3c4a:	8f 8f       	std	Y+31, r24	; 0x1f
    3c4c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3c4e:	98 a1       	ldd	r25, Y+32	; 0x20
    3c50:	01 97       	sbiw	r24, 0x01	; 1
    3c52:	f1 f7       	brne	.-4      	; 0x3c50 <Admin_Mode+0x2bc>
    3c54:	98 a3       	std	Y+32, r25	; 0x20
    3c56:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c58:	89 a1       	ldd	r24, Y+33	; 0x21
    3c5a:	9a a1       	ldd	r25, Y+34	; 0x22
    3c5c:	01 97       	sbiw	r24, 0x01	; 1
    3c5e:	9a a3       	std	Y+34, r25	; 0x22
    3c60:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c62:	89 a1       	ldd	r24, Y+33	; 0x21
    3c64:	9a a1       	ldd	r25, Y+34	; 0x22
    3c66:	00 97       	sbiw	r24, 0x00	; 0
    3c68:	69 f7       	brne	.-38     	; 0x3c44 <Admin_Mode+0x2b0>
    3c6a:	14 c0       	rjmp	.+40     	; 0x3c94 <Admin_Mode+0x300>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c6c:	6b a1       	ldd	r22, Y+35	; 0x23
    3c6e:	7c a1       	ldd	r23, Y+36	; 0x24
    3c70:	8d a1       	ldd	r24, Y+37	; 0x25
    3c72:	9e a1       	ldd	r25, Y+38	; 0x26
    3c74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c78:	dc 01       	movw	r26, r24
    3c7a:	cb 01       	movw	r24, r22
    3c7c:	9a a3       	std	Y+34, r25	; 0x22
    3c7e:	89 a3       	std	Y+33, r24	; 0x21
    3c80:	89 a1       	ldd	r24, Y+33	; 0x21
    3c82:	9a a1       	ldd	r25, Y+34	; 0x22
    3c84:	9e 8f       	std	Y+30, r25	; 0x1e
    3c86:	8d 8f       	std	Y+29, r24	; 0x1d
    3c88:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3c8a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3c8c:	01 97       	sbiw	r24, 0x01	; 1
    3c8e:	f1 f7       	brne	.-4      	; 0x3c8c <Admin_Mode+0x2f8>
    3c90:	9e 8f       	std	Y+30, r25	; 0x1e
    3c92:	8d 8f       	std	Y+29, r24	; 0x1d
				 _delay_ms(2500);
				 LCD_CLR();
    3c94:	0e 94 2b 13 	call	0x2656	; 0x2656 <LCD_CLR>
				 Bluetooth_SendString("\n--------------------\n");
    3c98:	80 e6       	ldi	r24, 0x60	; 96
    3c9a:	90 e0       	ldi	r25, 0x00	; 0
    3c9c:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
				 Bluetooth_SendString("Enter Your Pass");
    3ca0:	8d e1       	ldi	r24, 0x1D	; 29
    3ca2:	91 e0       	ldi	r25, 0x01	; 1
    3ca4:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
				 LCD_WriteString("Enter Your Pass");
    3ca8:	8d e1       	ldi	r24, 0x1D	; 29
    3caa:	91 e0       	ldi	r25, 0x01	; 1
    3cac:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LCD_WriteString>
				 LCD_goto(5,1);
    3cb0:	85 e0       	ldi	r24, 0x05	; 5
    3cb2:	61 e0       	ldi	r22, 0x01	; 1
    3cb4:	0e 94 13 13 	call	0x2626	; 0x2626 <LCD_goto>
    3cb8:	02 c0       	rjmp	.+4      	; 0x3cbe <Admin_Mode+0x32a>

			 }
			 else
			 {
				 Admin_Max_Trial_counter=4;
    3cba:	84 e0       	ldi	r24, 0x04	; 4
    3cbc:	89 af       	std	Y+57, r24	; 0x39
			 }
			 if (Admin_Max_Trial_counter==3)
    3cbe:	89 ad       	ldd	r24, Y+57	; 0x39
    3cc0:	83 30       	cpi	r24, 0x03	; 3
    3cc2:	09 f0       	breq	.+2      	; 0x3cc6 <Admin_Mode+0x332>
    3cc4:	85 c0       	rjmp	.+266    	; 0x3dd0 <Admin_Mode+0x43c>
			 {
				 /* for loop i=60;i>=0;i-- with delay 1 second */
				 LCD_CLR();
    3cc6:	0e 94 2b 13 	call	0x2656	; 0x2656 <LCD_CLR>
				 Bluetooth_SendString("\n--------------------\n");
    3cca:	80 e6       	ldi	r24, 0x60	; 96
    3ccc:	90 e0       	ldi	r25, 0x00	; 0
    3cce:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
				 Bluetooth_SendString("Time out");
    3cd2:	8d e2       	ldi	r24, 0x2D	; 45
    3cd4:	91 e0       	ldi	r25, 0x01	; 1
    3cd6:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
				 LCD_WriteString("Time Out");
    3cda:	86 e3       	ldi	r24, 0x36	; 54
    3cdc:	91 e0       	ldi	r25, 0x01	; 1
    3cde:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LCD_WriteString>
    3ce2:	80 e0       	ldi	r24, 0x00	; 0
    3ce4:	90 e0       	ldi	r25, 0x00	; 0
    3ce6:	aa e7       	ldi	r26, 0x7A	; 122
    3ce8:	b4 e4       	ldi	r27, 0x44	; 68
    3cea:	89 8f       	std	Y+25, r24	; 0x19
    3cec:	9a 8f       	std	Y+26, r25	; 0x1a
    3cee:	ab 8f       	std	Y+27, r26	; 0x1b
    3cf0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cf2:	69 8d       	ldd	r22, Y+25	; 0x19
    3cf4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3cf6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3cf8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3cfa:	20 e0       	ldi	r18, 0x00	; 0
    3cfc:	30 e0       	ldi	r19, 0x00	; 0
    3cfe:	4a ef       	ldi	r20, 0xFA	; 250
    3d00:	54 e4       	ldi	r21, 0x44	; 68
    3d02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d06:	dc 01       	movw	r26, r24
    3d08:	cb 01       	movw	r24, r22
    3d0a:	8d 8b       	std	Y+21, r24	; 0x15
    3d0c:	9e 8b       	std	Y+22, r25	; 0x16
    3d0e:	af 8b       	std	Y+23, r26	; 0x17
    3d10:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3d12:	6d 89       	ldd	r22, Y+21	; 0x15
    3d14:	7e 89       	ldd	r23, Y+22	; 0x16
    3d16:	8f 89       	ldd	r24, Y+23	; 0x17
    3d18:	98 8d       	ldd	r25, Y+24	; 0x18
    3d1a:	20 e0       	ldi	r18, 0x00	; 0
    3d1c:	30 e0       	ldi	r19, 0x00	; 0
    3d1e:	40 e8       	ldi	r20, 0x80	; 128
    3d20:	5f e3       	ldi	r21, 0x3F	; 63
    3d22:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3d26:	88 23       	and	r24, r24
    3d28:	2c f4       	brge	.+10     	; 0x3d34 <Admin_Mode+0x3a0>
		__ticks = 1;
    3d2a:	81 e0       	ldi	r24, 0x01	; 1
    3d2c:	90 e0       	ldi	r25, 0x00	; 0
    3d2e:	9c 8b       	std	Y+20, r25	; 0x14
    3d30:	8b 8b       	std	Y+19, r24	; 0x13
    3d32:	3f c0       	rjmp	.+126    	; 0x3db2 <Admin_Mode+0x41e>
	else if (__tmp > 65535)
    3d34:	6d 89       	ldd	r22, Y+21	; 0x15
    3d36:	7e 89       	ldd	r23, Y+22	; 0x16
    3d38:	8f 89       	ldd	r24, Y+23	; 0x17
    3d3a:	98 8d       	ldd	r25, Y+24	; 0x18
    3d3c:	20 e0       	ldi	r18, 0x00	; 0
    3d3e:	3f ef       	ldi	r19, 0xFF	; 255
    3d40:	4f e7       	ldi	r20, 0x7F	; 127
    3d42:	57 e4       	ldi	r21, 0x47	; 71
    3d44:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3d48:	18 16       	cp	r1, r24
    3d4a:	4c f5       	brge	.+82     	; 0x3d9e <Admin_Mode+0x40a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d4c:	69 8d       	ldd	r22, Y+25	; 0x19
    3d4e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3d50:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d52:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3d54:	20 e0       	ldi	r18, 0x00	; 0
    3d56:	30 e0       	ldi	r19, 0x00	; 0
    3d58:	40 e2       	ldi	r20, 0x20	; 32
    3d5a:	51 e4       	ldi	r21, 0x41	; 65
    3d5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d60:	dc 01       	movw	r26, r24
    3d62:	cb 01       	movw	r24, r22
    3d64:	bc 01       	movw	r22, r24
    3d66:	cd 01       	movw	r24, r26
    3d68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d6c:	dc 01       	movw	r26, r24
    3d6e:	cb 01       	movw	r24, r22
    3d70:	9c 8b       	std	Y+20, r25	; 0x14
    3d72:	8b 8b       	std	Y+19, r24	; 0x13
    3d74:	0f c0       	rjmp	.+30     	; 0x3d94 <Admin_Mode+0x400>
    3d76:	88 ec       	ldi	r24, 0xC8	; 200
    3d78:	90 e0       	ldi	r25, 0x00	; 0
    3d7a:	9a 8b       	std	Y+18, r25	; 0x12
    3d7c:	89 8b       	std	Y+17, r24	; 0x11
    3d7e:	89 89       	ldd	r24, Y+17	; 0x11
    3d80:	9a 89       	ldd	r25, Y+18	; 0x12
    3d82:	01 97       	sbiw	r24, 0x01	; 1
    3d84:	f1 f7       	brne	.-4      	; 0x3d82 <Admin_Mode+0x3ee>
    3d86:	9a 8b       	std	Y+18, r25	; 0x12
    3d88:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d8a:	8b 89       	ldd	r24, Y+19	; 0x13
    3d8c:	9c 89       	ldd	r25, Y+20	; 0x14
    3d8e:	01 97       	sbiw	r24, 0x01	; 1
    3d90:	9c 8b       	std	Y+20, r25	; 0x14
    3d92:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d94:	8b 89       	ldd	r24, Y+19	; 0x13
    3d96:	9c 89       	ldd	r25, Y+20	; 0x14
    3d98:	00 97       	sbiw	r24, 0x00	; 0
    3d9a:	69 f7       	brne	.-38     	; 0x3d76 <Admin_Mode+0x3e2>
    3d9c:	14 c0       	rjmp	.+40     	; 0x3dc6 <Admin_Mode+0x432>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d9e:	6d 89       	ldd	r22, Y+21	; 0x15
    3da0:	7e 89       	ldd	r23, Y+22	; 0x16
    3da2:	8f 89       	ldd	r24, Y+23	; 0x17
    3da4:	98 8d       	ldd	r25, Y+24	; 0x18
    3da6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3daa:	dc 01       	movw	r26, r24
    3dac:	cb 01       	movw	r24, r22
    3dae:	9c 8b       	std	Y+20, r25	; 0x14
    3db0:	8b 8b       	std	Y+19, r24	; 0x13
    3db2:	8b 89       	ldd	r24, Y+19	; 0x13
    3db4:	9c 89       	ldd	r25, Y+20	; 0x14
    3db6:	98 8b       	std	Y+16, r25	; 0x10
    3db8:	8f 87       	std	Y+15, r24	; 0x0f
    3dba:	8f 85       	ldd	r24, Y+15	; 0x0f
    3dbc:	98 89       	ldd	r25, Y+16	; 0x10
    3dbe:	01 97       	sbiw	r24, 0x01	; 1
    3dc0:	f1 f7       	brne	.-4      	; 0x3dbe <Admin_Mode+0x42a>
    3dc2:	98 8b       	std	Y+16, r25	; 0x10
    3dc4:	8f 87       	std	Y+15, r24	; 0x0f
				 _delay_ms(1000);
				 Time_Out_Function();
    3dc6:	0e 94 0f 25 	call	0x4a1e	; 0x4a1e <Time_Out_Function>
				 Admin_Menu_Exit_Flag=0;
    3dca:	1a ae       	std	Y+58, r1	; 0x3a
				 Admin_Max_Trial_counter=4;
    3dcc:	84 e0       	ldi	r24, 0x04	; 4
    3dce:	89 af       	std	Y+57, r24	; 0x39
		 u8 Admin_Max_Trial_counter=0;//for maximum trial of password of3 times
		 Bluetooth_SendString("\nEnter Admin Password\n");
		 LCD_WriteString("Enter Admin Pass");
		 LCD_goto(5,1);
		 /* Add a loop for time out 5 seconds */
		 while(Admin_Max_Trial_counter<=3)
    3dd0:	89 ad       	ldd	r24, Y+57	; 0x39
    3dd2:	84 30       	cpi	r24, 0x04	; 4
    3dd4:	08 f4       	brcc	.+2      	; 0x3dd8 <Admin_Mode+0x444>
    3dd6:	3e ce       	rjmp	.-900    	; 0x3a54 <Admin_Mode+0xc0>
				 Time_Out_Function();
				 Admin_Menu_Exit_Flag=0;
				 Admin_Max_Trial_counter=4;
			 }
		 }
	LCD_CLR();
    3dd8:	0e 94 2b 13 	call	0x2656	; 0x2656 <LCD_CLR>
    3ddc:	bd c0       	rjmp	.+378    	; 0x3f58 <Admin_Mode+0x5c4>
	while(Admin_Menu_Exit_Flag==1)
	{
		if(Delete_User_Global_Return==1)
    3dde:	80 91 31 05 	lds	r24, 0x0531
    3de2:	81 30       	cpi	r24, 0x01	; 1
    3de4:	09 f4       	brne	.+2      	; 0x3de8 <Admin_Mode+0x454>
    3de6:	bc c0       	rjmp	.+376    	; 0x3f60 <Admin_Mode+0x5cc>
		{
			break;
		}
		LCD_CLR();
    3de8:	0e 94 2b 13 	call	0x2656	; 0x2656 <LCD_CLR>
		 Bluetooth_SendString("\n--------------------\n");
    3dec:	80 e6       	ldi	r24, 0x60	; 96
    3dee:	90 e0       	ldi	r25, 0x00	; 0
    3df0:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
		 Bluetooth_SendString("1)Add User\n2)Delete User\n3)Back");
    3df4:	8f e3       	ldi	r24, 0x3F	; 63
    3df6:	91 e0       	ldi	r25, 0x01	; 1
    3df8:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
		LCD_WriteString("In Admin Mode");
    3dfc:	8f e5       	ldi	r24, 0x5F	; 95
    3dfe:	91 e0       	ldi	r25, 0x01	; 1
    3e00:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LCD_WriteString>
    3e04:	80 e0       	ldi	r24, 0x00	; 0
    3e06:	90 e0       	ldi	r25, 0x00	; 0
    3e08:	aa e7       	ldi	r26, 0x7A	; 122
    3e0a:	b4 e4       	ldi	r27, 0x44	; 68
    3e0c:	8b 87       	std	Y+11, r24	; 0x0b
    3e0e:	9c 87       	std	Y+12, r25	; 0x0c
    3e10:	ad 87       	std	Y+13, r26	; 0x0d
    3e12:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e14:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e16:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e18:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e1c:	20 e0       	ldi	r18, 0x00	; 0
    3e1e:	30 e0       	ldi	r19, 0x00	; 0
    3e20:	4a ef       	ldi	r20, 0xFA	; 250
    3e22:	54 e4       	ldi	r21, 0x44	; 68
    3e24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e28:	dc 01       	movw	r26, r24
    3e2a:	cb 01       	movw	r24, r22
    3e2c:	8f 83       	std	Y+7, r24	; 0x07
    3e2e:	98 87       	std	Y+8, r25	; 0x08
    3e30:	a9 87       	std	Y+9, r26	; 0x09
    3e32:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3e34:	6f 81       	ldd	r22, Y+7	; 0x07
    3e36:	78 85       	ldd	r23, Y+8	; 0x08
    3e38:	89 85       	ldd	r24, Y+9	; 0x09
    3e3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e3c:	20 e0       	ldi	r18, 0x00	; 0
    3e3e:	30 e0       	ldi	r19, 0x00	; 0
    3e40:	40 e8       	ldi	r20, 0x80	; 128
    3e42:	5f e3       	ldi	r21, 0x3F	; 63
    3e44:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3e48:	88 23       	and	r24, r24
    3e4a:	2c f4       	brge	.+10     	; 0x3e56 <Admin_Mode+0x4c2>
		__ticks = 1;
    3e4c:	81 e0       	ldi	r24, 0x01	; 1
    3e4e:	90 e0       	ldi	r25, 0x00	; 0
    3e50:	9e 83       	std	Y+6, r25	; 0x06
    3e52:	8d 83       	std	Y+5, r24	; 0x05
    3e54:	3f c0       	rjmp	.+126    	; 0x3ed4 <Admin_Mode+0x540>
	else if (__tmp > 65535)
    3e56:	6f 81       	ldd	r22, Y+7	; 0x07
    3e58:	78 85       	ldd	r23, Y+8	; 0x08
    3e5a:	89 85       	ldd	r24, Y+9	; 0x09
    3e5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e5e:	20 e0       	ldi	r18, 0x00	; 0
    3e60:	3f ef       	ldi	r19, 0xFF	; 255
    3e62:	4f e7       	ldi	r20, 0x7F	; 127
    3e64:	57 e4       	ldi	r21, 0x47	; 71
    3e66:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3e6a:	18 16       	cp	r1, r24
    3e6c:	4c f5       	brge	.+82     	; 0x3ec0 <Admin_Mode+0x52c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e70:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e72:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e74:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e76:	20 e0       	ldi	r18, 0x00	; 0
    3e78:	30 e0       	ldi	r19, 0x00	; 0
    3e7a:	40 e2       	ldi	r20, 0x20	; 32
    3e7c:	51 e4       	ldi	r21, 0x41	; 65
    3e7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e82:	dc 01       	movw	r26, r24
    3e84:	cb 01       	movw	r24, r22
    3e86:	bc 01       	movw	r22, r24
    3e88:	cd 01       	movw	r24, r26
    3e8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e8e:	dc 01       	movw	r26, r24
    3e90:	cb 01       	movw	r24, r22
    3e92:	9e 83       	std	Y+6, r25	; 0x06
    3e94:	8d 83       	std	Y+5, r24	; 0x05
    3e96:	0f c0       	rjmp	.+30     	; 0x3eb6 <Admin_Mode+0x522>
    3e98:	88 ec       	ldi	r24, 0xC8	; 200
    3e9a:	90 e0       	ldi	r25, 0x00	; 0
    3e9c:	9c 83       	std	Y+4, r25	; 0x04
    3e9e:	8b 83       	std	Y+3, r24	; 0x03
    3ea0:	8b 81       	ldd	r24, Y+3	; 0x03
    3ea2:	9c 81       	ldd	r25, Y+4	; 0x04
    3ea4:	01 97       	sbiw	r24, 0x01	; 1
    3ea6:	f1 f7       	brne	.-4      	; 0x3ea4 <Admin_Mode+0x510>
    3ea8:	9c 83       	std	Y+4, r25	; 0x04
    3eaa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3eac:	8d 81       	ldd	r24, Y+5	; 0x05
    3eae:	9e 81       	ldd	r25, Y+6	; 0x06
    3eb0:	01 97       	sbiw	r24, 0x01	; 1
    3eb2:	9e 83       	std	Y+6, r25	; 0x06
    3eb4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3eb6:	8d 81       	ldd	r24, Y+5	; 0x05
    3eb8:	9e 81       	ldd	r25, Y+6	; 0x06
    3eba:	00 97       	sbiw	r24, 0x00	; 0
    3ebc:	69 f7       	brne	.-38     	; 0x3e98 <Admin_Mode+0x504>
    3ebe:	14 c0       	rjmp	.+40     	; 0x3ee8 <Admin_Mode+0x554>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ec0:	6f 81       	ldd	r22, Y+7	; 0x07
    3ec2:	78 85       	ldd	r23, Y+8	; 0x08
    3ec4:	89 85       	ldd	r24, Y+9	; 0x09
    3ec6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ec8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ecc:	dc 01       	movw	r26, r24
    3ece:	cb 01       	movw	r24, r22
    3ed0:	9e 83       	std	Y+6, r25	; 0x06
    3ed2:	8d 83       	std	Y+5, r24	; 0x05
    3ed4:	8d 81       	ldd	r24, Y+5	; 0x05
    3ed6:	9e 81       	ldd	r25, Y+6	; 0x06
    3ed8:	9a 83       	std	Y+2, r25	; 0x02
    3eda:	89 83       	std	Y+1, r24	; 0x01
    3edc:	89 81       	ldd	r24, Y+1	; 0x01
    3ede:	9a 81       	ldd	r25, Y+2	; 0x02
    3ee0:	01 97       	sbiw	r24, 0x01	; 1
    3ee2:	f1 f7       	brne	.-4      	; 0x3ee0 <Admin_Mode+0x54c>
    3ee4:	9a 83       	std	Y+2, r25	; 0x02
    3ee6:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		LCD_CLR();
    3ee8:	0e 94 2b 13 	call	0x2656	; 0x2656 <LCD_CLR>
		LCD_WriteString("1)Add User");
    3eec:	8d e6       	ldi	r24, 0x6D	; 109
    3eee:	91 e0       	ldi	r25, 0x01	; 1
    3ef0:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LCD_WriteString>
		LCD_goto(0,1);
    3ef4:	80 e0       	ldi	r24, 0x00	; 0
    3ef6:	61 e0       	ldi	r22, 0x01	; 1
    3ef8:	0e 94 13 13 	call	0x2626	; 0x2626 <LCD_goto>
		LCD_WriteString("2)Delete User");
    3efc:	88 e7       	ldi	r24, 0x78	; 120
    3efe:	91 e0       	ldi	r25, 0x01	; 1
    3f00:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LCD_WriteString>
		Admin_input = UART_u8Receiver();
    3f04:	0e 94 a3 1a 	call	0x3546	; 0x3546 <UART_u8Receiver>
    3f08:	8e af       	std	Y+62, r24	; 0x3e
		ASCII_Conversion(&Admin_input);
    3f0a:	ce 01       	movw	r24, r28
    3f0c:	ce 96       	adiw	r24, 0x3e	; 62
    3f0e:	0e 94 b7 1c 	call	0x396e	; 0x396e <ASCII_Conversion>
		//Add while loop here
		switch(Admin_input)
    3f12:	8e ad       	ldd	r24, Y+62	; 0x3e
    3f14:	28 2f       	mov	r18, r24
    3f16:	30 e0       	ldi	r19, 0x00	; 0
    3f18:	29 96       	adiw	r28, 0x09	; 9
    3f1a:	3f af       	std	Y+63, r19	; 0x3f
    3f1c:	2e af       	std	Y+62, r18	; 0x3e
    3f1e:	29 97       	sbiw	r28, 0x09	; 9
    3f20:	29 96       	adiw	r28, 0x09	; 9
    3f22:	8e ad       	ldd	r24, Y+62	; 0x3e
    3f24:	9f ad       	ldd	r25, Y+63	; 0x3f
    3f26:	29 97       	sbiw	r28, 0x09	; 9
    3f28:	82 30       	cpi	r24, 0x02	; 2
    3f2a:	91 05       	cpc	r25, r1
    3f2c:	89 f0       	breq	.+34     	; 0x3f50 <Admin_Mode+0x5bc>
    3f2e:	29 96       	adiw	r28, 0x09	; 9
    3f30:	2e ad       	ldd	r18, Y+62	; 0x3e
    3f32:	3f ad       	ldd	r19, Y+63	; 0x3f
    3f34:	29 97       	sbiw	r28, 0x09	; 9
    3f36:	23 30       	cpi	r18, 0x03	; 3
    3f38:	31 05       	cpc	r19, r1
    3f3a:	69 f0       	breq	.+26     	; 0x3f56 <Admin_Mode+0x5c2>
    3f3c:	29 96       	adiw	r28, 0x09	; 9
    3f3e:	8e ad       	ldd	r24, Y+62	; 0x3e
    3f40:	9f ad       	ldd	r25, Y+63	; 0x3f
    3f42:	29 97       	sbiw	r28, 0x09	; 9
    3f44:	81 30       	cpi	r24, 0x01	; 1
    3f46:	91 05       	cpc	r25, r1
    3f48:	39 f4       	brne	.+14     	; 0x3f58 <Admin_Mode+0x5c4>
			{
				case 1:Add_User();
    3f4a:	0e 94 28 30 	call	0x6050	; 0x6050 <Add_User>
    3f4e:	04 c0       	rjmp	.+8      	; 0x3f58 <Admin_Mode+0x5c4>
					break;
				case 2:Delete_User();
    3f50:	0e 94 e3 31 	call	0x63c6	; 0x63c6 <Delete_User>
    3f54:	01 c0       	rjmp	.+2      	; 0x3f58 <Admin_Mode+0x5c4>
					break;
				case 3:Admin_Menu_Exit_Flag=0;
    3f56:	1a ae       	std	Y+58, r1	; 0x3a
				 Admin_Menu_Exit_Flag=0;
				 Admin_Max_Trial_counter=4;
			 }
		 }
	LCD_CLR();
	while(Admin_Menu_Exit_Flag==1)
    3f58:	8a ad       	ldd	r24, Y+58	; 0x3a
    3f5a:	81 30       	cpi	r24, 0x01	; 1
    3f5c:	09 f4       	brne	.+2      	; 0x3f60 <Admin_Mode+0x5cc>
    3f5e:	3f cf       	rjmp	.-386    	; 0x3dde <Admin_Mode+0x44a>
					break;
				case 3:Admin_Menu_Exit_Flag=0;
					break;
			}
	}
}
    3f60:	c8 5b       	subi	r28, 0xB8	; 184
    3f62:	df 4f       	sbci	r29, 0xFF	; 255
    3f64:	0f b6       	in	r0, 0x3f	; 63
    3f66:	f8 94       	cli
    3f68:	de bf       	out	0x3e, r29	; 62
    3f6a:	0f be       	out	0x3f, r0	; 63
    3f6c:	cd bf       	out	0x3d, r28	; 61
    3f6e:	cf 91       	pop	r28
    3f70:	df 91       	pop	r29
    3f72:	08 95       	ret

00003f74 <User_Mode>:

void User_Mode(void)
{
    3f74:	0f 93       	push	r16
    3f76:	1f 93       	push	r17
    3f78:	df 93       	push	r29
    3f7a:	cf 93       	push	r28
    3f7c:	cd b7       	in	r28, 0x3d	; 61
    3f7e:	de b7       	in	r29, 0x3e	; 62
    3f80:	cf 55       	subi	r28, 0x5F	; 95
    3f82:	d0 40       	sbci	r29, 0x00	; 0
    3f84:	0f b6       	in	r0, 0x3f	; 63
    3f86:	f8 94       	cli
    3f88:	de bf       	out	0x3e, r29	; 62
    3f8a:	0f be       	out	0x3f, r0	; 63
    3f8c:	cd bf       	out	0x3d, r28	; 61
	u8 User_Input,User_Index,User_ID_ExitFlag=0,Validation_State;//1 registered 0 non registered
    3f8e:	fe 01       	movw	r30, r28
    3f90:	e6 5a       	subi	r30, 0xA6	; 166
    3f92:	ff 4f       	sbci	r31, 0xFF	; 255
    3f94:	10 82       	st	Z, r1
	u8 Wrong_Entry_Flag=0,User_MainMenu_ExitFlag=0,User_MainMenu_Input,For_Counter,List_Counter=0;
    3f96:	fe 01       	movw	r30, r28
    3f98:	e8 5a       	subi	r30, 0xA8	; 168
    3f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f9c:	10 82       	st	Z, r1
    3f9e:	fe 01       	movw	r30, r28
    3fa0:	e9 5a       	subi	r30, 0xA9	; 169
    3fa2:	ff 4f       	sbci	r31, 0xFF	; 255
    3fa4:	10 82       	st	Z, r1
    3fa6:	fe 01       	movw	r30, r28
    3fa8:	eb 5a       	subi	r30, 0xAB	; 171
    3faa:	ff 4f       	sbci	r31, 0xFF	; 255
    3fac:	10 82       	st	Z, r1
	for(For_Counter=0;For_Counter<10;For_Counter++)
    3fae:	fe 01       	movw	r30, r28
    3fb0:	ea 5a       	subi	r30, 0xAA	; 170
    3fb2:	ff 4f       	sbci	r31, 0xFF	; 255
    3fb4:	10 82       	st	Z, r1
    3fb6:	1e c0       	rjmp	.+60     	; 0x3ff4 <User_Mode+0x80>
	{
		if(Array_Of_User_Status[For_Counter]==1)
    3fb8:	fe 01       	movw	r30, r28
    3fba:	ea 5a       	subi	r30, 0xAA	; 170
    3fbc:	ff 4f       	sbci	r31, 0xFF	; 255
    3fbe:	80 81       	ld	r24, Z
    3fc0:	88 2f       	mov	r24, r24
    3fc2:	90 e0       	ldi	r25, 0x00	; 0
    3fc4:	fc 01       	movw	r30, r24
    3fc6:	e4 5c       	subi	r30, 0xC4	; 196
    3fc8:	fa 4f       	sbci	r31, 0xFA	; 250
    3fca:	80 81       	ld	r24, Z
    3fcc:	81 30       	cpi	r24, 0x01	; 1
    3fce:	49 f4       	brne	.+18     	; 0x3fe2 <User_Mode+0x6e>
		{
			List_Counter++;
    3fd0:	de 01       	movw	r26, r28
    3fd2:	ab 5a       	subi	r26, 0xAB	; 171
    3fd4:	bf 4f       	sbci	r27, 0xFF	; 255
    3fd6:	fe 01       	movw	r30, r28
    3fd8:	eb 5a       	subi	r30, 0xAB	; 171
    3fda:	ff 4f       	sbci	r31, 0xFF	; 255
    3fdc:	80 81       	ld	r24, Z
    3fde:	8f 5f       	subi	r24, 0xFF	; 255
    3fe0:	8c 93       	st	X, r24

void User_Mode(void)
{
	u8 User_Input,User_Index,User_ID_ExitFlag=0,Validation_State;//1 registered 0 non registered
	u8 Wrong_Entry_Flag=0,User_MainMenu_ExitFlag=0,User_MainMenu_Input,For_Counter,List_Counter=0;
	for(For_Counter=0;For_Counter<10;For_Counter++)
    3fe2:	de 01       	movw	r26, r28
    3fe4:	aa 5a       	subi	r26, 0xAA	; 170
    3fe6:	bf 4f       	sbci	r27, 0xFF	; 255
    3fe8:	fe 01       	movw	r30, r28
    3fea:	ea 5a       	subi	r30, 0xAA	; 170
    3fec:	ff 4f       	sbci	r31, 0xFF	; 255
    3fee:	80 81       	ld	r24, Z
    3ff0:	8f 5f       	subi	r24, 0xFF	; 255
    3ff2:	8c 93       	st	X, r24
    3ff4:	fe 01       	movw	r30, r28
    3ff6:	ea 5a       	subi	r30, 0xAA	; 170
    3ff8:	ff 4f       	sbci	r31, 0xFF	; 255
    3ffa:	80 81       	ld	r24, Z
    3ffc:	8a 30       	cpi	r24, 0x0A	; 10
    3ffe:	e0 f2       	brcs	.-72     	; 0x3fb8 <User_Mode+0x44>
		if(Array_Of_User_Status[For_Counter]==1)
		{
			List_Counter++;
		}
	}
	if(List_Counter==10)
    4000:	fe 01       	movw	r30, r28
    4002:	eb 5a       	subi	r30, 0xAB	; 171
    4004:	ff 4f       	sbci	r31, 0xFF	; 255
    4006:	80 81       	ld	r24, Z
    4008:	8a 30       	cpi	r24, 0x0A	; 10
    400a:	09 f0       	breq	.+2      	; 0x400e <User_Mode+0x9a>
    400c:	c2 c0       	rjmp	.+388    	; 0x4192 <User_Mode+0x21e>
	{
		LCD_CLR();
    400e:	0e 94 2b 13 	call	0x2656	; 0x2656 <LCD_CLR>
		 Bluetooth_SendString("\n--------------------\n");
    4012:	80 e6       	ldi	r24, 0x60	; 96
    4014:	90 e0       	ldi	r25, 0x00	; 0
    4016:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
		 Bluetooth_SendString("No Users Registered");
    401a:	86 e8       	ldi	r24, 0x86	; 134
    401c:	91 e0       	ldi	r25, 0x01	; 1
    401e:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
		LCD_WriteString("No Users");
    4022:	8a e9       	ldi	r24, 0x9A	; 154
    4024:	91 e0       	ldi	r25, 0x01	; 1
    4026:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LCD_WriteString>
    402a:	fe 01       	movw	r30, r28
    402c:	ef 5a       	subi	r30, 0xAF	; 175
    402e:	ff 4f       	sbci	r31, 0xFF	; 255
    4030:	80 e0       	ldi	r24, 0x00	; 0
    4032:	90 e0       	ldi	r25, 0x00	; 0
    4034:	aa e7       	ldi	r26, 0x7A	; 122
    4036:	b4 e4       	ldi	r27, 0x44	; 68
    4038:	80 83       	st	Z, r24
    403a:	91 83       	std	Z+1, r25	; 0x01
    403c:	a2 83       	std	Z+2, r26	; 0x02
    403e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4040:	8e 01       	movw	r16, r28
    4042:	03 5b       	subi	r16, 0xB3	; 179
    4044:	1f 4f       	sbci	r17, 0xFF	; 255
    4046:	fe 01       	movw	r30, r28
    4048:	ef 5a       	subi	r30, 0xAF	; 175
    404a:	ff 4f       	sbci	r31, 0xFF	; 255
    404c:	60 81       	ld	r22, Z
    404e:	71 81       	ldd	r23, Z+1	; 0x01
    4050:	82 81       	ldd	r24, Z+2	; 0x02
    4052:	93 81       	ldd	r25, Z+3	; 0x03
    4054:	20 e0       	ldi	r18, 0x00	; 0
    4056:	30 e0       	ldi	r19, 0x00	; 0
    4058:	4a ef       	ldi	r20, 0xFA	; 250
    405a:	54 e4       	ldi	r21, 0x44	; 68
    405c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4060:	dc 01       	movw	r26, r24
    4062:	cb 01       	movw	r24, r22
    4064:	f8 01       	movw	r30, r16
    4066:	80 83       	st	Z, r24
    4068:	91 83       	std	Z+1, r25	; 0x01
    406a:	a2 83       	std	Z+2, r26	; 0x02
    406c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    406e:	fe 01       	movw	r30, r28
    4070:	e3 5b       	subi	r30, 0xB3	; 179
    4072:	ff 4f       	sbci	r31, 0xFF	; 255
    4074:	60 81       	ld	r22, Z
    4076:	71 81       	ldd	r23, Z+1	; 0x01
    4078:	82 81       	ldd	r24, Z+2	; 0x02
    407a:	93 81       	ldd	r25, Z+3	; 0x03
    407c:	20 e0       	ldi	r18, 0x00	; 0
    407e:	30 e0       	ldi	r19, 0x00	; 0
    4080:	40 e8       	ldi	r20, 0x80	; 128
    4082:	5f e3       	ldi	r21, 0x3F	; 63
    4084:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4088:	88 23       	and	r24, r24
    408a:	44 f4       	brge	.+16     	; 0x409c <User_Mode+0x128>
		__ticks = 1;
    408c:	fe 01       	movw	r30, r28
    408e:	e5 5b       	subi	r30, 0xB5	; 181
    4090:	ff 4f       	sbci	r31, 0xFF	; 255
    4092:	81 e0       	ldi	r24, 0x01	; 1
    4094:	90 e0       	ldi	r25, 0x00	; 0
    4096:	91 83       	std	Z+1, r25	; 0x01
    4098:	80 83       	st	Z, r24
    409a:	64 c0       	rjmp	.+200    	; 0x4164 <User_Mode+0x1f0>
	else if (__tmp > 65535)
    409c:	fe 01       	movw	r30, r28
    409e:	e3 5b       	subi	r30, 0xB3	; 179
    40a0:	ff 4f       	sbci	r31, 0xFF	; 255
    40a2:	60 81       	ld	r22, Z
    40a4:	71 81       	ldd	r23, Z+1	; 0x01
    40a6:	82 81       	ldd	r24, Z+2	; 0x02
    40a8:	93 81       	ldd	r25, Z+3	; 0x03
    40aa:	20 e0       	ldi	r18, 0x00	; 0
    40ac:	3f ef       	ldi	r19, 0xFF	; 255
    40ae:	4f e7       	ldi	r20, 0x7F	; 127
    40b0:	57 e4       	ldi	r21, 0x47	; 71
    40b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    40b6:	18 16       	cp	r1, r24
    40b8:	0c f0       	brlt	.+2      	; 0x40bc <User_Mode+0x148>
    40ba:	43 c0       	rjmp	.+134    	; 0x4142 <User_Mode+0x1ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40bc:	fe 01       	movw	r30, r28
    40be:	ef 5a       	subi	r30, 0xAF	; 175
    40c0:	ff 4f       	sbci	r31, 0xFF	; 255
    40c2:	60 81       	ld	r22, Z
    40c4:	71 81       	ldd	r23, Z+1	; 0x01
    40c6:	82 81       	ldd	r24, Z+2	; 0x02
    40c8:	93 81       	ldd	r25, Z+3	; 0x03
    40ca:	20 e0       	ldi	r18, 0x00	; 0
    40cc:	30 e0       	ldi	r19, 0x00	; 0
    40ce:	40 e2       	ldi	r20, 0x20	; 32
    40d0:	51 e4       	ldi	r21, 0x41	; 65
    40d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40d6:	dc 01       	movw	r26, r24
    40d8:	cb 01       	movw	r24, r22
    40da:	8e 01       	movw	r16, r28
    40dc:	05 5b       	subi	r16, 0xB5	; 181
    40de:	1f 4f       	sbci	r17, 0xFF	; 255
    40e0:	bc 01       	movw	r22, r24
    40e2:	cd 01       	movw	r24, r26
    40e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40e8:	dc 01       	movw	r26, r24
    40ea:	cb 01       	movw	r24, r22
    40ec:	f8 01       	movw	r30, r16
    40ee:	91 83       	std	Z+1, r25	; 0x01
    40f0:	80 83       	st	Z, r24
    40f2:	1f c0       	rjmp	.+62     	; 0x4132 <User_Mode+0x1be>
    40f4:	fe 01       	movw	r30, r28
    40f6:	e7 5b       	subi	r30, 0xB7	; 183
    40f8:	ff 4f       	sbci	r31, 0xFF	; 255
    40fa:	88 ec       	ldi	r24, 0xC8	; 200
    40fc:	90 e0       	ldi	r25, 0x00	; 0
    40fe:	91 83       	std	Z+1, r25	; 0x01
    4100:	80 83       	st	Z, r24
    4102:	fe 01       	movw	r30, r28
    4104:	e7 5b       	subi	r30, 0xB7	; 183
    4106:	ff 4f       	sbci	r31, 0xFF	; 255
    4108:	80 81       	ld	r24, Z
    410a:	91 81       	ldd	r25, Z+1	; 0x01
    410c:	01 97       	sbiw	r24, 0x01	; 1
    410e:	f1 f7       	brne	.-4      	; 0x410c <User_Mode+0x198>
    4110:	fe 01       	movw	r30, r28
    4112:	e7 5b       	subi	r30, 0xB7	; 183
    4114:	ff 4f       	sbci	r31, 0xFF	; 255
    4116:	91 83       	std	Z+1, r25	; 0x01
    4118:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    411a:	de 01       	movw	r26, r28
    411c:	a5 5b       	subi	r26, 0xB5	; 181
    411e:	bf 4f       	sbci	r27, 0xFF	; 255
    4120:	fe 01       	movw	r30, r28
    4122:	e5 5b       	subi	r30, 0xB5	; 181
    4124:	ff 4f       	sbci	r31, 0xFF	; 255
    4126:	80 81       	ld	r24, Z
    4128:	91 81       	ldd	r25, Z+1	; 0x01
    412a:	01 97       	sbiw	r24, 0x01	; 1
    412c:	11 96       	adiw	r26, 0x01	; 1
    412e:	9c 93       	st	X, r25
    4130:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4132:	fe 01       	movw	r30, r28
    4134:	e5 5b       	subi	r30, 0xB5	; 181
    4136:	ff 4f       	sbci	r31, 0xFF	; 255
    4138:	80 81       	ld	r24, Z
    413a:	91 81       	ldd	r25, Z+1	; 0x01
    413c:	00 97       	sbiw	r24, 0x00	; 0
    413e:	d1 f6       	brne	.-76     	; 0x40f4 <User_Mode+0x180>
    4140:	28 c0       	rjmp	.+80     	; 0x4192 <User_Mode+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4142:	8e 01       	movw	r16, r28
    4144:	05 5b       	subi	r16, 0xB5	; 181
    4146:	1f 4f       	sbci	r17, 0xFF	; 255
    4148:	fe 01       	movw	r30, r28
    414a:	e3 5b       	subi	r30, 0xB3	; 179
    414c:	ff 4f       	sbci	r31, 0xFF	; 255
    414e:	60 81       	ld	r22, Z
    4150:	71 81       	ldd	r23, Z+1	; 0x01
    4152:	82 81       	ldd	r24, Z+2	; 0x02
    4154:	93 81       	ldd	r25, Z+3	; 0x03
    4156:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    415a:	dc 01       	movw	r26, r24
    415c:	cb 01       	movw	r24, r22
    415e:	f8 01       	movw	r30, r16
    4160:	91 83       	std	Z+1, r25	; 0x01
    4162:	80 83       	st	Z, r24
    4164:	de 01       	movw	r26, r28
    4166:	a9 5b       	subi	r26, 0xB9	; 185
    4168:	bf 4f       	sbci	r27, 0xFF	; 255
    416a:	fe 01       	movw	r30, r28
    416c:	e5 5b       	subi	r30, 0xB5	; 181
    416e:	ff 4f       	sbci	r31, 0xFF	; 255
    4170:	80 81       	ld	r24, Z
    4172:	91 81       	ldd	r25, Z+1	; 0x01
    4174:	11 96       	adiw	r26, 0x01	; 1
    4176:	9c 93       	st	X, r25
    4178:	8e 93       	st	-X, r24
    417a:	fe 01       	movw	r30, r28
    417c:	e9 5b       	subi	r30, 0xB9	; 185
    417e:	ff 4f       	sbci	r31, 0xFF	; 255
    4180:	80 81       	ld	r24, Z
    4182:	91 81       	ldd	r25, Z+1	; 0x01
    4184:	01 97       	sbiw	r24, 0x01	; 1
    4186:	f1 f7       	brne	.-4      	; 0x4184 <User_Mode+0x210>
    4188:	fe 01       	movw	r30, r28
    418a:	e9 5b       	subi	r30, 0xB9	; 185
    418c:	ff 4f       	sbci	r31, 0xFF	; 255
    418e:	91 83       	std	Z+1, r25	; 0x01
    4190:	80 83       	st	Z, r24
		_delay_ms(1000);
	}
	if(List_Counter!=10)
    4192:	fe 01       	movw	r30, r28
    4194:	eb 5a       	subi	r30, 0xAB	; 171
    4196:	ff 4f       	sbci	r31, 0xFF	; 255
    4198:	80 81       	ld	r24, Z
    419a:	8a 30       	cpi	r24, 0x0A	; 10
    419c:	09 f4       	brne	.+2      	; 0x41a0 <User_Mode+0x22c>
    419e:	33 c4       	rjmp	.+2150   	; 0x4a06 <User_Mode+0xa92>
	{
		LCD_CLR();
    41a0:	0e 94 2b 13 	call	0x2656	; 0x2656 <LCD_CLR>
		 Bluetooth_SendString("\n--------------------\n");
    41a4:	80 e6       	ldi	r24, 0x60	; 96
    41a6:	90 e0       	ldi	r25, 0x00	; 0
    41a8:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
		 Bluetooth_SendString("In User Mode");
    41ac:	83 ea       	ldi	r24, 0xA3	; 163
    41ae:	91 e0       	ldi	r25, 0x01	; 1
    41b0:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
		LCD_WriteString("In User Mode");
    41b4:	83 ea       	ldi	r24, 0xA3	; 163
    41b6:	91 e0       	ldi	r25, 0x01	; 1
    41b8:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LCD_WriteString>
    41bc:	fe 01       	movw	r30, r28
    41be:	ed 5b       	subi	r30, 0xBD	; 189
    41c0:	ff 4f       	sbci	r31, 0xFF	; 255
    41c2:	80 e0       	ldi	r24, 0x00	; 0
    41c4:	90 e0       	ldi	r25, 0x00	; 0
    41c6:	aa e7       	ldi	r26, 0x7A	; 122
    41c8:	b4 e4       	ldi	r27, 0x44	; 68
    41ca:	80 83       	st	Z, r24
    41cc:	91 83       	std	Z+1, r25	; 0x01
    41ce:	a2 83       	std	Z+2, r26	; 0x02
    41d0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41d2:	8e 01       	movw	r16, r28
    41d4:	01 5c       	subi	r16, 0xC1	; 193
    41d6:	1f 4f       	sbci	r17, 0xFF	; 255
    41d8:	fe 01       	movw	r30, r28
    41da:	ed 5b       	subi	r30, 0xBD	; 189
    41dc:	ff 4f       	sbci	r31, 0xFF	; 255
    41de:	60 81       	ld	r22, Z
    41e0:	71 81       	ldd	r23, Z+1	; 0x01
    41e2:	82 81       	ldd	r24, Z+2	; 0x02
    41e4:	93 81       	ldd	r25, Z+3	; 0x03
    41e6:	20 e0       	ldi	r18, 0x00	; 0
    41e8:	30 e0       	ldi	r19, 0x00	; 0
    41ea:	4a ef       	ldi	r20, 0xFA	; 250
    41ec:	54 e4       	ldi	r21, 0x44	; 68
    41ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41f2:	dc 01       	movw	r26, r24
    41f4:	cb 01       	movw	r24, r22
    41f6:	f8 01       	movw	r30, r16
    41f8:	80 83       	st	Z, r24
    41fa:	91 83       	std	Z+1, r25	; 0x01
    41fc:	a2 83       	std	Z+2, r26	; 0x02
    41fe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4200:	fe 01       	movw	r30, r28
    4202:	ff 96       	adiw	r30, 0x3f	; 63
    4204:	60 81       	ld	r22, Z
    4206:	71 81       	ldd	r23, Z+1	; 0x01
    4208:	82 81       	ldd	r24, Z+2	; 0x02
    420a:	93 81       	ldd	r25, Z+3	; 0x03
    420c:	20 e0       	ldi	r18, 0x00	; 0
    420e:	30 e0       	ldi	r19, 0x00	; 0
    4210:	40 e8       	ldi	r20, 0x80	; 128
    4212:	5f e3       	ldi	r21, 0x3F	; 63
    4214:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4218:	88 23       	and	r24, r24
    421a:	2c f4       	brge	.+10     	; 0x4226 <User_Mode+0x2b2>
		__ticks = 1;
    421c:	81 e0       	ldi	r24, 0x01	; 1
    421e:	90 e0       	ldi	r25, 0x00	; 0
    4220:	9e af       	std	Y+62, r25	; 0x3e
    4222:	8d af       	std	Y+61, r24	; 0x3d
    4224:	46 c0       	rjmp	.+140    	; 0x42b2 <User_Mode+0x33e>
	else if (__tmp > 65535)
    4226:	fe 01       	movw	r30, r28
    4228:	ff 96       	adiw	r30, 0x3f	; 63
    422a:	60 81       	ld	r22, Z
    422c:	71 81       	ldd	r23, Z+1	; 0x01
    422e:	82 81       	ldd	r24, Z+2	; 0x02
    4230:	93 81       	ldd	r25, Z+3	; 0x03
    4232:	20 e0       	ldi	r18, 0x00	; 0
    4234:	3f ef       	ldi	r19, 0xFF	; 255
    4236:	4f e7       	ldi	r20, 0x7F	; 127
    4238:	57 e4       	ldi	r21, 0x47	; 71
    423a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    423e:	18 16       	cp	r1, r24
    4240:	64 f5       	brge	.+88     	; 0x429a <User_Mode+0x326>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4242:	fe 01       	movw	r30, r28
    4244:	ed 5b       	subi	r30, 0xBD	; 189
    4246:	ff 4f       	sbci	r31, 0xFF	; 255
    4248:	60 81       	ld	r22, Z
    424a:	71 81       	ldd	r23, Z+1	; 0x01
    424c:	82 81       	ldd	r24, Z+2	; 0x02
    424e:	93 81       	ldd	r25, Z+3	; 0x03
    4250:	20 e0       	ldi	r18, 0x00	; 0
    4252:	30 e0       	ldi	r19, 0x00	; 0
    4254:	40 e2       	ldi	r20, 0x20	; 32
    4256:	51 e4       	ldi	r21, 0x41	; 65
    4258:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    425c:	dc 01       	movw	r26, r24
    425e:	cb 01       	movw	r24, r22
    4260:	bc 01       	movw	r22, r24
    4262:	cd 01       	movw	r24, r26
    4264:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4268:	dc 01       	movw	r26, r24
    426a:	cb 01       	movw	r24, r22
    426c:	9e af       	std	Y+62, r25	; 0x3e
    426e:	8d af       	std	Y+61, r24	; 0x3d
    4270:	0f c0       	rjmp	.+30     	; 0x4290 <User_Mode+0x31c>
    4272:	88 ec       	ldi	r24, 0xC8	; 200
    4274:	90 e0       	ldi	r25, 0x00	; 0
    4276:	9c af       	std	Y+60, r25	; 0x3c
    4278:	8b af       	std	Y+59, r24	; 0x3b
    427a:	8b ad       	ldd	r24, Y+59	; 0x3b
    427c:	9c ad       	ldd	r25, Y+60	; 0x3c
    427e:	01 97       	sbiw	r24, 0x01	; 1
    4280:	f1 f7       	brne	.-4      	; 0x427e <User_Mode+0x30a>
    4282:	9c af       	std	Y+60, r25	; 0x3c
    4284:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4286:	8d ad       	ldd	r24, Y+61	; 0x3d
    4288:	9e ad       	ldd	r25, Y+62	; 0x3e
    428a:	01 97       	sbiw	r24, 0x01	; 1
    428c:	9e af       	std	Y+62, r25	; 0x3e
    428e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4290:	8d ad       	ldd	r24, Y+61	; 0x3d
    4292:	9e ad       	ldd	r25, Y+62	; 0x3e
    4294:	00 97       	sbiw	r24, 0x00	; 0
    4296:	69 f7       	brne	.-38     	; 0x4272 <User_Mode+0x2fe>
    4298:	16 c0       	rjmp	.+44     	; 0x42c6 <User_Mode+0x352>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    429a:	fe 01       	movw	r30, r28
    429c:	ff 96       	adiw	r30, 0x3f	; 63
    429e:	60 81       	ld	r22, Z
    42a0:	71 81       	ldd	r23, Z+1	; 0x01
    42a2:	82 81       	ldd	r24, Z+2	; 0x02
    42a4:	93 81       	ldd	r25, Z+3	; 0x03
    42a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42aa:	dc 01       	movw	r26, r24
    42ac:	cb 01       	movw	r24, r22
    42ae:	9e af       	std	Y+62, r25	; 0x3e
    42b0:	8d af       	std	Y+61, r24	; 0x3d
    42b2:	8d ad       	ldd	r24, Y+61	; 0x3d
    42b4:	9e ad       	ldd	r25, Y+62	; 0x3e
    42b6:	9a af       	std	Y+58, r25	; 0x3a
    42b8:	89 af       	std	Y+57, r24	; 0x39
    42ba:	89 ad       	ldd	r24, Y+57	; 0x39
    42bc:	9a ad       	ldd	r25, Y+58	; 0x3a
    42be:	01 97       	sbiw	r24, 0x01	; 1
    42c0:	f1 f7       	brne	.-4      	; 0x42be <User_Mode+0x34a>
    42c2:	9a af       	std	Y+58, r25	; 0x3a
    42c4:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(1000);
		LCD_CLR();
    42c6:	0e 94 2b 13 	call	0x2656	; 0x2656 <LCD_CLR>
		 Bluetooth_SendString("\n--------------------\n");
    42ca:	80 e6       	ldi	r24, 0x60	; 96
    42cc:	90 e0       	ldi	r25, 0x00	; 0
    42ce:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
		 Bluetooth_SendString("Choose User\n From 1 to 10\nEnter ID\n3)Enter");
    42d2:	80 eb       	ldi	r24, 0xB0	; 176
    42d4:	91 e0       	ldi	r25, 0x01	; 1
    42d6:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
		LCD_WriteString("Choose User");
    42da:	8b ed       	ldi	r24, 0xDB	; 219
    42dc:	91 e0       	ldi	r25, 0x01	; 1
    42de:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LCD_WriteString>
		LCD_goto(0,1);
    42e2:	80 e0       	ldi	r24, 0x00	; 0
    42e4:	61 e0       	ldi	r22, 0x01	; 1
    42e6:	0e 94 13 13 	call	0x2626	; 0x2626 <LCD_goto>
		LCD_WriteString("From 1 to 10");
    42ea:	87 ee       	ldi	r24, 0xE7	; 231
    42ec:	91 e0       	ldi	r25, 0x01	; 1
    42ee:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LCD_WriteString>
    42f2:	80 e0       	ldi	r24, 0x00	; 0
    42f4:	90 e0       	ldi	r25, 0x00	; 0
    42f6:	aa e7       	ldi	r26, 0x7A	; 122
    42f8:	b4 e4       	ldi	r27, 0x44	; 68
    42fa:	8d ab       	std	Y+53, r24	; 0x35
    42fc:	9e ab       	std	Y+54, r25	; 0x36
    42fe:	af ab       	std	Y+55, r26	; 0x37
    4300:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4302:	6d a9       	ldd	r22, Y+53	; 0x35
    4304:	7e a9       	ldd	r23, Y+54	; 0x36
    4306:	8f a9       	ldd	r24, Y+55	; 0x37
    4308:	98 ad       	ldd	r25, Y+56	; 0x38
    430a:	20 e0       	ldi	r18, 0x00	; 0
    430c:	30 e0       	ldi	r19, 0x00	; 0
    430e:	4a ef       	ldi	r20, 0xFA	; 250
    4310:	54 e4       	ldi	r21, 0x44	; 68
    4312:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4316:	dc 01       	movw	r26, r24
    4318:	cb 01       	movw	r24, r22
    431a:	89 ab       	std	Y+49, r24	; 0x31
    431c:	9a ab       	std	Y+50, r25	; 0x32
    431e:	ab ab       	std	Y+51, r26	; 0x33
    4320:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4322:	69 a9       	ldd	r22, Y+49	; 0x31
    4324:	7a a9       	ldd	r23, Y+50	; 0x32
    4326:	8b a9       	ldd	r24, Y+51	; 0x33
    4328:	9c a9       	ldd	r25, Y+52	; 0x34
    432a:	20 e0       	ldi	r18, 0x00	; 0
    432c:	30 e0       	ldi	r19, 0x00	; 0
    432e:	40 e8       	ldi	r20, 0x80	; 128
    4330:	5f e3       	ldi	r21, 0x3F	; 63
    4332:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4336:	88 23       	and	r24, r24
    4338:	2c f4       	brge	.+10     	; 0x4344 <User_Mode+0x3d0>
		__ticks = 1;
    433a:	81 e0       	ldi	r24, 0x01	; 1
    433c:	90 e0       	ldi	r25, 0x00	; 0
    433e:	98 ab       	std	Y+48, r25	; 0x30
    4340:	8f a7       	std	Y+47, r24	; 0x2f
    4342:	3f c0       	rjmp	.+126    	; 0x43c2 <User_Mode+0x44e>
	else if (__tmp > 65535)
    4344:	69 a9       	ldd	r22, Y+49	; 0x31
    4346:	7a a9       	ldd	r23, Y+50	; 0x32
    4348:	8b a9       	ldd	r24, Y+51	; 0x33
    434a:	9c a9       	ldd	r25, Y+52	; 0x34
    434c:	20 e0       	ldi	r18, 0x00	; 0
    434e:	3f ef       	ldi	r19, 0xFF	; 255
    4350:	4f e7       	ldi	r20, 0x7F	; 127
    4352:	57 e4       	ldi	r21, 0x47	; 71
    4354:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4358:	18 16       	cp	r1, r24
    435a:	4c f5       	brge	.+82     	; 0x43ae <User_Mode+0x43a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    435c:	6d a9       	ldd	r22, Y+53	; 0x35
    435e:	7e a9       	ldd	r23, Y+54	; 0x36
    4360:	8f a9       	ldd	r24, Y+55	; 0x37
    4362:	98 ad       	ldd	r25, Y+56	; 0x38
    4364:	20 e0       	ldi	r18, 0x00	; 0
    4366:	30 e0       	ldi	r19, 0x00	; 0
    4368:	40 e2       	ldi	r20, 0x20	; 32
    436a:	51 e4       	ldi	r21, 0x41	; 65
    436c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4370:	dc 01       	movw	r26, r24
    4372:	cb 01       	movw	r24, r22
    4374:	bc 01       	movw	r22, r24
    4376:	cd 01       	movw	r24, r26
    4378:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    437c:	dc 01       	movw	r26, r24
    437e:	cb 01       	movw	r24, r22
    4380:	98 ab       	std	Y+48, r25	; 0x30
    4382:	8f a7       	std	Y+47, r24	; 0x2f
    4384:	0f c0       	rjmp	.+30     	; 0x43a4 <User_Mode+0x430>
    4386:	88 ec       	ldi	r24, 0xC8	; 200
    4388:	90 e0       	ldi	r25, 0x00	; 0
    438a:	9e a7       	std	Y+46, r25	; 0x2e
    438c:	8d a7       	std	Y+45, r24	; 0x2d
    438e:	8d a5       	ldd	r24, Y+45	; 0x2d
    4390:	9e a5       	ldd	r25, Y+46	; 0x2e
    4392:	01 97       	sbiw	r24, 0x01	; 1
    4394:	f1 f7       	brne	.-4      	; 0x4392 <User_Mode+0x41e>
    4396:	9e a7       	std	Y+46, r25	; 0x2e
    4398:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    439a:	8f a5       	ldd	r24, Y+47	; 0x2f
    439c:	98 a9       	ldd	r25, Y+48	; 0x30
    439e:	01 97       	sbiw	r24, 0x01	; 1
    43a0:	98 ab       	std	Y+48, r25	; 0x30
    43a2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    43a6:	98 a9       	ldd	r25, Y+48	; 0x30
    43a8:	00 97       	sbiw	r24, 0x00	; 0
    43aa:	69 f7       	brne	.-38     	; 0x4386 <User_Mode+0x412>
    43ac:	14 c0       	rjmp	.+40     	; 0x43d6 <User_Mode+0x462>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43ae:	69 a9       	ldd	r22, Y+49	; 0x31
    43b0:	7a a9       	ldd	r23, Y+50	; 0x32
    43b2:	8b a9       	ldd	r24, Y+51	; 0x33
    43b4:	9c a9       	ldd	r25, Y+52	; 0x34
    43b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43ba:	dc 01       	movw	r26, r24
    43bc:	cb 01       	movw	r24, r22
    43be:	98 ab       	std	Y+48, r25	; 0x30
    43c0:	8f a7       	std	Y+47, r24	; 0x2f
    43c2:	8f a5       	ldd	r24, Y+47	; 0x2f
    43c4:	98 a9       	ldd	r25, Y+48	; 0x30
    43c6:	9c a7       	std	Y+44, r25	; 0x2c
    43c8:	8b a7       	std	Y+43, r24	; 0x2b
    43ca:	8b a5       	ldd	r24, Y+43	; 0x2b
    43cc:	9c a5       	ldd	r25, Y+44	; 0x2c
    43ce:	01 97       	sbiw	r24, 0x01	; 1
    43d0:	f1 f7       	brne	.-4      	; 0x43ce <User_Mode+0x45a>
    43d2:	9c a7       	std	Y+44, r25	; 0x2c
    43d4:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1000);
		while(User_ID_ExitFlag==0)
    43d6:	fe 01       	movw	r30, r28
    43d8:	e6 5a       	subi	r30, 0xA6	; 166
    43da:	ff 4f       	sbci	r31, 0xFF	; 255
    43dc:	80 81       	ld	r24, Z
    43de:	88 23       	and	r24, r24
    43e0:	09 f0       	breq	.+2      	; 0x43e4 <User_Mode+0x470>
    43e2:	13 c2       	rjmp	.+1062   	; 0x480a <User_Mode+0x896>
		{
			LCD_CLR();
    43e4:	0e 94 2b 13 	call	0x2656	; 0x2656 <LCD_CLR>
			 Bluetooth_SendString("\n--------------------\n");
    43e8:	80 e6       	ldi	r24, 0x60	; 96
    43ea:	90 e0       	ldi	r25, 0x00	; 0
    43ec:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
			 Bluetooth_SendString("Your ID:");
    43f0:	84 ef       	ldi	r24, 0xF4	; 244
    43f2:	91 e0       	ldi	r25, 0x01	; 1
    43f4:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
			LCD_WriteString("Your ID:");
    43f8:	84 ef       	ldi	r24, 0xF4	; 244
    43fa:	91 e0       	ldi	r25, 0x01	; 1
    43fc:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LCD_WriteString>
			User_Input = UART_u8Receiver();
    4400:	0e 94 a3 1a 	call	0x3546	; 0x3546 <UART_u8Receiver>
    4404:	fe 01       	movw	r30, r28
    4406:	e4 5a       	subi	r30, 0xA4	; 164
    4408:	ff 4f       	sbci	r31, 0xFF	; 255
    440a:	80 83       	st	Z, r24
			ASCII_Conversion(&User_Input);
    440c:	ce 01       	movw	r24, r28
    440e:	84 5a       	subi	r24, 0xA4	; 164
    4410:	9f 4f       	sbci	r25, 0xFF	; 255
    4412:	0e 94 b7 1c 	call	0x396e	; 0x396e <ASCII_Conversion>
			Bluetooth_SendNumber(User_Input);
    4416:	fe 01       	movw	r30, r28
    4418:	e4 5a       	subi	r30, 0xA4	; 164
    441a:	ff 4f       	sbci	r31, 0xFF	; 255
    441c:	80 81       	ld	r24, Z
    441e:	88 2f       	mov	r24, r24
    4420:	90 e0       	ldi	r25, 0x00	; 0
    4422:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <Bluetooth_SendNumber>
			LCD_PrintNum(User_Input);
    4426:	fe 01       	movw	r30, r28
    4428:	e4 5a       	subi	r30, 0xA4	; 164
    442a:	ff 4f       	sbci	r31, 0xFF	; 255
    442c:	80 81       	ld	r24, Z
    442e:	88 2f       	mov	r24, r24
    4430:	90 e0       	ldi	r25, 0x00	; 0
    4432:	a0 e0       	ldi	r26, 0x00	; 0
    4434:	b0 e0       	ldi	r27, 0x00	; 0
    4436:	bc 01       	movw	r22, r24
    4438:	cd 01       	movw	r24, r26
    443a:	0e 94 49 13 	call	0x2692	; 0x2692 <LCD_PrintNum>
			if(User_Input == 1)
    443e:	fe 01       	movw	r30, r28
    4440:	e4 5a       	subi	r30, 0xA4	; 164
    4442:	ff 4f       	sbci	r31, 0xFF	; 255
    4444:	80 81       	ld	r24, Z
    4446:	81 30       	cpi	r24, 0x01	; 1
    4448:	09 f0       	breq	.+2      	; 0x444c <User_Mode+0x4d8>
    444a:	fb c0       	rjmp	.+502    	; 0x4642 <User_Mode+0x6ce>
			{
				User_Input = UART_u8Receiver();
    444c:	0e 94 a3 1a 	call	0x3546	; 0x3546 <UART_u8Receiver>
    4450:	fe 01       	movw	r30, r28
    4452:	e4 5a       	subi	r30, 0xA4	; 164
    4454:	ff 4f       	sbci	r31, 0xFF	; 255
    4456:	80 83       	st	Z, r24
				ASCII_Conversion(&User_Input);
    4458:	ce 01       	movw	r24, r28
    445a:	84 5a       	subi	r24, 0xA4	; 164
    445c:	9f 4f       	sbci	r25, 0xFF	; 255
    445e:	0e 94 b7 1c 	call	0x396e	; 0x396e <ASCII_Conversion>
				if(User_Input == 0)
    4462:	fe 01       	movw	r30, r28
    4464:	e4 5a       	subi	r30, 0xA4	; 164
    4466:	ff 4f       	sbci	r31, 0xFF	; 255
    4468:	80 81       	ld	r24, Z
    446a:	88 23       	and	r24, r24
    446c:	09 f0       	breq	.+2      	; 0x4470 <User_Mode+0x4fc>
    446e:	d8 c0       	rjmp	.+432    	; 0x4620 <User_Mode+0x6ac>
				{
					Bluetooth_SendNumber(User_Input);
    4470:	fe 01       	movw	r30, r28
    4472:	e4 5a       	subi	r30, 0xA4	; 164
    4474:	ff 4f       	sbci	r31, 0xFF	; 255
    4476:	80 81       	ld	r24, Z
    4478:	88 2f       	mov	r24, r24
    447a:	90 e0       	ldi	r25, 0x00	; 0
    447c:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <Bluetooth_SendNumber>
					LCD_PrintNum(User_Input);
    4480:	fe 01       	movw	r30, r28
    4482:	e4 5a       	subi	r30, 0xA4	; 164
    4484:	ff 4f       	sbci	r31, 0xFF	; 255
    4486:	80 81       	ld	r24, Z
    4488:	88 2f       	mov	r24, r24
    448a:	90 e0       	ldi	r25, 0x00	; 0
    448c:	a0 e0       	ldi	r26, 0x00	; 0
    448e:	b0 e0       	ldi	r27, 0x00	; 0
    4490:	bc 01       	movw	r22, r24
    4492:	cd 01       	movw	r24, r26
    4494:	0e 94 49 13 	call	0x2692	; 0x2692 <LCD_PrintNum>
					User_Index = 10;
    4498:	fe 01       	movw	r30, r28
    449a:	e5 5a       	subi	r30, 0xA5	; 165
    449c:	ff 4f       	sbci	r31, 0xFF	; 255
    449e:	8a e0       	ldi	r24, 0x0A	; 10
    44a0:	80 83       	st	Z, r24
    44a2:	b6 c0       	rjmp	.+364    	; 0x4610 <User_Mode+0x69c>
					while(Wrong_Entry_Flag==0)
					{
						User_Input = UART_u8Receiver();
    44a4:	0e 94 a3 1a 	call	0x3546	; 0x3546 <UART_u8Receiver>
    44a8:	fe 01       	movw	r30, r28
    44aa:	e4 5a       	subi	r30, 0xA4	; 164
    44ac:	ff 4f       	sbci	r31, 0xFF	; 255
    44ae:	80 83       	st	Z, r24
						ASCII_Conversion(&User_Input);
    44b0:	ce 01       	movw	r24, r28
    44b2:	84 5a       	subi	r24, 0xA4	; 164
    44b4:	9f 4f       	sbci	r25, 0xFF	; 255
    44b6:	0e 94 b7 1c 	call	0x396e	; 0x396e <ASCII_Conversion>
						if(User_Input==3)
    44ba:	fe 01       	movw	r30, r28
    44bc:	e4 5a       	subi	r30, 0xA4	; 164
    44be:	ff 4f       	sbci	r31, 0xFF	; 255
    44c0:	80 81       	ld	r24, Z
    44c2:	83 30       	cpi	r24, 0x03	; 3
    44c4:	59 f4       	brne	.+22     	; 0x44dc <User_Mode+0x568>
						{
							User_ID_ExitFlag=1;
    44c6:	fe 01       	movw	r30, r28
    44c8:	e6 5a       	subi	r30, 0xA6	; 166
    44ca:	ff 4f       	sbci	r31, 0xFF	; 255
    44cc:	81 e0       	ldi	r24, 0x01	; 1
    44ce:	80 83       	st	Z, r24
							Wrong_Entry_Flag=1;
    44d0:	fe 01       	movw	r30, r28
    44d2:	e8 5a       	subi	r30, 0xA8	; 168
    44d4:	ff 4f       	sbci	r31, 0xFF	; 255
    44d6:	81 e0       	ldi	r24, 0x01	; 1
    44d8:	80 83       	st	Z, r24
    44da:	9a c0       	rjmp	.+308    	; 0x4610 <User_Mode+0x69c>
	//						break;
						}
						else
						{
							LCD_CLR();
    44dc:	0e 94 2b 13 	call	0x2656	; 0x2656 <LCD_CLR>
							 Bluetooth_SendString("\n--------------------\n");
    44e0:	80 e6       	ldi	r24, 0x60	; 96
    44e2:	90 e0       	ldi	r25, 0x00	; 0
    44e4:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
							 Bluetooth_SendString("Wrong Entry");
    44e8:	8d ef       	ldi	r24, 0xFD	; 253
    44ea:	91 e0       	ldi	r25, 0x01	; 1
    44ec:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
							LCD_WriteString("Wrong Entry");
    44f0:	8d ef       	ldi	r24, 0xFD	; 253
    44f2:	91 e0       	ldi	r25, 0x01	; 1
    44f4:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LCD_WriteString>
    44f8:	80 e0       	ldi	r24, 0x00	; 0
    44fa:	90 e0       	ldi	r25, 0x00	; 0
    44fc:	aa e7       	ldi	r26, 0x7A	; 122
    44fe:	b4 e4       	ldi	r27, 0x44	; 68
    4500:	8f a3       	std	Y+39, r24	; 0x27
    4502:	98 a7       	std	Y+40, r25	; 0x28
    4504:	a9 a7       	std	Y+41, r26	; 0x29
    4506:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4508:	6f a1       	ldd	r22, Y+39	; 0x27
    450a:	78 a5       	ldd	r23, Y+40	; 0x28
    450c:	89 a5       	ldd	r24, Y+41	; 0x29
    450e:	9a a5       	ldd	r25, Y+42	; 0x2a
    4510:	20 e0       	ldi	r18, 0x00	; 0
    4512:	30 e0       	ldi	r19, 0x00	; 0
    4514:	4a ef       	ldi	r20, 0xFA	; 250
    4516:	54 e4       	ldi	r21, 0x44	; 68
    4518:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    451c:	dc 01       	movw	r26, r24
    451e:	cb 01       	movw	r24, r22
    4520:	8b a3       	std	Y+35, r24	; 0x23
    4522:	9c a3       	std	Y+36, r25	; 0x24
    4524:	ad a3       	std	Y+37, r26	; 0x25
    4526:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4528:	6b a1       	ldd	r22, Y+35	; 0x23
    452a:	7c a1       	ldd	r23, Y+36	; 0x24
    452c:	8d a1       	ldd	r24, Y+37	; 0x25
    452e:	9e a1       	ldd	r25, Y+38	; 0x26
    4530:	20 e0       	ldi	r18, 0x00	; 0
    4532:	30 e0       	ldi	r19, 0x00	; 0
    4534:	40 e8       	ldi	r20, 0x80	; 128
    4536:	5f e3       	ldi	r21, 0x3F	; 63
    4538:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    453c:	88 23       	and	r24, r24
    453e:	2c f4       	brge	.+10     	; 0x454a <User_Mode+0x5d6>
		__ticks = 1;
    4540:	81 e0       	ldi	r24, 0x01	; 1
    4542:	90 e0       	ldi	r25, 0x00	; 0
    4544:	9a a3       	std	Y+34, r25	; 0x22
    4546:	89 a3       	std	Y+33, r24	; 0x21
    4548:	3f c0       	rjmp	.+126    	; 0x45c8 <User_Mode+0x654>
	else if (__tmp > 65535)
    454a:	6b a1       	ldd	r22, Y+35	; 0x23
    454c:	7c a1       	ldd	r23, Y+36	; 0x24
    454e:	8d a1       	ldd	r24, Y+37	; 0x25
    4550:	9e a1       	ldd	r25, Y+38	; 0x26
    4552:	20 e0       	ldi	r18, 0x00	; 0
    4554:	3f ef       	ldi	r19, 0xFF	; 255
    4556:	4f e7       	ldi	r20, 0x7F	; 127
    4558:	57 e4       	ldi	r21, 0x47	; 71
    455a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    455e:	18 16       	cp	r1, r24
    4560:	4c f5       	brge	.+82     	; 0x45b4 <User_Mode+0x640>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4562:	6f a1       	ldd	r22, Y+39	; 0x27
    4564:	78 a5       	ldd	r23, Y+40	; 0x28
    4566:	89 a5       	ldd	r24, Y+41	; 0x29
    4568:	9a a5       	ldd	r25, Y+42	; 0x2a
    456a:	20 e0       	ldi	r18, 0x00	; 0
    456c:	30 e0       	ldi	r19, 0x00	; 0
    456e:	40 e2       	ldi	r20, 0x20	; 32
    4570:	51 e4       	ldi	r21, 0x41	; 65
    4572:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4576:	dc 01       	movw	r26, r24
    4578:	cb 01       	movw	r24, r22
    457a:	bc 01       	movw	r22, r24
    457c:	cd 01       	movw	r24, r26
    457e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4582:	dc 01       	movw	r26, r24
    4584:	cb 01       	movw	r24, r22
    4586:	9a a3       	std	Y+34, r25	; 0x22
    4588:	89 a3       	std	Y+33, r24	; 0x21
    458a:	0f c0       	rjmp	.+30     	; 0x45aa <User_Mode+0x636>
    458c:	88 ec       	ldi	r24, 0xC8	; 200
    458e:	90 e0       	ldi	r25, 0x00	; 0
    4590:	98 a3       	std	Y+32, r25	; 0x20
    4592:	8f 8f       	std	Y+31, r24	; 0x1f
    4594:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4596:	98 a1       	ldd	r25, Y+32	; 0x20
    4598:	01 97       	sbiw	r24, 0x01	; 1
    459a:	f1 f7       	brne	.-4      	; 0x4598 <User_Mode+0x624>
    459c:	98 a3       	std	Y+32, r25	; 0x20
    459e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45a0:	89 a1       	ldd	r24, Y+33	; 0x21
    45a2:	9a a1       	ldd	r25, Y+34	; 0x22
    45a4:	01 97       	sbiw	r24, 0x01	; 1
    45a6:	9a a3       	std	Y+34, r25	; 0x22
    45a8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45aa:	89 a1       	ldd	r24, Y+33	; 0x21
    45ac:	9a a1       	ldd	r25, Y+34	; 0x22
    45ae:	00 97       	sbiw	r24, 0x00	; 0
    45b0:	69 f7       	brne	.-38     	; 0x458c <User_Mode+0x618>
    45b2:	14 c0       	rjmp	.+40     	; 0x45dc <User_Mode+0x668>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45b4:	6b a1       	ldd	r22, Y+35	; 0x23
    45b6:	7c a1       	ldd	r23, Y+36	; 0x24
    45b8:	8d a1       	ldd	r24, Y+37	; 0x25
    45ba:	9e a1       	ldd	r25, Y+38	; 0x26
    45bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45c0:	dc 01       	movw	r26, r24
    45c2:	cb 01       	movw	r24, r22
    45c4:	9a a3       	std	Y+34, r25	; 0x22
    45c6:	89 a3       	std	Y+33, r24	; 0x21
    45c8:	89 a1       	ldd	r24, Y+33	; 0x21
    45ca:	9a a1       	ldd	r25, Y+34	; 0x22
    45cc:	9e 8f       	std	Y+30, r25	; 0x1e
    45ce:	8d 8f       	std	Y+29, r24	; 0x1d
    45d0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    45d2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    45d4:	01 97       	sbiw	r24, 0x01	; 1
    45d6:	f1 f7       	brne	.-4      	; 0x45d4 <User_Mode+0x660>
    45d8:	9e 8f       	std	Y+30, r25	; 0x1e
    45da:	8d 8f       	std	Y+29, r24	; 0x1d
							_delay_ms(1000);
							LCD_CLR();
    45dc:	0e 94 2b 13 	call	0x2656	; 0x2656 <LCD_CLR>
							 Bluetooth_SendString("\n--------------------\n");
    45e0:	80 e6       	ldi	r24, 0x60	; 96
    45e2:	90 e0       	ldi	r25, 0x00	; 0
    45e4:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
							 Bluetooth_SendString("Your ID:");
    45e8:	84 ef       	ldi	r24, 0xF4	; 244
    45ea:	91 e0       	ldi	r25, 0x01	; 1
    45ec:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
							LCD_WriteString("Your ID:");
    45f0:	84 ef       	ldi	r24, 0xF4	; 244
    45f2:	91 e0       	ldi	r25, 0x01	; 1
    45f4:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LCD_WriteString>
							LCD_PrintNum(User_Index);
    45f8:	fe 01       	movw	r30, r28
    45fa:	e5 5a       	subi	r30, 0xA5	; 165
    45fc:	ff 4f       	sbci	r31, 0xFF	; 255
    45fe:	80 81       	ld	r24, Z
    4600:	88 2f       	mov	r24, r24
    4602:	90 e0       	ldi	r25, 0x00	; 0
    4604:	a0 e0       	ldi	r26, 0x00	; 0
    4606:	b0 e0       	ldi	r27, 0x00	; 0
    4608:	bc 01       	movw	r22, r24
    460a:	cd 01       	movw	r24, r26
    460c:	0e 94 49 13 	call	0x2692	; 0x2692 <LCD_PrintNum>
				if(User_Input == 0)
				{
					Bluetooth_SendNumber(User_Input);
					LCD_PrintNum(User_Input);
					User_Index = 10;
					while(Wrong_Entry_Flag==0)
    4610:	fe 01       	movw	r30, r28
    4612:	e8 5a       	subi	r30, 0xA8	; 168
    4614:	ff 4f       	sbci	r31, 0xFF	; 255
    4616:	80 81       	ld	r24, Z
    4618:	88 23       	and	r24, r24
    461a:	09 f4       	brne	.+2      	; 0x461e <User_Mode+0x6aa>
    461c:	43 cf       	rjmp	.-378    	; 0x44a4 <User_Mode+0x530>
    461e:	f5 c0       	rjmp	.+490    	; 0x480a <User_Mode+0x896>
							LCD_PrintNum(User_Index);
						}
					}
					break;
				}
				else if(User_Input == 3)
    4620:	fe 01       	movw	r30, r28
    4622:	e4 5a       	subi	r30, 0xA4	; 164
    4624:	ff 4f       	sbci	r31, 0xFF	; 255
    4626:	80 81       	ld	r24, Z
    4628:	83 30       	cpi	r24, 0x03	; 3
    462a:	59 f4       	brne	.+22     	; 0x4642 <User_Mode+0x6ce>
				{
					User_Index = 1;
    462c:	fe 01       	movw	r30, r28
    462e:	e5 5a       	subi	r30, 0xA5	; 165
    4630:	ff 4f       	sbci	r31, 0xFF	; 255
    4632:	81 e0       	ldi	r24, 0x01	; 1
    4634:	80 83       	st	Z, r24
					User_ID_ExitFlag=1;
    4636:	fe 01       	movw	r30, r28
    4638:	e6 5a       	subi	r30, 0xA6	; 166
    463a:	ff 4f       	sbci	r31, 0xFF	; 255
    463c:	81 e0       	ldi	r24, 0x01	; 1
    463e:	80 83       	st	Z, r24
    4640:	e4 c0       	rjmp	.+456    	; 0x480a <User_Mode+0x896>
				}

			}


			User_Index = User_Input;
    4642:	de 01       	movw	r26, r28
    4644:	a5 5a       	subi	r26, 0xA5	; 165
    4646:	bf 4f       	sbci	r27, 0xFF	; 255
    4648:	fe 01       	movw	r30, r28
    464a:	e4 5a       	subi	r30, 0xA4	; 164
    464c:	ff 4f       	sbci	r31, 0xFF	; 255
    464e:	80 81       	ld	r24, Z
    4650:	8c 93       	st	X, r24
			User_Input = UART_u8Receiver();
    4652:	0e 94 a3 1a 	call	0x3546	; 0x3546 <UART_u8Receiver>
    4656:	fe 01       	movw	r30, r28
    4658:	e4 5a       	subi	r30, 0xA4	; 164
    465a:	ff 4f       	sbci	r31, 0xFF	; 255
    465c:	80 83       	st	Z, r24
			ASCII_Conversion(&User_Input);
    465e:	ce 01       	movw	r24, r28
    4660:	84 5a       	subi	r24, 0xA4	; 164
    4662:	9f 4f       	sbci	r25, 0xFF	; 255
    4664:	0e 94 b7 1c 	call	0x396e	; 0x396e <ASCII_Conversion>
			if(User_Input==3)
    4668:	fe 01       	movw	r30, r28
    466a:	e4 5a       	subi	r30, 0xA4	; 164
    466c:	ff 4f       	sbci	r31, 0xFF	; 255
    466e:	80 81       	ld	r24, Z
    4670:	83 30       	cpi	r24, 0x03	; 3
    4672:	09 f0       	breq	.+2      	; 0x4676 <User_Mode+0x702>
    4674:	c3 c0       	rjmp	.+390    	; 0x47fc <User_Mode+0x888>
			{
				User_ID_ExitFlag=1;
    4676:	fe 01       	movw	r30, r28
    4678:	e6 5a       	subi	r30, 0xA6	; 166
    467a:	ff 4f       	sbci	r31, 0xFF	; 255
    467c:	81 e0       	ldi	r24, 0x01	; 1
    467e:	80 83       	st	Z, r24
    4680:	c4 c0       	rjmp	.+392    	; 0x480a <User_Mode+0x896>
			}
			else
			{
				while(Wrong_Entry_Flag==0)
				{
					LCD_CLR();
    4682:	0e 94 2b 13 	call	0x2656	; 0x2656 <LCD_CLR>
					 Bluetooth_SendString("\n--------------------\n");
    4686:	80 e6       	ldi	r24, 0x60	; 96
    4688:	90 e0       	ldi	r25, 0x00	; 0
    468a:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
					 Bluetooth_SendString("Wrong Entry");
    468e:	8d ef       	ldi	r24, 0xFD	; 253
    4690:	91 e0       	ldi	r25, 0x01	; 1
    4692:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
					LCD_WriteString("Wrong Entry");
    4696:	8d ef       	ldi	r24, 0xFD	; 253
    4698:	91 e0       	ldi	r25, 0x01	; 1
    469a:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LCD_WriteString>
    469e:	80 e0       	ldi	r24, 0x00	; 0
    46a0:	90 e0       	ldi	r25, 0x00	; 0
    46a2:	aa e7       	ldi	r26, 0x7A	; 122
    46a4:	b4 e4       	ldi	r27, 0x44	; 68
    46a6:	89 8f       	std	Y+25, r24	; 0x19
    46a8:	9a 8f       	std	Y+26, r25	; 0x1a
    46aa:	ab 8f       	std	Y+27, r26	; 0x1b
    46ac:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46ae:	69 8d       	ldd	r22, Y+25	; 0x19
    46b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    46b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    46b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    46b6:	20 e0       	ldi	r18, 0x00	; 0
    46b8:	30 e0       	ldi	r19, 0x00	; 0
    46ba:	4a ef       	ldi	r20, 0xFA	; 250
    46bc:	54 e4       	ldi	r21, 0x44	; 68
    46be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46c2:	dc 01       	movw	r26, r24
    46c4:	cb 01       	movw	r24, r22
    46c6:	8d 8b       	std	Y+21, r24	; 0x15
    46c8:	9e 8b       	std	Y+22, r25	; 0x16
    46ca:	af 8b       	std	Y+23, r26	; 0x17
    46cc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    46ce:	6d 89       	ldd	r22, Y+21	; 0x15
    46d0:	7e 89       	ldd	r23, Y+22	; 0x16
    46d2:	8f 89       	ldd	r24, Y+23	; 0x17
    46d4:	98 8d       	ldd	r25, Y+24	; 0x18
    46d6:	20 e0       	ldi	r18, 0x00	; 0
    46d8:	30 e0       	ldi	r19, 0x00	; 0
    46da:	40 e8       	ldi	r20, 0x80	; 128
    46dc:	5f e3       	ldi	r21, 0x3F	; 63
    46de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    46e2:	88 23       	and	r24, r24
    46e4:	2c f4       	brge	.+10     	; 0x46f0 <User_Mode+0x77c>
		__ticks = 1;
    46e6:	81 e0       	ldi	r24, 0x01	; 1
    46e8:	90 e0       	ldi	r25, 0x00	; 0
    46ea:	9c 8b       	std	Y+20, r25	; 0x14
    46ec:	8b 8b       	std	Y+19, r24	; 0x13
    46ee:	3f c0       	rjmp	.+126    	; 0x476e <User_Mode+0x7fa>
	else if (__tmp > 65535)
    46f0:	6d 89       	ldd	r22, Y+21	; 0x15
    46f2:	7e 89       	ldd	r23, Y+22	; 0x16
    46f4:	8f 89       	ldd	r24, Y+23	; 0x17
    46f6:	98 8d       	ldd	r25, Y+24	; 0x18
    46f8:	20 e0       	ldi	r18, 0x00	; 0
    46fa:	3f ef       	ldi	r19, 0xFF	; 255
    46fc:	4f e7       	ldi	r20, 0x7F	; 127
    46fe:	57 e4       	ldi	r21, 0x47	; 71
    4700:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4704:	18 16       	cp	r1, r24
    4706:	4c f5       	brge	.+82     	; 0x475a <User_Mode+0x7e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4708:	69 8d       	ldd	r22, Y+25	; 0x19
    470a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    470c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    470e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4710:	20 e0       	ldi	r18, 0x00	; 0
    4712:	30 e0       	ldi	r19, 0x00	; 0
    4714:	40 e2       	ldi	r20, 0x20	; 32
    4716:	51 e4       	ldi	r21, 0x41	; 65
    4718:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    471c:	dc 01       	movw	r26, r24
    471e:	cb 01       	movw	r24, r22
    4720:	bc 01       	movw	r22, r24
    4722:	cd 01       	movw	r24, r26
    4724:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4728:	dc 01       	movw	r26, r24
    472a:	cb 01       	movw	r24, r22
    472c:	9c 8b       	std	Y+20, r25	; 0x14
    472e:	8b 8b       	std	Y+19, r24	; 0x13
    4730:	0f c0       	rjmp	.+30     	; 0x4750 <User_Mode+0x7dc>
    4732:	88 ec       	ldi	r24, 0xC8	; 200
    4734:	90 e0       	ldi	r25, 0x00	; 0
    4736:	9a 8b       	std	Y+18, r25	; 0x12
    4738:	89 8b       	std	Y+17, r24	; 0x11
    473a:	89 89       	ldd	r24, Y+17	; 0x11
    473c:	9a 89       	ldd	r25, Y+18	; 0x12
    473e:	01 97       	sbiw	r24, 0x01	; 1
    4740:	f1 f7       	brne	.-4      	; 0x473e <User_Mode+0x7ca>
    4742:	9a 8b       	std	Y+18, r25	; 0x12
    4744:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4746:	8b 89       	ldd	r24, Y+19	; 0x13
    4748:	9c 89       	ldd	r25, Y+20	; 0x14
    474a:	01 97       	sbiw	r24, 0x01	; 1
    474c:	9c 8b       	std	Y+20, r25	; 0x14
    474e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4750:	8b 89       	ldd	r24, Y+19	; 0x13
    4752:	9c 89       	ldd	r25, Y+20	; 0x14
    4754:	00 97       	sbiw	r24, 0x00	; 0
    4756:	69 f7       	brne	.-38     	; 0x4732 <User_Mode+0x7be>
    4758:	14 c0       	rjmp	.+40     	; 0x4782 <User_Mode+0x80e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    475a:	6d 89       	ldd	r22, Y+21	; 0x15
    475c:	7e 89       	ldd	r23, Y+22	; 0x16
    475e:	8f 89       	ldd	r24, Y+23	; 0x17
    4760:	98 8d       	ldd	r25, Y+24	; 0x18
    4762:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4766:	dc 01       	movw	r26, r24
    4768:	cb 01       	movw	r24, r22
    476a:	9c 8b       	std	Y+20, r25	; 0x14
    476c:	8b 8b       	std	Y+19, r24	; 0x13
    476e:	8b 89       	ldd	r24, Y+19	; 0x13
    4770:	9c 89       	ldd	r25, Y+20	; 0x14
    4772:	98 8b       	std	Y+16, r25	; 0x10
    4774:	8f 87       	std	Y+15, r24	; 0x0f
    4776:	8f 85       	ldd	r24, Y+15	; 0x0f
    4778:	98 89       	ldd	r25, Y+16	; 0x10
    477a:	01 97       	sbiw	r24, 0x01	; 1
    477c:	f1 f7       	brne	.-4      	; 0x477a <User_Mode+0x806>
    477e:	98 8b       	std	Y+16, r25	; 0x10
    4780:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(1000);
					LCD_CLR();
    4782:	0e 94 2b 13 	call	0x2656	; 0x2656 <LCD_CLR>
					 Bluetooth_SendString("\n--------------------\n");
    4786:	80 e6       	ldi	r24, 0x60	; 96
    4788:	90 e0       	ldi	r25, 0x00	; 0
    478a:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
					 Bluetooth_SendString("Your ID:");
    478e:	84 ef       	ldi	r24, 0xF4	; 244
    4790:	91 e0       	ldi	r25, 0x01	; 1
    4792:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
					LCD_WriteString("Your ID:");
    4796:	84 ef       	ldi	r24, 0xF4	; 244
    4798:	91 e0       	ldi	r25, 0x01	; 1
    479a:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LCD_WriteString>
					Bluetooth_SendNumber(User_Index);
    479e:	fe 01       	movw	r30, r28
    47a0:	e5 5a       	subi	r30, 0xA5	; 165
    47a2:	ff 4f       	sbci	r31, 0xFF	; 255
    47a4:	80 81       	ld	r24, Z
    47a6:	88 2f       	mov	r24, r24
    47a8:	90 e0       	ldi	r25, 0x00	; 0
    47aa:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <Bluetooth_SendNumber>
					LCD_PrintNum(User_Index);
    47ae:	fe 01       	movw	r30, r28
    47b0:	e5 5a       	subi	r30, 0xA5	; 165
    47b2:	ff 4f       	sbci	r31, 0xFF	; 255
    47b4:	80 81       	ld	r24, Z
    47b6:	88 2f       	mov	r24, r24
    47b8:	90 e0       	ldi	r25, 0x00	; 0
    47ba:	a0 e0       	ldi	r26, 0x00	; 0
    47bc:	b0 e0       	ldi	r27, 0x00	; 0
    47be:	bc 01       	movw	r22, r24
    47c0:	cd 01       	movw	r24, r26
    47c2:	0e 94 49 13 	call	0x2692	; 0x2692 <LCD_PrintNum>
					User_Input = UART_u8Receiver();
    47c6:	0e 94 a3 1a 	call	0x3546	; 0x3546 <UART_u8Receiver>
    47ca:	fe 01       	movw	r30, r28
    47cc:	e4 5a       	subi	r30, 0xA4	; 164
    47ce:	ff 4f       	sbci	r31, 0xFF	; 255
    47d0:	80 83       	st	Z, r24
					ASCII_Conversion(&User_Input);
    47d2:	ce 01       	movw	r24, r28
    47d4:	84 5a       	subi	r24, 0xA4	; 164
    47d6:	9f 4f       	sbci	r25, 0xFF	; 255
    47d8:	0e 94 b7 1c 	call	0x396e	; 0x396e <ASCII_Conversion>
					if(User_Input==3)
    47dc:	fe 01       	movw	r30, r28
    47de:	e4 5a       	subi	r30, 0xA4	; 164
    47e0:	ff 4f       	sbci	r31, 0xFF	; 255
    47e2:	80 81       	ld	r24, Z
    47e4:	83 30       	cpi	r24, 0x03	; 3
    47e6:	51 f4       	brne	.+20     	; 0x47fc <User_Mode+0x888>
					{
						Wrong_Entry_Flag=1;
    47e8:	fe 01       	movw	r30, r28
    47ea:	e8 5a       	subi	r30, 0xA8	; 168
    47ec:	ff 4f       	sbci	r31, 0xFF	; 255
    47ee:	81 e0       	ldi	r24, 0x01	; 1
    47f0:	80 83       	st	Z, r24
						User_ID_ExitFlag=1;
    47f2:	fe 01       	movw	r30, r28
    47f4:	e6 5a       	subi	r30, 0xA6	; 166
    47f6:	ff 4f       	sbci	r31, 0xFF	; 255
    47f8:	81 e0       	ldi	r24, 0x01	; 1
    47fa:	80 83       	st	Z, r24
				User_ID_ExitFlag=1;
				break;
			}
			else
			{
				while(Wrong_Entry_Flag==0)
    47fc:	fe 01       	movw	r30, r28
    47fe:	e8 5a       	subi	r30, 0xA8	; 168
    4800:	ff 4f       	sbci	r31, 0xFF	; 255
    4802:	80 81       	ld	r24, Z
    4804:	88 23       	and	r24, r24
    4806:	09 f4       	brne	.+2      	; 0x480a <User_Mode+0x896>
    4808:	3c cf       	rjmp	.-392    	; 0x4682 <User_Mode+0x70e>
		//			break;
				}
				break;
			}
		}
		if(User_ID_ExitFlag==1)
    480a:	fe 01       	movw	r30, r28
    480c:	e6 5a       	subi	r30, 0xA6	; 166
    480e:	ff 4f       	sbci	r31, 0xFF	; 255
    4810:	80 81       	ld	r24, Z
    4812:	81 30       	cpi	r24, 0x01	; 1
    4814:	09 f0       	breq	.+2      	; 0x4818 <User_Mode+0x8a4>
    4816:	f7 c0       	rjmp	.+494    	; 0x4a06 <User_Mode+0xa92>
		{
			/* USER VALIDATION */
			Validation_State=User_Validation(User_Index);
    4818:	fe 01       	movw	r30, r28
    481a:	e5 5a       	subi	r30, 0xA5	; 165
    481c:	ff 4f       	sbci	r31, 0xFF	; 255
    481e:	80 81       	ld	r24, Z
    4820:	0e 94 c4 25 	call	0x4b88	; 0x4b88 <User_Validation>
    4824:	fe 01       	movw	r30, r28
    4826:	e7 5a       	subi	r30, 0xA7	; 167
    4828:	ff 4f       	sbci	r31, 0xFF	; 255
    482a:	80 83       	st	Z, r24
			if(Validation_State == 1)
    482c:	fe 01       	movw	r30, r28
    482e:	e7 5a       	subi	r30, 0xA7	; 167
    4830:	ff 4f       	sbci	r31, 0xFF	; 255
    4832:	80 81       	ld	r24, Z
    4834:	81 30       	cpi	r24, 0x01	; 1
    4836:	09 f0       	breq	.+2      	; 0x483a <User_Mode+0x8c6>
    4838:	e6 c0       	rjmp	.+460    	; 0x4a06 <User_Mode+0xa92>
			{
				LCD_CLR();
    483a:	0e 94 2b 13 	call	0x2656	; 0x2656 <LCD_CLR>
				 Bluetooth_SendString("\n--------------------\n");
    483e:	80 e6       	ldi	r24, 0x60	; 96
    4840:	90 e0       	ldi	r25, 0x00	; 0
    4842:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
				 Bluetooth_SendString("Welcome!");
    4846:	89 e0       	ldi	r24, 0x09	; 9
    4848:	92 e0       	ldi	r25, 0x02	; 2
    484a:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
				LCD_WriteString("Welcome!");
    484e:	89 e0       	ldi	r24, 0x09	; 9
    4850:	92 e0       	ldi	r25, 0x02	; 2
    4852:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LCD_WriteString>
    4856:	80 e0       	ldi	r24, 0x00	; 0
    4858:	90 e0       	ldi	r25, 0x00	; 0
    485a:	aa e7       	ldi	r26, 0x7A	; 122
    485c:	b4 e4       	ldi	r27, 0x44	; 68
    485e:	8b 87       	std	Y+11, r24	; 0x0b
    4860:	9c 87       	std	Y+12, r25	; 0x0c
    4862:	ad 87       	std	Y+13, r26	; 0x0d
    4864:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4866:	6b 85       	ldd	r22, Y+11	; 0x0b
    4868:	7c 85       	ldd	r23, Y+12	; 0x0c
    486a:	8d 85       	ldd	r24, Y+13	; 0x0d
    486c:	9e 85       	ldd	r25, Y+14	; 0x0e
    486e:	20 e0       	ldi	r18, 0x00	; 0
    4870:	30 e0       	ldi	r19, 0x00	; 0
    4872:	4a ef       	ldi	r20, 0xFA	; 250
    4874:	54 e4       	ldi	r21, 0x44	; 68
    4876:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    487a:	dc 01       	movw	r26, r24
    487c:	cb 01       	movw	r24, r22
    487e:	8f 83       	std	Y+7, r24	; 0x07
    4880:	98 87       	std	Y+8, r25	; 0x08
    4882:	a9 87       	std	Y+9, r26	; 0x09
    4884:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4886:	6f 81       	ldd	r22, Y+7	; 0x07
    4888:	78 85       	ldd	r23, Y+8	; 0x08
    488a:	89 85       	ldd	r24, Y+9	; 0x09
    488c:	9a 85       	ldd	r25, Y+10	; 0x0a
    488e:	20 e0       	ldi	r18, 0x00	; 0
    4890:	30 e0       	ldi	r19, 0x00	; 0
    4892:	40 e8       	ldi	r20, 0x80	; 128
    4894:	5f e3       	ldi	r21, 0x3F	; 63
    4896:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    489a:	88 23       	and	r24, r24
    489c:	2c f4       	brge	.+10     	; 0x48a8 <User_Mode+0x934>
		__ticks = 1;
    489e:	81 e0       	ldi	r24, 0x01	; 1
    48a0:	90 e0       	ldi	r25, 0x00	; 0
    48a2:	9e 83       	std	Y+6, r25	; 0x06
    48a4:	8d 83       	std	Y+5, r24	; 0x05
    48a6:	3f c0       	rjmp	.+126    	; 0x4926 <User_Mode+0x9b2>
	else if (__tmp > 65535)
    48a8:	6f 81       	ldd	r22, Y+7	; 0x07
    48aa:	78 85       	ldd	r23, Y+8	; 0x08
    48ac:	89 85       	ldd	r24, Y+9	; 0x09
    48ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    48b0:	20 e0       	ldi	r18, 0x00	; 0
    48b2:	3f ef       	ldi	r19, 0xFF	; 255
    48b4:	4f e7       	ldi	r20, 0x7F	; 127
    48b6:	57 e4       	ldi	r21, 0x47	; 71
    48b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    48bc:	18 16       	cp	r1, r24
    48be:	4c f5       	brge	.+82     	; 0x4912 <User_Mode+0x99e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    48c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    48c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    48c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    48c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    48c8:	20 e0       	ldi	r18, 0x00	; 0
    48ca:	30 e0       	ldi	r19, 0x00	; 0
    48cc:	40 e2       	ldi	r20, 0x20	; 32
    48ce:	51 e4       	ldi	r21, 0x41	; 65
    48d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48d4:	dc 01       	movw	r26, r24
    48d6:	cb 01       	movw	r24, r22
    48d8:	bc 01       	movw	r22, r24
    48da:	cd 01       	movw	r24, r26
    48dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48e0:	dc 01       	movw	r26, r24
    48e2:	cb 01       	movw	r24, r22
    48e4:	9e 83       	std	Y+6, r25	; 0x06
    48e6:	8d 83       	std	Y+5, r24	; 0x05
    48e8:	0f c0       	rjmp	.+30     	; 0x4908 <User_Mode+0x994>
    48ea:	88 ec       	ldi	r24, 0xC8	; 200
    48ec:	90 e0       	ldi	r25, 0x00	; 0
    48ee:	9c 83       	std	Y+4, r25	; 0x04
    48f0:	8b 83       	std	Y+3, r24	; 0x03
    48f2:	8b 81       	ldd	r24, Y+3	; 0x03
    48f4:	9c 81       	ldd	r25, Y+4	; 0x04
    48f6:	01 97       	sbiw	r24, 0x01	; 1
    48f8:	f1 f7       	brne	.-4      	; 0x48f6 <User_Mode+0x982>
    48fa:	9c 83       	std	Y+4, r25	; 0x04
    48fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48fe:	8d 81       	ldd	r24, Y+5	; 0x05
    4900:	9e 81       	ldd	r25, Y+6	; 0x06
    4902:	01 97       	sbiw	r24, 0x01	; 1
    4904:	9e 83       	std	Y+6, r25	; 0x06
    4906:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4908:	8d 81       	ldd	r24, Y+5	; 0x05
    490a:	9e 81       	ldd	r25, Y+6	; 0x06
    490c:	00 97       	sbiw	r24, 0x00	; 0
    490e:	69 f7       	brne	.-38     	; 0x48ea <User_Mode+0x976>
    4910:	73 c0       	rjmp	.+230    	; 0x49f8 <User_Mode+0xa84>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4912:	6f 81       	ldd	r22, Y+7	; 0x07
    4914:	78 85       	ldd	r23, Y+8	; 0x08
    4916:	89 85       	ldd	r24, Y+9	; 0x09
    4918:	9a 85       	ldd	r25, Y+10	; 0x0a
    491a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    491e:	dc 01       	movw	r26, r24
    4920:	cb 01       	movw	r24, r22
    4922:	9e 83       	std	Y+6, r25	; 0x06
    4924:	8d 83       	std	Y+5, r24	; 0x05
    4926:	8d 81       	ldd	r24, Y+5	; 0x05
    4928:	9e 81       	ldd	r25, Y+6	; 0x06
    492a:	9a 83       	std	Y+2, r25	; 0x02
    492c:	89 83       	std	Y+1, r24	; 0x01
    492e:	89 81       	ldd	r24, Y+1	; 0x01
    4930:	9a 81       	ldd	r25, Y+2	; 0x02
    4932:	01 97       	sbiw	r24, 0x01	; 1
    4934:	f1 f7       	brne	.-4      	; 0x4932 <User_Mode+0x9be>
    4936:	9a 83       	std	Y+2, r25	; 0x02
    4938:	89 83       	std	Y+1, r24	; 0x01
    493a:	5e c0       	rjmp	.+188    	; 0x49f8 <User_Mode+0xa84>
				_delay_ms(1000);

				while(User_MainMenu_ExitFlag==0)
				{
					LCD_CLR();
    493c:	0e 94 2b 13 	call	0x2656	; 0x2656 <LCD_CLR>
					 Bluetooth_SendString("\n--------------------\n");
    4940:	80 e6       	ldi	r24, 0x60	; 96
    4942:	90 e0       	ldi	r25, 0x00	; 0
    4944:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
					 Bluetooth_SendString("1)Door Control\n2)A/C Control\n3)Light\n4)Back");
    4948:	82 e1       	ldi	r24, 0x12	; 18
    494a:	92 e0       	ldi	r25, 0x02	; 2
    494c:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
					LCD_WriteString("1)Door 2)A/C");
    4950:	8e e3       	ldi	r24, 0x3E	; 62
    4952:	92 e0       	ldi	r25, 0x02	; 2
    4954:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LCD_WriteString>
					LCD_goto(0,1);
    4958:	80 e0       	ldi	r24, 0x00	; 0
    495a:	61 e0       	ldi	r22, 0x01	; 1
    495c:	0e 94 13 13 	call	0x2626	; 0x2626 <LCD_goto>
					LCD_WriteString("3)Light");
    4960:	8b e4       	ldi	r24, 0x4B	; 75
    4962:	92 e0       	ldi	r25, 0x02	; 2
    4964:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LCD_WriteString>
					User_MainMenu_Input = UART_u8Receiver();
    4968:	0e 94 a3 1a 	call	0x3546	; 0x3546 <UART_u8Receiver>
    496c:	fe 01       	movw	r30, r28
    496e:	e3 5a       	subi	r30, 0xA3	; 163
    4970:	ff 4f       	sbci	r31, 0xFF	; 255
    4972:	80 83       	st	Z, r24
					ASCII_Conversion(&User_MainMenu_Input);
    4974:	ce 01       	movw	r24, r28
    4976:	83 5a       	subi	r24, 0xA3	; 163
    4978:	9f 4f       	sbci	r25, 0xFF	; 255
    497a:	0e 94 b7 1c 	call	0x396e	; 0x396e <ASCII_Conversion>
					switch(User_MainMenu_Input)
    497e:	fe 01       	movw	r30, r28
    4980:	e3 5a       	subi	r30, 0xA3	; 163
    4982:	ff 4f       	sbci	r31, 0xFF	; 255
    4984:	80 81       	ld	r24, Z
    4986:	28 2f       	mov	r18, r24
    4988:	30 e0       	ldi	r19, 0x00	; 0
    498a:	a0 96       	adiw	r28, 0x20	; 32
    498c:	3f af       	std	Y+63, r19	; 0x3f
    498e:	2e af       	std	Y+62, r18	; 0x3e
    4990:	a0 97       	sbiw	r28, 0x20	; 32
    4992:	a0 96       	adiw	r28, 0x20	; 32
    4994:	8e ad       	ldd	r24, Y+62	; 0x3e
    4996:	9f ad       	ldd	r25, Y+63	; 0x3f
    4998:	a0 97       	sbiw	r28, 0x20	; 32
    499a:	82 30       	cpi	r24, 0x02	; 2
    499c:	91 05       	cpc	r25, r1
    499e:	09 f1       	breq	.+66     	; 0x49e2 <User_Mode+0xa6e>
    49a0:	a0 96       	adiw	r28, 0x20	; 32
    49a2:	ee ad       	ldd	r30, Y+62	; 0x3e
    49a4:	ff ad       	ldd	r31, Y+63	; 0x3f
    49a6:	a0 97       	sbiw	r28, 0x20	; 32
    49a8:	e3 30       	cpi	r30, 0x03	; 3
    49aa:	f1 05       	cpc	r31, r1
    49ac:	44 f4       	brge	.+16     	; 0x49be <User_Mode+0xa4a>
    49ae:	a0 96       	adiw	r28, 0x20	; 32
    49b0:	2e ad       	ldd	r18, Y+62	; 0x3e
    49b2:	3f ad       	ldd	r19, Y+63	; 0x3f
    49b4:	a0 97       	sbiw	r28, 0x20	; 32
    49b6:	21 30       	cpi	r18, 0x01	; 1
    49b8:	31 05       	cpc	r19, r1
    49ba:	81 f0       	breq	.+32     	; 0x49dc <User_Mode+0xa68>
    49bc:	1d c0       	rjmp	.+58     	; 0x49f8 <User_Mode+0xa84>
    49be:	a0 96       	adiw	r28, 0x20	; 32
    49c0:	8e ad       	ldd	r24, Y+62	; 0x3e
    49c2:	9f ad       	ldd	r25, Y+63	; 0x3f
    49c4:	a0 97       	sbiw	r28, 0x20	; 32
    49c6:	83 30       	cpi	r24, 0x03	; 3
    49c8:	91 05       	cpc	r25, r1
    49ca:	71 f0       	breq	.+28     	; 0x49e8 <User_Mode+0xa74>
    49cc:	a0 96       	adiw	r28, 0x20	; 32
    49ce:	ee ad       	ldd	r30, Y+62	; 0x3e
    49d0:	ff ad       	ldd	r31, Y+63	; 0x3f
    49d2:	a0 97       	sbiw	r28, 0x20	; 32
    49d4:	e4 30       	cpi	r30, 0x04	; 4
    49d6:	f1 05       	cpc	r31, r1
    49d8:	51 f0       	breq	.+20     	; 0x49ee <User_Mode+0xa7a>
    49da:	0e c0       	rjmp	.+28     	; 0x49f8 <User_Mode+0xa84>
						{
						case 1:User_DoorControl();
    49dc:	0e 94 23 2b 	call	0x5646	; 0x5646 <User_DoorControl>
    49e0:	0b c0       	rjmp	.+22     	; 0x49f8 <User_Mode+0xa84>
							break;
						case 2:User_AC_Control();
    49e2:	0e 94 a3 2c 	call	0x5946	; 0x5946 <User_AC_Control>
    49e6:	08 c0       	rjmp	.+16     	; 0x49f8 <User_Mode+0xa84>
							break;
						case 3:User_Light_Control();
    49e8:	0e 94 60 2c 	call	0x58c0	; 0x58c0 <User_Light_Control>
    49ec:	05 c0       	rjmp	.+10     	; 0x49f8 <User_Mode+0xa84>
							break;
						case 4:User_MainMenu_ExitFlag=1;
    49ee:	fe 01       	movw	r30, r28
    49f0:	e9 5a       	subi	r30, 0xA9	; 169
    49f2:	ff 4f       	sbci	r31, 0xFF	; 255
    49f4:	81 e0       	ldi	r24, 0x01	; 1
    49f6:	80 83       	st	Z, r24
				 Bluetooth_SendString("\n--------------------\n");
				 Bluetooth_SendString("Welcome!");
				LCD_WriteString("Welcome!");
				_delay_ms(1000);

				while(User_MainMenu_ExitFlag==0)
    49f8:	fe 01       	movw	r30, r28
    49fa:	e9 5a       	subi	r30, 0xA9	; 169
    49fc:	ff 4f       	sbci	r31, 0xFF	; 255
    49fe:	80 81       	ld	r24, Z
    4a00:	88 23       	and	r24, r24
    4a02:	09 f4       	brne	.+2      	; 0x4a06 <User_Mode+0xa92>
    4a04:	9b cf       	rjmp	.-202    	; 0x493c <User_Mode+0x9c8>
				}
			}

		}
	}
}
    4a06:	c1 5a       	subi	r28, 0xA1	; 161
    4a08:	df 4f       	sbci	r29, 0xFF	; 255
    4a0a:	0f b6       	in	r0, 0x3f	; 63
    4a0c:	f8 94       	cli
    4a0e:	de bf       	out	0x3e, r29	; 62
    4a10:	0f be       	out	0x3f, r0	; 63
    4a12:	cd bf       	out	0x3d, r28	; 61
    4a14:	cf 91       	pop	r28
    4a16:	df 91       	pop	r29
    4a18:	1f 91       	pop	r17
    4a1a:	0f 91       	pop	r16
    4a1c:	08 95       	ret

00004a1e <Time_Out_Function>:
void Time_Out_Function(void)
{
    4a1e:	df 93       	push	r29
    4a20:	cf 93       	push	r28
    4a22:	cd b7       	in	r28, 0x3d	; 61
    4a24:	de b7       	in	r29, 0x3e	; 62
    4a26:	2e 97       	sbiw	r28, 0x0e	; 14
    4a28:	0f b6       	in	r0, 0x3f	; 63
    4a2a:	f8 94       	cli
    4a2c:	de bf       	out	0x3e, r29	; 62
    4a2e:	0f be       	out	0x3f, r0	; 63
    4a30:	cd bf       	out	0x3d, r28	; 61
	LCD_CLR();
    4a32:	0e 94 2b 13 	call	0x2656	; 0x2656 <LCD_CLR>
	LCD_WriteString("Time Out For:");
    4a36:	83 e5       	ldi	r24, 0x53	; 83
    4a38:	92 e0       	ldi	r25, 0x02	; 2
    4a3a:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LCD_WriteString>
	for (TimeOut_Counter=5;TimeOut_Counter>0;TimeOut_Counter--)
    4a3e:	85 e0       	ldi	r24, 0x05	; 5
    4a40:	80 93 47 05 	sts	0x0547, r24
    4a44:	93 c0       	rjmp	.+294    	; 0x4b6c <Time_Out_Function+0x14e>
	{

		LCD_goto(14,0);
    4a46:	8e e0       	ldi	r24, 0x0E	; 14
    4a48:	60 e0       	ldi	r22, 0x00	; 0
    4a4a:	0e 94 13 13 	call	0x2626	; 0x2626 <LCD_goto>
		LCD_PrintNum(TimeOut_Counter);
    4a4e:	80 91 47 05 	lds	r24, 0x0547
    4a52:	88 2f       	mov	r24, r24
    4a54:	90 e0       	ldi	r25, 0x00	; 0
    4a56:	a0 e0       	ldi	r26, 0x00	; 0
    4a58:	b0 e0       	ldi	r27, 0x00	; 0
    4a5a:	bc 01       	movw	r22, r24
    4a5c:	cd 01       	movw	r24, r26
    4a5e:	0e 94 49 13 	call	0x2692	; 0x2692 <LCD_PrintNum>
		Bluetooth_SendString("\n--------------------\n");
    4a62:	80 e6       	ldi	r24, 0x60	; 96
    4a64:	90 e0       	ldi	r25, 0x00	; 0
    4a66:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
		Bluetooth_SendString("Time Out For:");
    4a6a:	83 e5       	ldi	r24, 0x53	; 83
    4a6c:	92 e0       	ldi	r25, 0x02	; 2
    4a6e:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
		Bluetooth_SendNumber(TimeOut_Counter);
    4a72:	80 91 47 05 	lds	r24, 0x0547
    4a76:	88 2f       	mov	r24, r24
    4a78:	90 e0       	ldi	r25, 0x00	; 0
    4a7a:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <Bluetooth_SendNumber>
    4a7e:	80 e0       	ldi	r24, 0x00	; 0
    4a80:	90 e0       	ldi	r25, 0x00	; 0
    4a82:	aa e7       	ldi	r26, 0x7A	; 122
    4a84:	b4 e4       	ldi	r27, 0x44	; 68
    4a86:	8b 87       	std	Y+11, r24	; 0x0b
    4a88:	9c 87       	std	Y+12, r25	; 0x0c
    4a8a:	ad 87       	std	Y+13, r26	; 0x0d
    4a8c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4a90:	7c 85       	ldd	r23, Y+12	; 0x0c
    4a92:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a94:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a96:	20 e0       	ldi	r18, 0x00	; 0
    4a98:	30 e0       	ldi	r19, 0x00	; 0
    4a9a:	4a ef       	ldi	r20, 0xFA	; 250
    4a9c:	54 e4       	ldi	r21, 0x44	; 68
    4a9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4aa2:	dc 01       	movw	r26, r24
    4aa4:	cb 01       	movw	r24, r22
    4aa6:	8f 83       	std	Y+7, r24	; 0x07
    4aa8:	98 87       	std	Y+8, r25	; 0x08
    4aaa:	a9 87       	std	Y+9, r26	; 0x09
    4aac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4aae:	6f 81       	ldd	r22, Y+7	; 0x07
    4ab0:	78 85       	ldd	r23, Y+8	; 0x08
    4ab2:	89 85       	ldd	r24, Y+9	; 0x09
    4ab4:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ab6:	20 e0       	ldi	r18, 0x00	; 0
    4ab8:	30 e0       	ldi	r19, 0x00	; 0
    4aba:	40 e8       	ldi	r20, 0x80	; 128
    4abc:	5f e3       	ldi	r21, 0x3F	; 63
    4abe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4ac2:	88 23       	and	r24, r24
    4ac4:	2c f4       	brge	.+10     	; 0x4ad0 <Time_Out_Function+0xb2>
		__ticks = 1;
    4ac6:	81 e0       	ldi	r24, 0x01	; 1
    4ac8:	90 e0       	ldi	r25, 0x00	; 0
    4aca:	9e 83       	std	Y+6, r25	; 0x06
    4acc:	8d 83       	std	Y+5, r24	; 0x05
    4ace:	3f c0       	rjmp	.+126    	; 0x4b4e <Time_Out_Function+0x130>
	else if (__tmp > 65535)
    4ad0:	6f 81       	ldd	r22, Y+7	; 0x07
    4ad2:	78 85       	ldd	r23, Y+8	; 0x08
    4ad4:	89 85       	ldd	r24, Y+9	; 0x09
    4ad6:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ad8:	20 e0       	ldi	r18, 0x00	; 0
    4ada:	3f ef       	ldi	r19, 0xFF	; 255
    4adc:	4f e7       	ldi	r20, 0x7F	; 127
    4ade:	57 e4       	ldi	r21, 0x47	; 71
    4ae0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4ae4:	18 16       	cp	r1, r24
    4ae6:	4c f5       	brge	.+82     	; 0x4b3a <Time_Out_Function+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ae8:	6b 85       	ldd	r22, Y+11	; 0x0b
    4aea:	7c 85       	ldd	r23, Y+12	; 0x0c
    4aec:	8d 85       	ldd	r24, Y+13	; 0x0d
    4aee:	9e 85       	ldd	r25, Y+14	; 0x0e
    4af0:	20 e0       	ldi	r18, 0x00	; 0
    4af2:	30 e0       	ldi	r19, 0x00	; 0
    4af4:	40 e2       	ldi	r20, 0x20	; 32
    4af6:	51 e4       	ldi	r21, 0x41	; 65
    4af8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4afc:	dc 01       	movw	r26, r24
    4afe:	cb 01       	movw	r24, r22
    4b00:	bc 01       	movw	r22, r24
    4b02:	cd 01       	movw	r24, r26
    4b04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b08:	dc 01       	movw	r26, r24
    4b0a:	cb 01       	movw	r24, r22
    4b0c:	9e 83       	std	Y+6, r25	; 0x06
    4b0e:	8d 83       	std	Y+5, r24	; 0x05
    4b10:	0f c0       	rjmp	.+30     	; 0x4b30 <Time_Out_Function+0x112>
    4b12:	88 ec       	ldi	r24, 0xC8	; 200
    4b14:	90 e0       	ldi	r25, 0x00	; 0
    4b16:	9c 83       	std	Y+4, r25	; 0x04
    4b18:	8b 83       	std	Y+3, r24	; 0x03
    4b1a:	8b 81       	ldd	r24, Y+3	; 0x03
    4b1c:	9c 81       	ldd	r25, Y+4	; 0x04
    4b1e:	01 97       	sbiw	r24, 0x01	; 1
    4b20:	f1 f7       	brne	.-4      	; 0x4b1e <Time_Out_Function+0x100>
    4b22:	9c 83       	std	Y+4, r25	; 0x04
    4b24:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b26:	8d 81       	ldd	r24, Y+5	; 0x05
    4b28:	9e 81       	ldd	r25, Y+6	; 0x06
    4b2a:	01 97       	sbiw	r24, 0x01	; 1
    4b2c:	9e 83       	std	Y+6, r25	; 0x06
    4b2e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b30:	8d 81       	ldd	r24, Y+5	; 0x05
    4b32:	9e 81       	ldd	r25, Y+6	; 0x06
    4b34:	00 97       	sbiw	r24, 0x00	; 0
    4b36:	69 f7       	brne	.-38     	; 0x4b12 <Time_Out_Function+0xf4>
    4b38:	14 c0       	rjmp	.+40     	; 0x4b62 <Time_Out_Function+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b3a:	6f 81       	ldd	r22, Y+7	; 0x07
    4b3c:	78 85       	ldd	r23, Y+8	; 0x08
    4b3e:	89 85       	ldd	r24, Y+9	; 0x09
    4b40:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b46:	dc 01       	movw	r26, r24
    4b48:	cb 01       	movw	r24, r22
    4b4a:	9e 83       	std	Y+6, r25	; 0x06
    4b4c:	8d 83       	std	Y+5, r24	; 0x05
    4b4e:	8d 81       	ldd	r24, Y+5	; 0x05
    4b50:	9e 81       	ldd	r25, Y+6	; 0x06
    4b52:	9a 83       	std	Y+2, r25	; 0x02
    4b54:	89 83       	std	Y+1, r24	; 0x01
    4b56:	89 81       	ldd	r24, Y+1	; 0x01
    4b58:	9a 81       	ldd	r25, Y+2	; 0x02
    4b5a:	01 97       	sbiw	r24, 0x01	; 1
    4b5c:	f1 f7       	brne	.-4      	; 0x4b5a <Time_Out_Function+0x13c>
    4b5e:	9a 83       	std	Y+2, r25	; 0x02
    4b60:	89 83       	std	Y+1, r24	; 0x01
}
void Time_Out_Function(void)
{
	LCD_CLR();
	LCD_WriteString("Time Out For:");
	for (TimeOut_Counter=5;TimeOut_Counter>0;TimeOut_Counter--)
    4b62:	80 91 47 05 	lds	r24, 0x0547
    4b66:	81 50       	subi	r24, 0x01	; 1
    4b68:	80 93 47 05 	sts	0x0547, r24
    4b6c:	80 91 47 05 	lds	r24, 0x0547
    4b70:	88 23       	and	r24, r24
    4b72:	09 f0       	breq	.+2      	; 0x4b76 <Time_Out_Function+0x158>
    4b74:	68 cf       	rjmp	.-304    	; 0x4a46 <Time_Out_Function+0x28>
		Bluetooth_SendString("\n--------------------\n");
		Bluetooth_SendString("Time Out For:");
		Bluetooth_SendNumber(TimeOut_Counter);
		_delay_ms(1000);
	}
}
    4b76:	2e 96       	adiw	r28, 0x0e	; 14
    4b78:	0f b6       	in	r0, 0x3f	; 63
    4b7a:	f8 94       	cli
    4b7c:	de bf       	out	0x3e, r29	; 62
    4b7e:	0f be       	out	0x3f, r0	; 63
    4b80:	cd bf       	out	0x3d, r28	; 61
    4b82:	cf 91       	pop	r28
    4b84:	df 91       	pop	r29
    4b86:	08 95       	ret

00004b88 <User_Validation>:
u8 User_Validation(u8 User_ID)
{
    4b88:	0f 93       	push	r16
    4b8a:	1f 93       	push	r17
    4b8c:	df 93       	push	r29
    4b8e:	cf 93       	push	r28
    4b90:	cd b7       	in	r28, 0x3d	; 61
    4b92:	de b7       	in	r29, 0x3e	; 62
    4b94:	c1 57       	subi	r28, 0x71	; 113
    4b96:	d0 40       	sbci	r29, 0x00	; 0
    4b98:	0f b6       	in	r0, 0x3f	; 63
    4b9a:	f8 94       	cli
    4b9c:	de bf       	out	0x3e, r29	; 62
    4b9e:	0f be       	out	0x3f, r0	; 63
    4ba0:	cd bf       	out	0x3d, r28	; 61
    4ba2:	fe 01       	movw	r30, r28
    4ba4:	e1 59       	subi	r30, 0x91	; 145
    4ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ba8:	80 83       	st	Z, r24
	LCD_CLR();
    4baa:	0e 94 2b 13 	call	0x2656	; 0x2656 <LCD_CLR>
	//u8 TimeOut_Counter;
	u8 User_Pass_Location_Reader,User_Pass_Input[4]={0},Counter=0,Local_input,i;
    4bae:	fe 01       	movw	r30, r28
    4bb0:	e6 59       	subi	r30, 0x96	; 150
    4bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    4bb4:	10 82       	st	Z, r1
    4bb6:	11 82       	std	Z+1, r1	; 0x01
    4bb8:	12 82       	std	Z+2, r1	; 0x02
    4bba:	13 82       	std	Z+3, r1	; 0x03
    4bbc:	fe 01       	movw	r30, r28
    4bbe:	e8 59       	subi	r30, 0x98	; 152
    4bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    4bc2:	10 82       	st	Z, r1
	u8 Correct_Pass_Counter=0,Login_Success=0,Maximum_Trial=0,Local_EEPROM_Reader;
    4bc4:	fe 01       	movw	r30, r28
    4bc6:	ea 59       	subi	r30, 0x9A	; 154
    4bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    4bca:	10 82       	st	Z, r1
    4bcc:	fe 01       	movw	r30, r28
    4bce:	eb 59       	subi	r30, 0x9B	; 155
    4bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    4bd2:	10 82       	st	Z, r1
    4bd4:	fe 01       	movw	r30, r28
    4bd6:	ec 59       	subi	r30, 0x9C	; 156
    4bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    4bda:	10 82       	st	Z, r1

	User_Pass_Location_Reader = Array_Of_Addresses_Location[User_ID-1];
    4bdc:	fe 01       	movw	r30, r28
    4bde:	e1 59       	subi	r30, 0x91	; 145
    4be0:	ff 4f       	sbci	r31, 0xFF	; 255
    4be2:	80 81       	ld	r24, Z
    4be4:	88 2f       	mov	r24, r24
    4be6:	90 e0       	ldi	r25, 0x00	; 0
    4be8:	01 97       	sbiw	r24, 0x01	; 1
    4bea:	de 01       	movw	r26, r28
    4bec:	a7 59       	subi	r26, 0x97	; 151
    4bee:	bf 4f       	sbci	r27, 0xFF	; 255
    4bf0:	fc 01       	movw	r30, r24
    4bf2:	ee 5c       	subi	r30, 0xCE	; 206
    4bf4:	fa 4f       	sbci	r31, 0xFA	; 250
    4bf6:	80 81       	ld	r24, Z
    4bf8:	8c 93       	st	X, r24

	if(Array_Of_User_Status[User_ID-1]==2)//registered user
    4bfa:	fe 01       	movw	r30, r28
    4bfc:	e1 59       	subi	r30, 0x91	; 145
    4bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    4c00:	80 81       	ld	r24, Z
    4c02:	88 2f       	mov	r24, r24
    4c04:	90 e0       	ldi	r25, 0x00	; 0
    4c06:	01 97       	sbiw	r24, 0x01	; 1
    4c08:	fc 01       	movw	r30, r24
    4c0a:	e4 5c       	subi	r30, 0xC4	; 196
    4c0c:	fa 4f       	sbci	r31, 0xFA	; 250
    4c0e:	80 81       	ld	r24, Z
    4c10:	82 30       	cpi	r24, 0x02	; 2
    4c12:	09 f0       	breq	.+2      	; 0x4c16 <User_Validation+0x8e>
    4c14:	80 c4       	rjmp	.+2304   	; 0x5516 <User_Validation+0x98e>
	{
		 Bluetooth_SendString("\n--------------------\n");
    4c16:	80 e6       	ldi	r24, 0x60	; 96
    4c18:	90 e0       	ldi	r25, 0x00	; 0
    4c1a:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
		 Bluetooth_SendString("User Found");
    4c1e:	81 e6       	ldi	r24, 0x61	; 97
    4c20:	92 e0       	ldi	r25, 0x02	; 2
    4c22:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
		LCD_WriteString("User Found");
    4c26:	81 e6       	ldi	r24, 0x61	; 97
    4c28:	92 e0       	ldi	r25, 0x02	; 2
    4c2a:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LCD_WriteString>
    4c2e:	fe 01       	movw	r30, r28
    4c30:	e1 5a       	subi	r30, 0xA1	; 161
    4c32:	ff 4f       	sbci	r31, 0xFF	; 255
    4c34:	80 e0       	ldi	r24, 0x00	; 0
    4c36:	90 e0       	ldi	r25, 0x00	; 0
    4c38:	aa e7       	ldi	r26, 0x7A	; 122
    4c3a:	b4 e4       	ldi	r27, 0x44	; 68
    4c3c:	80 83       	st	Z, r24
    4c3e:	91 83       	std	Z+1, r25	; 0x01
    4c40:	a2 83       	std	Z+2, r26	; 0x02
    4c42:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c44:	8e 01       	movw	r16, r28
    4c46:	05 5a       	subi	r16, 0xA5	; 165
    4c48:	1f 4f       	sbci	r17, 0xFF	; 255
    4c4a:	fe 01       	movw	r30, r28
    4c4c:	e1 5a       	subi	r30, 0xA1	; 161
    4c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    4c50:	60 81       	ld	r22, Z
    4c52:	71 81       	ldd	r23, Z+1	; 0x01
    4c54:	82 81       	ldd	r24, Z+2	; 0x02
    4c56:	93 81       	ldd	r25, Z+3	; 0x03
    4c58:	20 e0       	ldi	r18, 0x00	; 0
    4c5a:	30 e0       	ldi	r19, 0x00	; 0
    4c5c:	4a ef       	ldi	r20, 0xFA	; 250
    4c5e:	54 e4       	ldi	r21, 0x44	; 68
    4c60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c64:	dc 01       	movw	r26, r24
    4c66:	cb 01       	movw	r24, r22
    4c68:	f8 01       	movw	r30, r16
    4c6a:	80 83       	st	Z, r24
    4c6c:	91 83       	std	Z+1, r25	; 0x01
    4c6e:	a2 83       	std	Z+2, r26	; 0x02
    4c70:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4c72:	fe 01       	movw	r30, r28
    4c74:	e5 5a       	subi	r30, 0xA5	; 165
    4c76:	ff 4f       	sbci	r31, 0xFF	; 255
    4c78:	60 81       	ld	r22, Z
    4c7a:	71 81       	ldd	r23, Z+1	; 0x01
    4c7c:	82 81       	ldd	r24, Z+2	; 0x02
    4c7e:	93 81       	ldd	r25, Z+3	; 0x03
    4c80:	20 e0       	ldi	r18, 0x00	; 0
    4c82:	30 e0       	ldi	r19, 0x00	; 0
    4c84:	40 e8       	ldi	r20, 0x80	; 128
    4c86:	5f e3       	ldi	r21, 0x3F	; 63
    4c88:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4c8c:	88 23       	and	r24, r24
    4c8e:	44 f4       	brge	.+16     	; 0x4ca0 <User_Validation+0x118>
		__ticks = 1;
    4c90:	fe 01       	movw	r30, r28
    4c92:	e7 5a       	subi	r30, 0xA7	; 167
    4c94:	ff 4f       	sbci	r31, 0xFF	; 255
    4c96:	81 e0       	ldi	r24, 0x01	; 1
    4c98:	90 e0       	ldi	r25, 0x00	; 0
    4c9a:	91 83       	std	Z+1, r25	; 0x01
    4c9c:	80 83       	st	Z, r24
    4c9e:	64 c0       	rjmp	.+200    	; 0x4d68 <User_Validation+0x1e0>
	else if (__tmp > 65535)
    4ca0:	fe 01       	movw	r30, r28
    4ca2:	e5 5a       	subi	r30, 0xA5	; 165
    4ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ca6:	60 81       	ld	r22, Z
    4ca8:	71 81       	ldd	r23, Z+1	; 0x01
    4caa:	82 81       	ldd	r24, Z+2	; 0x02
    4cac:	93 81       	ldd	r25, Z+3	; 0x03
    4cae:	20 e0       	ldi	r18, 0x00	; 0
    4cb0:	3f ef       	ldi	r19, 0xFF	; 255
    4cb2:	4f e7       	ldi	r20, 0x7F	; 127
    4cb4:	57 e4       	ldi	r21, 0x47	; 71
    4cb6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4cba:	18 16       	cp	r1, r24
    4cbc:	0c f0       	brlt	.+2      	; 0x4cc0 <User_Validation+0x138>
    4cbe:	43 c0       	rjmp	.+134    	; 0x4d46 <User_Validation+0x1be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4cc0:	fe 01       	movw	r30, r28
    4cc2:	e1 5a       	subi	r30, 0xA1	; 161
    4cc4:	ff 4f       	sbci	r31, 0xFF	; 255
    4cc6:	60 81       	ld	r22, Z
    4cc8:	71 81       	ldd	r23, Z+1	; 0x01
    4cca:	82 81       	ldd	r24, Z+2	; 0x02
    4ccc:	93 81       	ldd	r25, Z+3	; 0x03
    4cce:	20 e0       	ldi	r18, 0x00	; 0
    4cd0:	30 e0       	ldi	r19, 0x00	; 0
    4cd2:	40 e2       	ldi	r20, 0x20	; 32
    4cd4:	51 e4       	ldi	r21, 0x41	; 65
    4cd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cda:	dc 01       	movw	r26, r24
    4cdc:	cb 01       	movw	r24, r22
    4cde:	8e 01       	movw	r16, r28
    4ce0:	07 5a       	subi	r16, 0xA7	; 167
    4ce2:	1f 4f       	sbci	r17, 0xFF	; 255
    4ce4:	bc 01       	movw	r22, r24
    4ce6:	cd 01       	movw	r24, r26
    4ce8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cec:	dc 01       	movw	r26, r24
    4cee:	cb 01       	movw	r24, r22
    4cf0:	f8 01       	movw	r30, r16
    4cf2:	91 83       	std	Z+1, r25	; 0x01
    4cf4:	80 83       	st	Z, r24
    4cf6:	1f c0       	rjmp	.+62     	; 0x4d36 <User_Validation+0x1ae>
    4cf8:	fe 01       	movw	r30, r28
    4cfa:	e9 5a       	subi	r30, 0xA9	; 169
    4cfc:	ff 4f       	sbci	r31, 0xFF	; 255
    4cfe:	88 ec       	ldi	r24, 0xC8	; 200
    4d00:	90 e0       	ldi	r25, 0x00	; 0
    4d02:	91 83       	std	Z+1, r25	; 0x01
    4d04:	80 83       	st	Z, r24
    4d06:	fe 01       	movw	r30, r28
    4d08:	e9 5a       	subi	r30, 0xA9	; 169
    4d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    4d0c:	80 81       	ld	r24, Z
    4d0e:	91 81       	ldd	r25, Z+1	; 0x01
    4d10:	01 97       	sbiw	r24, 0x01	; 1
    4d12:	f1 f7       	brne	.-4      	; 0x4d10 <User_Validation+0x188>
    4d14:	fe 01       	movw	r30, r28
    4d16:	e9 5a       	subi	r30, 0xA9	; 169
    4d18:	ff 4f       	sbci	r31, 0xFF	; 255
    4d1a:	91 83       	std	Z+1, r25	; 0x01
    4d1c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d1e:	de 01       	movw	r26, r28
    4d20:	a7 5a       	subi	r26, 0xA7	; 167
    4d22:	bf 4f       	sbci	r27, 0xFF	; 255
    4d24:	fe 01       	movw	r30, r28
    4d26:	e7 5a       	subi	r30, 0xA7	; 167
    4d28:	ff 4f       	sbci	r31, 0xFF	; 255
    4d2a:	80 81       	ld	r24, Z
    4d2c:	91 81       	ldd	r25, Z+1	; 0x01
    4d2e:	01 97       	sbiw	r24, 0x01	; 1
    4d30:	11 96       	adiw	r26, 0x01	; 1
    4d32:	9c 93       	st	X, r25
    4d34:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d36:	fe 01       	movw	r30, r28
    4d38:	e7 5a       	subi	r30, 0xA7	; 167
    4d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    4d3c:	80 81       	ld	r24, Z
    4d3e:	91 81       	ldd	r25, Z+1	; 0x01
    4d40:	00 97       	sbiw	r24, 0x00	; 0
    4d42:	d1 f6       	brne	.-76     	; 0x4cf8 <User_Validation+0x170>
    4d44:	c0 c2       	rjmp	.+1408   	; 0x52c6 <User_Validation+0x73e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d46:	8e 01       	movw	r16, r28
    4d48:	07 5a       	subi	r16, 0xA7	; 167
    4d4a:	1f 4f       	sbci	r17, 0xFF	; 255
    4d4c:	fe 01       	movw	r30, r28
    4d4e:	e5 5a       	subi	r30, 0xA5	; 165
    4d50:	ff 4f       	sbci	r31, 0xFF	; 255
    4d52:	60 81       	ld	r22, Z
    4d54:	71 81       	ldd	r23, Z+1	; 0x01
    4d56:	82 81       	ldd	r24, Z+2	; 0x02
    4d58:	93 81       	ldd	r25, Z+3	; 0x03
    4d5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d5e:	dc 01       	movw	r26, r24
    4d60:	cb 01       	movw	r24, r22
    4d62:	f8 01       	movw	r30, r16
    4d64:	91 83       	std	Z+1, r25	; 0x01
    4d66:	80 83       	st	Z, r24
    4d68:	de 01       	movw	r26, r28
    4d6a:	ab 5a       	subi	r26, 0xAB	; 171
    4d6c:	bf 4f       	sbci	r27, 0xFF	; 255
    4d6e:	fe 01       	movw	r30, r28
    4d70:	e7 5a       	subi	r30, 0xA7	; 167
    4d72:	ff 4f       	sbci	r31, 0xFF	; 255
    4d74:	80 81       	ld	r24, Z
    4d76:	91 81       	ldd	r25, Z+1	; 0x01
    4d78:	11 96       	adiw	r26, 0x01	; 1
    4d7a:	9c 93       	st	X, r25
    4d7c:	8e 93       	st	-X, r24
    4d7e:	fe 01       	movw	r30, r28
    4d80:	eb 5a       	subi	r30, 0xAB	; 171
    4d82:	ff 4f       	sbci	r31, 0xFF	; 255
    4d84:	80 81       	ld	r24, Z
    4d86:	91 81       	ldd	r25, Z+1	; 0x01
    4d88:	01 97       	sbiw	r24, 0x01	; 1
    4d8a:	f1 f7       	brne	.-4      	; 0x4d88 <User_Validation+0x200>
    4d8c:	fe 01       	movw	r30, r28
    4d8e:	eb 5a       	subi	r30, 0xAB	; 171
    4d90:	ff 4f       	sbci	r31, 0xFF	; 255
    4d92:	91 83       	std	Z+1, r25	; 0x01
    4d94:	80 83       	st	Z, r24
    4d96:	97 c2       	rjmp	.+1326   	; 0x52c6 <User_Validation+0x73e>
		_delay_ms(1000);
			/* WHILE LOOP FOR MAXIMUM TRIAL */
		while(Maximum_Trial<3)
		{
			LCD_CLR();
    4d98:	0e 94 2b 13 	call	0x2656	; 0x2656 <LCD_CLR>
			 Bluetooth_SendString("\n--------------------\n");
    4d9c:	80 e6       	ldi	r24, 0x60	; 96
    4d9e:	90 e0       	ldi	r25, 0x00	; 0
    4da0:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
			 Bluetooth_SendString("Enter Your Password");
    4da4:	8c e6       	ldi	r24, 0x6C	; 108
    4da6:	92 e0       	ldi	r25, 0x02	; 2
    4da8:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
			LCD_WriteString("Enter Your Pass");
    4dac:	8d e1       	ldi	r24, 0x1D	; 29
    4dae:	91 e0       	ldi	r25, 0x01	; 1
    4db0:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LCD_WriteString>
			LCD_goto(5,1);//to wrtie in the center
    4db4:	85 e0       	ldi	r24, 0x05	; 5
    4db6:	61 e0       	ldi	r22, 0x01	; 1
    4db8:	0e 94 13 13 	call	0x2626	; 0x2626 <LCD_goto>
    4dbc:	3a c0       	rjmp	.+116    	; 0x4e32 <User_Validation+0x2aa>
			while(Counter<=3)
				 {
					Local_input = UART_u8Receiver();
    4dbe:	0e 94 a3 1a 	call	0x3546	; 0x3546 <UART_u8Receiver>
    4dc2:	fe 01       	movw	r30, r28
    4dc4:	e2 59       	subi	r30, 0x92	; 146
    4dc6:	ff 4f       	sbci	r31, 0xFF	; 255
    4dc8:	80 83       	st	Z, r24
					ASCII_Conversion(&Local_input);
    4dca:	ce 01       	movw	r24, r28
    4dcc:	82 59       	subi	r24, 0x92	; 146
    4dce:	9f 4f       	sbci	r25, 0xFF	; 255
    4dd0:	0e 94 b7 1c 	call	0x396e	; 0x396e <ASCII_Conversion>
					User_Pass_Input[Counter]=Local_input;
    4dd4:	fe 01       	movw	r30, r28
    4dd6:	e8 59       	subi	r30, 0x98	; 152
    4dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    4dda:	80 81       	ld	r24, Z
    4ddc:	28 2f       	mov	r18, r24
    4dde:	30 e0       	ldi	r19, 0x00	; 0
    4de0:	fe 01       	movw	r30, r28
    4de2:	e2 59       	subi	r30, 0x92	; 146
    4de4:	ff 4f       	sbci	r31, 0xFF	; 255
    4de6:	40 81       	ld	r20, Z
    4de8:	ce 01       	movw	r24, r28
    4dea:	86 59       	subi	r24, 0x96	; 150
    4dec:	9f 4f       	sbci	r25, 0xFF	; 255
    4dee:	fc 01       	movw	r30, r24
    4df0:	e2 0f       	add	r30, r18
    4df2:	f3 1f       	adc	r31, r19
    4df4:	40 83       	st	Z, r20
					LCD_PrintNum(User_Pass_Input[Counter]);
    4df6:	fe 01       	movw	r30, r28
    4df8:	e8 59       	subi	r30, 0x98	; 152
    4dfa:	ff 4f       	sbci	r31, 0xFF	; 255
    4dfc:	80 81       	ld	r24, Z
    4dfe:	28 2f       	mov	r18, r24
    4e00:	30 e0       	ldi	r19, 0x00	; 0
    4e02:	ce 01       	movw	r24, r28
    4e04:	86 59       	subi	r24, 0x96	; 150
    4e06:	9f 4f       	sbci	r25, 0xFF	; 255
    4e08:	fc 01       	movw	r30, r24
    4e0a:	e2 0f       	add	r30, r18
    4e0c:	f3 1f       	adc	r31, r19
    4e0e:	80 81       	ld	r24, Z
    4e10:	88 2f       	mov	r24, r24
    4e12:	90 e0       	ldi	r25, 0x00	; 0
    4e14:	a0 e0       	ldi	r26, 0x00	; 0
    4e16:	b0 e0       	ldi	r27, 0x00	; 0
    4e18:	bc 01       	movw	r22, r24
    4e1a:	cd 01       	movw	r24, r26
    4e1c:	0e 94 49 13 	call	0x2692	; 0x2692 <LCD_PrintNum>
					Counter++;
    4e20:	de 01       	movw	r26, r28
    4e22:	a8 59       	subi	r26, 0x98	; 152
    4e24:	bf 4f       	sbci	r27, 0xFF	; 255
    4e26:	fe 01       	movw	r30, r28
    4e28:	e8 59       	subi	r30, 0x98	; 152
    4e2a:	ff 4f       	sbci	r31, 0xFF	; 255
    4e2c:	80 81       	ld	r24, Z
    4e2e:	8f 5f       	subi	r24, 0xFF	; 255
    4e30:	8c 93       	st	X, r24
			LCD_CLR();
			 Bluetooth_SendString("\n--------------------\n");
			 Bluetooth_SendString("Enter Your Password");
			LCD_WriteString("Enter Your Pass");
			LCD_goto(5,1);//to wrtie in the center
			while(Counter<=3)
    4e32:	fe 01       	movw	r30, r28
    4e34:	e8 59       	subi	r30, 0x98	; 152
    4e36:	ff 4f       	sbci	r31, 0xFF	; 255
    4e38:	80 81       	ld	r24, Z
    4e3a:	84 30       	cpi	r24, 0x04	; 4
    4e3c:	08 f4       	brcc	.+2      	; 0x4e40 <User_Validation+0x2b8>
    4e3e:	bf cf       	rjmp	.-130    	; 0x4dbe <User_Validation+0x236>
    4e40:	fe 01       	movw	r30, r28
    4e42:	ef 5a       	subi	r30, 0xAF	; 175
    4e44:	ff 4f       	sbci	r31, 0xFF	; 255
    4e46:	80 e0       	ldi	r24, 0x00	; 0
    4e48:	90 e0       	ldi	r25, 0x00	; 0
    4e4a:	aa e7       	ldi	r26, 0x7A	; 122
    4e4c:	b4 e4       	ldi	r27, 0x44	; 68
    4e4e:	80 83       	st	Z, r24
    4e50:	91 83       	std	Z+1, r25	; 0x01
    4e52:	a2 83       	std	Z+2, r26	; 0x02
    4e54:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e56:	8e 01       	movw	r16, r28
    4e58:	03 5b       	subi	r16, 0xB3	; 179
    4e5a:	1f 4f       	sbci	r17, 0xFF	; 255
    4e5c:	fe 01       	movw	r30, r28
    4e5e:	ef 5a       	subi	r30, 0xAF	; 175
    4e60:	ff 4f       	sbci	r31, 0xFF	; 255
    4e62:	60 81       	ld	r22, Z
    4e64:	71 81       	ldd	r23, Z+1	; 0x01
    4e66:	82 81       	ldd	r24, Z+2	; 0x02
    4e68:	93 81       	ldd	r25, Z+3	; 0x03
    4e6a:	20 e0       	ldi	r18, 0x00	; 0
    4e6c:	30 e0       	ldi	r19, 0x00	; 0
    4e6e:	4a ef       	ldi	r20, 0xFA	; 250
    4e70:	54 e4       	ldi	r21, 0x44	; 68
    4e72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e76:	dc 01       	movw	r26, r24
    4e78:	cb 01       	movw	r24, r22
    4e7a:	f8 01       	movw	r30, r16
    4e7c:	80 83       	st	Z, r24
    4e7e:	91 83       	std	Z+1, r25	; 0x01
    4e80:	a2 83       	std	Z+2, r26	; 0x02
    4e82:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4e84:	fe 01       	movw	r30, r28
    4e86:	e3 5b       	subi	r30, 0xB3	; 179
    4e88:	ff 4f       	sbci	r31, 0xFF	; 255
    4e8a:	60 81       	ld	r22, Z
    4e8c:	71 81       	ldd	r23, Z+1	; 0x01
    4e8e:	82 81       	ldd	r24, Z+2	; 0x02
    4e90:	93 81       	ldd	r25, Z+3	; 0x03
    4e92:	20 e0       	ldi	r18, 0x00	; 0
    4e94:	30 e0       	ldi	r19, 0x00	; 0
    4e96:	40 e8       	ldi	r20, 0x80	; 128
    4e98:	5f e3       	ldi	r21, 0x3F	; 63
    4e9a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4e9e:	88 23       	and	r24, r24
    4ea0:	44 f4       	brge	.+16     	; 0x4eb2 <User_Validation+0x32a>
		__ticks = 1;
    4ea2:	fe 01       	movw	r30, r28
    4ea4:	e5 5b       	subi	r30, 0xB5	; 181
    4ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ea8:	81 e0       	ldi	r24, 0x01	; 1
    4eaa:	90 e0       	ldi	r25, 0x00	; 0
    4eac:	91 83       	std	Z+1, r25	; 0x01
    4eae:	80 83       	st	Z, r24
    4eb0:	64 c0       	rjmp	.+200    	; 0x4f7a <User_Validation+0x3f2>
	else if (__tmp > 65535)
    4eb2:	fe 01       	movw	r30, r28
    4eb4:	e3 5b       	subi	r30, 0xB3	; 179
    4eb6:	ff 4f       	sbci	r31, 0xFF	; 255
    4eb8:	60 81       	ld	r22, Z
    4eba:	71 81       	ldd	r23, Z+1	; 0x01
    4ebc:	82 81       	ldd	r24, Z+2	; 0x02
    4ebe:	93 81       	ldd	r25, Z+3	; 0x03
    4ec0:	20 e0       	ldi	r18, 0x00	; 0
    4ec2:	3f ef       	ldi	r19, 0xFF	; 255
    4ec4:	4f e7       	ldi	r20, 0x7F	; 127
    4ec6:	57 e4       	ldi	r21, 0x47	; 71
    4ec8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4ecc:	18 16       	cp	r1, r24
    4ece:	0c f0       	brlt	.+2      	; 0x4ed2 <User_Validation+0x34a>
    4ed0:	43 c0       	rjmp	.+134    	; 0x4f58 <User_Validation+0x3d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ed2:	fe 01       	movw	r30, r28
    4ed4:	ef 5a       	subi	r30, 0xAF	; 175
    4ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ed8:	60 81       	ld	r22, Z
    4eda:	71 81       	ldd	r23, Z+1	; 0x01
    4edc:	82 81       	ldd	r24, Z+2	; 0x02
    4ede:	93 81       	ldd	r25, Z+3	; 0x03
    4ee0:	20 e0       	ldi	r18, 0x00	; 0
    4ee2:	30 e0       	ldi	r19, 0x00	; 0
    4ee4:	40 e2       	ldi	r20, 0x20	; 32
    4ee6:	51 e4       	ldi	r21, 0x41	; 65
    4ee8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4eec:	dc 01       	movw	r26, r24
    4eee:	cb 01       	movw	r24, r22
    4ef0:	8e 01       	movw	r16, r28
    4ef2:	05 5b       	subi	r16, 0xB5	; 181
    4ef4:	1f 4f       	sbci	r17, 0xFF	; 255
    4ef6:	bc 01       	movw	r22, r24
    4ef8:	cd 01       	movw	r24, r26
    4efa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4efe:	dc 01       	movw	r26, r24
    4f00:	cb 01       	movw	r24, r22
    4f02:	f8 01       	movw	r30, r16
    4f04:	91 83       	std	Z+1, r25	; 0x01
    4f06:	80 83       	st	Z, r24
    4f08:	1f c0       	rjmp	.+62     	; 0x4f48 <User_Validation+0x3c0>
    4f0a:	fe 01       	movw	r30, r28
    4f0c:	e7 5b       	subi	r30, 0xB7	; 183
    4f0e:	ff 4f       	sbci	r31, 0xFF	; 255
    4f10:	88 ec       	ldi	r24, 0xC8	; 200
    4f12:	90 e0       	ldi	r25, 0x00	; 0
    4f14:	91 83       	std	Z+1, r25	; 0x01
    4f16:	80 83       	st	Z, r24
    4f18:	fe 01       	movw	r30, r28
    4f1a:	e7 5b       	subi	r30, 0xB7	; 183
    4f1c:	ff 4f       	sbci	r31, 0xFF	; 255
    4f1e:	80 81       	ld	r24, Z
    4f20:	91 81       	ldd	r25, Z+1	; 0x01
    4f22:	01 97       	sbiw	r24, 0x01	; 1
    4f24:	f1 f7       	brne	.-4      	; 0x4f22 <User_Validation+0x39a>
    4f26:	fe 01       	movw	r30, r28
    4f28:	e7 5b       	subi	r30, 0xB7	; 183
    4f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    4f2c:	91 83       	std	Z+1, r25	; 0x01
    4f2e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f30:	de 01       	movw	r26, r28
    4f32:	a5 5b       	subi	r26, 0xB5	; 181
    4f34:	bf 4f       	sbci	r27, 0xFF	; 255
    4f36:	fe 01       	movw	r30, r28
    4f38:	e5 5b       	subi	r30, 0xB5	; 181
    4f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    4f3c:	80 81       	ld	r24, Z
    4f3e:	91 81       	ldd	r25, Z+1	; 0x01
    4f40:	01 97       	sbiw	r24, 0x01	; 1
    4f42:	11 96       	adiw	r26, 0x01	; 1
    4f44:	9c 93       	st	X, r25
    4f46:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f48:	fe 01       	movw	r30, r28
    4f4a:	e5 5b       	subi	r30, 0xB5	; 181
    4f4c:	ff 4f       	sbci	r31, 0xFF	; 255
    4f4e:	80 81       	ld	r24, Z
    4f50:	91 81       	ldd	r25, Z+1	; 0x01
    4f52:	00 97       	sbiw	r24, 0x00	; 0
    4f54:	d1 f6       	brne	.-76     	; 0x4f0a <User_Validation+0x382>
    4f56:	28 c0       	rjmp	.+80     	; 0x4fa8 <User_Validation+0x420>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f58:	8e 01       	movw	r16, r28
    4f5a:	05 5b       	subi	r16, 0xB5	; 181
    4f5c:	1f 4f       	sbci	r17, 0xFF	; 255
    4f5e:	fe 01       	movw	r30, r28
    4f60:	e3 5b       	subi	r30, 0xB3	; 179
    4f62:	ff 4f       	sbci	r31, 0xFF	; 255
    4f64:	60 81       	ld	r22, Z
    4f66:	71 81       	ldd	r23, Z+1	; 0x01
    4f68:	82 81       	ldd	r24, Z+2	; 0x02
    4f6a:	93 81       	ldd	r25, Z+3	; 0x03
    4f6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f70:	dc 01       	movw	r26, r24
    4f72:	cb 01       	movw	r24, r22
    4f74:	f8 01       	movw	r30, r16
    4f76:	91 83       	std	Z+1, r25	; 0x01
    4f78:	80 83       	st	Z, r24
    4f7a:	de 01       	movw	r26, r28
    4f7c:	a9 5b       	subi	r26, 0xB9	; 185
    4f7e:	bf 4f       	sbci	r27, 0xFF	; 255
    4f80:	fe 01       	movw	r30, r28
    4f82:	e5 5b       	subi	r30, 0xB5	; 181
    4f84:	ff 4f       	sbci	r31, 0xFF	; 255
    4f86:	80 81       	ld	r24, Z
    4f88:	91 81       	ldd	r25, Z+1	; 0x01
    4f8a:	11 96       	adiw	r26, 0x01	; 1
    4f8c:	9c 93       	st	X, r25
    4f8e:	8e 93       	st	-X, r24
    4f90:	fe 01       	movw	r30, r28
    4f92:	e9 5b       	subi	r30, 0xB9	; 185
    4f94:	ff 4f       	sbci	r31, 0xFF	; 255
    4f96:	80 81       	ld	r24, Z
    4f98:	91 81       	ldd	r25, Z+1	; 0x01
    4f9a:	01 97       	sbiw	r24, 0x01	; 1
    4f9c:	f1 f7       	brne	.-4      	; 0x4f9a <User_Validation+0x412>
    4f9e:	fe 01       	movw	r30, r28
    4fa0:	e9 5b       	subi	r30, 0xB9	; 185
    4fa2:	ff 4f       	sbci	r31, 0xFF	; 255
    4fa4:	91 83       	std	Z+1, r25	; 0x01
    4fa6:	80 83       	st	Z, r24
					User_Pass_Input[Counter]=Local_input;
					LCD_PrintNum(User_Pass_Input[Counter]);
					Counter++;
				 }
			_delay_ms(1000);
			for(i=0;i<4;i++)
    4fa8:	fe 01       	movw	r30, r28
    4faa:	e9 59       	subi	r30, 0x99	; 153
    4fac:	ff 4f       	sbci	r31, 0xFF	; 255
    4fae:	10 82       	st	Z, r1
    4fb0:	be c0       	rjmp	.+380    	; 0x512e <User_Validation+0x5a6>
				{
					Local_EEPROM_Reader = eeprom_read_byte(User_Pass_Location_Reader+i);
    4fb2:	fe 01       	movw	r30, r28
    4fb4:	e7 59       	subi	r30, 0x97	; 151
    4fb6:	ff 4f       	sbci	r31, 0xFF	; 255
    4fb8:	80 81       	ld	r24, Z
    4fba:	28 2f       	mov	r18, r24
    4fbc:	30 e0       	ldi	r19, 0x00	; 0
    4fbe:	fe 01       	movw	r30, r28
    4fc0:	e9 59       	subi	r30, 0x99	; 153
    4fc2:	ff 4f       	sbci	r31, 0xFF	; 255
    4fc4:	80 81       	ld	r24, Z
    4fc6:	88 2f       	mov	r24, r24
    4fc8:	90 e0       	ldi	r25, 0x00	; 0
    4fca:	82 0f       	add	r24, r18
    4fcc:	93 1f       	adc	r25, r19
    4fce:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <eeprom_read_byte>
    4fd2:	fe 01       	movw	r30, r28
    4fd4:	ed 59       	subi	r30, 0x9D	; 157
    4fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    4fd8:	80 83       	st	Z, r24
    4fda:	fe 01       	movw	r30, r28
    4fdc:	ed 5b       	subi	r30, 0xBD	; 189
    4fde:	ff 4f       	sbci	r31, 0xFF	; 255
    4fe0:	80 e0       	ldi	r24, 0x00	; 0
    4fe2:	90 e0       	ldi	r25, 0x00	; 0
    4fe4:	a8 e4       	ldi	r26, 0x48	; 72
    4fe6:	b2 e4       	ldi	r27, 0x42	; 66
    4fe8:	80 83       	st	Z, r24
    4fea:	91 83       	std	Z+1, r25	; 0x01
    4fec:	a2 83       	std	Z+2, r26	; 0x02
    4fee:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ff0:	8e 01       	movw	r16, r28
    4ff2:	01 5c       	subi	r16, 0xC1	; 193
    4ff4:	1f 4f       	sbci	r17, 0xFF	; 255
    4ff6:	fe 01       	movw	r30, r28
    4ff8:	ed 5b       	subi	r30, 0xBD	; 189
    4ffa:	ff 4f       	sbci	r31, 0xFF	; 255
    4ffc:	60 81       	ld	r22, Z
    4ffe:	71 81       	ldd	r23, Z+1	; 0x01
    5000:	82 81       	ldd	r24, Z+2	; 0x02
    5002:	93 81       	ldd	r25, Z+3	; 0x03
    5004:	20 e0       	ldi	r18, 0x00	; 0
    5006:	30 e0       	ldi	r19, 0x00	; 0
    5008:	4a ef       	ldi	r20, 0xFA	; 250
    500a:	54 e4       	ldi	r21, 0x44	; 68
    500c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5010:	dc 01       	movw	r26, r24
    5012:	cb 01       	movw	r24, r22
    5014:	f8 01       	movw	r30, r16
    5016:	80 83       	st	Z, r24
    5018:	91 83       	std	Z+1, r25	; 0x01
    501a:	a2 83       	std	Z+2, r26	; 0x02
    501c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    501e:	fe 01       	movw	r30, r28
    5020:	ff 96       	adiw	r30, 0x3f	; 63
    5022:	60 81       	ld	r22, Z
    5024:	71 81       	ldd	r23, Z+1	; 0x01
    5026:	82 81       	ldd	r24, Z+2	; 0x02
    5028:	93 81       	ldd	r25, Z+3	; 0x03
    502a:	20 e0       	ldi	r18, 0x00	; 0
    502c:	30 e0       	ldi	r19, 0x00	; 0
    502e:	40 e8       	ldi	r20, 0x80	; 128
    5030:	5f e3       	ldi	r21, 0x3F	; 63
    5032:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5036:	88 23       	and	r24, r24
    5038:	2c f4       	brge	.+10     	; 0x5044 <User_Validation+0x4bc>
		__ticks = 1;
    503a:	81 e0       	ldi	r24, 0x01	; 1
    503c:	90 e0       	ldi	r25, 0x00	; 0
    503e:	9e af       	std	Y+62, r25	; 0x3e
    5040:	8d af       	std	Y+61, r24	; 0x3d
    5042:	46 c0       	rjmp	.+140    	; 0x50d0 <User_Validation+0x548>
	else if (__tmp > 65535)
    5044:	fe 01       	movw	r30, r28
    5046:	ff 96       	adiw	r30, 0x3f	; 63
    5048:	60 81       	ld	r22, Z
    504a:	71 81       	ldd	r23, Z+1	; 0x01
    504c:	82 81       	ldd	r24, Z+2	; 0x02
    504e:	93 81       	ldd	r25, Z+3	; 0x03
    5050:	20 e0       	ldi	r18, 0x00	; 0
    5052:	3f ef       	ldi	r19, 0xFF	; 255
    5054:	4f e7       	ldi	r20, 0x7F	; 127
    5056:	57 e4       	ldi	r21, 0x47	; 71
    5058:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    505c:	18 16       	cp	r1, r24
    505e:	64 f5       	brge	.+88     	; 0x50b8 <User_Validation+0x530>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5060:	fe 01       	movw	r30, r28
    5062:	ed 5b       	subi	r30, 0xBD	; 189
    5064:	ff 4f       	sbci	r31, 0xFF	; 255
    5066:	60 81       	ld	r22, Z
    5068:	71 81       	ldd	r23, Z+1	; 0x01
    506a:	82 81       	ldd	r24, Z+2	; 0x02
    506c:	93 81       	ldd	r25, Z+3	; 0x03
    506e:	20 e0       	ldi	r18, 0x00	; 0
    5070:	30 e0       	ldi	r19, 0x00	; 0
    5072:	40 e2       	ldi	r20, 0x20	; 32
    5074:	51 e4       	ldi	r21, 0x41	; 65
    5076:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    507a:	dc 01       	movw	r26, r24
    507c:	cb 01       	movw	r24, r22
    507e:	bc 01       	movw	r22, r24
    5080:	cd 01       	movw	r24, r26
    5082:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5086:	dc 01       	movw	r26, r24
    5088:	cb 01       	movw	r24, r22
    508a:	9e af       	std	Y+62, r25	; 0x3e
    508c:	8d af       	std	Y+61, r24	; 0x3d
    508e:	0f c0       	rjmp	.+30     	; 0x50ae <User_Validation+0x526>
    5090:	88 ec       	ldi	r24, 0xC8	; 200
    5092:	90 e0       	ldi	r25, 0x00	; 0
    5094:	9c af       	std	Y+60, r25	; 0x3c
    5096:	8b af       	std	Y+59, r24	; 0x3b
    5098:	8b ad       	ldd	r24, Y+59	; 0x3b
    509a:	9c ad       	ldd	r25, Y+60	; 0x3c
    509c:	01 97       	sbiw	r24, 0x01	; 1
    509e:	f1 f7       	brne	.-4      	; 0x509c <User_Validation+0x514>
    50a0:	9c af       	std	Y+60, r25	; 0x3c
    50a2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    50a4:	8d ad       	ldd	r24, Y+61	; 0x3d
    50a6:	9e ad       	ldd	r25, Y+62	; 0x3e
    50a8:	01 97       	sbiw	r24, 0x01	; 1
    50aa:	9e af       	std	Y+62, r25	; 0x3e
    50ac:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    50ae:	8d ad       	ldd	r24, Y+61	; 0x3d
    50b0:	9e ad       	ldd	r25, Y+62	; 0x3e
    50b2:	00 97       	sbiw	r24, 0x00	; 0
    50b4:	69 f7       	brne	.-38     	; 0x5090 <User_Validation+0x508>
    50b6:	16 c0       	rjmp	.+44     	; 0x50e4 <User_Validation+0x55c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    50b8:	fe 01       	movw	r30, r28
    50ba:	ff 96       	adiw	r30, 0x3f	; 63
    50bc:	60 81       	ld	r22, Z
    50be:	71 81       	ldd	r23, Z+1	; 0x01
    50c0:	82 81       	ldd	r24, Z+2	; 0x02
    50c2:	93 81       	ldd	r25, Z+3	; 0x03
    50c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50c8:	dc 01       	movw	r26, r24
    50ca:	cb 01       	movw	r24, r22
    50cc:	9e af       	std	Y+62, r25	; 0x3e
    50ce:	8d af       	std	Y+61, r24	; 0x3d
    50d0:	8d ad       	ldd	r24, Y+61	; 0x3d
    50d2:	9e ad       	ldd	r25, Y+62	; 0x3e
    50d4:	9a af       	std	Y+58, r25	; 0x3a
    50d6:	89 af       	std	Y+57, r24	; 0x39
    50d8:	89 ad       	ldd	r24, Y+57	; 0x39
    50da:	9a ad       	ldd	r25, Y+58	; 0x3a
    50dc:	01 97       	sbiw	r24, 0x01	; 1
    50de:	f1 f7       	brne	.-4      	; 0x50dc <User_Validation+0x554>
    50e0:	9a af       	std	Y+58, r25	; 0x3a
    50e2:	89 af       	std	Y+57, r24	; 0x39
					_delay_ms(50);
					if (User_Pass_Input[i]==Local_EEPROM_Reader)
    50e4:	fe 01       	movw	r30, r28
    50e6:	e9 59       	subi	r30, 0x99	; 153
    50e8:	ff 4f       	sbci	r31, 0xFF	; 255
    50ea:	80 81       	ld	r24, Z
    50ec:	28 2f       	mov	r18, r24
    50ee:	30 e0       	ldi	r19, 0x00	; 0
    50f0:	ce 01       	movw	r24, r28
    50f2:	86 59       	subi	r24, 0x96	; 150
    50f4:	9f 4f       	sbci	r25, 0xFF	; 255
    50f6:	fc 01       	movw	r30, r24
    50f8:	e2 0f       	add	r30, r18
    50fa:	f3 1f       	adc	r31, r19
    50fc:	90 81       	ld	r25, Z
    50fe:	fe 01       	movw	r30, r28
    5100:	ed 59       	subi	r30, 0x9D	; 157
    5102:	ff 4f       	sbci	r31, 0xFF	; 255
    5104:	80 81       	ld	r24, Z
    5106:	98 17       	cp	r25, r24
    5108:	49 f4       	brne	.+18     	; 0x511c <User_Validation+0x594>
					{
						Correct_Pass_Counter++;//=4 means you entered a correct password
    510a:	de 01       	movw	r26, r28
    510c:	aa 59       	subi	r26, 0x9A	; 154
    510e:	bf 4f       	sbci	r27, 0xFF	; 255
    5110:	fe 01       	movw	r30, r28
    5112:	ea 59       	subi	r30, 0x9A	; 154
    5114:	ff 4f       	sbci	r31, 0xFF	; 255
    5116:	80 81       	ld	r24, Z
    5118:	8f 5f       	subi	r24, 0xFF	; 255
    511a:	8c 93       	st	X, r24
					User_Pass_Input[Counter]=Local_input;
					LCD_PrintNum(User_Pass_Input[Counter]);
					Counter++;
				 }
			_delay_ms(1000);
			for(i=0;i<4;i++)
    511c:	de 01       	movw	r26, r28
    511e:	a9 59       	subi	r26, 0x99	; 153
    5120:	bf 4f       	sbci	r27, 0xFF	; 255
    5122:	fe 01       	movw	r30, r28
    5124:	e9 59       	subi	r30, 0x99	; 153
    5126:	ff 4f       	sbci	r31, 0xFF	; 255
    5128:	80 81       	ld	r24, Z
    512a:	8f 5f       	subi	r24, 0xFF	; 255
    512c:	8c 93       	st	X, r24
    512e:	fe 01       	movw	r30, r28
    5130:	e9 59       	subi	r30, 0x99	; 153
    5132:	ff 4f       	sbci	r31, 0xFF	; 255
    5134:	80 81       	ld	r24, Z
    5136:	84 30       	cpi	r24, 0x04	; 4
    5138:	08 f4       	brcc	.+2      	; 0x513c <User_Validation+0x5b4>
    513a:	3b cf       	rjmp	.-394    	; 0x4fb2 <User_Validation+0x42a>
					if (User_Pass_Input[i]==Local_EEPROM_Reader)
					{
						Correct_Pass_Counter++;//=4 means you entered a correct password
					}
				}
			if(Correct_Pass_Counter==4)
    513c:	fe 01       	movw	r30, r28
    513e:	ea 59       	subi	r30, 0x9A	; 154
    5140:	ff 4f       	sbci	r31, 0xFF	; 255
    5142:	80 81       	ld	r24, Z
    5144:	84 30       	cpi	r24, 0x04	; 4
    5146:	31 f4       	brne	.+12     	; 0x5154 <User_Validation+0x5cc>
			{
				Login_Success=1;
    5148:	fe 01       	movw	r30, r28
    514a:	eb 59       	subi	r30, 0x9B	; 155
    514c:	ff 4f       	sbci	r31, 0xFF	; 255
    514e:	81 e0       	ldi	r24, 0x01	; 1
    5150:	80 83       	st	Z, r24
    5152:	c0 c0       	rjmp	.+384    	; 0x52d4 <User_Validation+0x74c>
				break;
			}
			else
			{
				Login_Success=0;
    5154:	fe 01       	movw	r30, r28
    5156:	eb 59       	subi	r30, 0x9B	; 155
    5158:	ff 4f       	sbci	r31, 0xFF	; 255
    515a:	10 82       	st	Z, r1
				Correct_Pass_Counter=0;
    515c:	fe 01       	movw	r30, r28
    515e:	ea 59       	subi	r30, 0x9A	; 154
    5160:	ff 4f       	sbci	r31, 0xFF	; 255
    5162:	10 82       	st	Z, r1
				Counter=0;
    5164:	fe 01       	movw	r30, r28
    5166:	e8 59       	subi	r30, 0x98	; 152
    5168:	ff 4f       	sbci	r31, 0xFF	; 255
    516a:	10 82       	st	Z, r1
				Maximum_Trial++;
    516c:	de 01       	movw	r26, r28
    516e:	ac 59       	subi	r26, 0x9C	; 156
    5170:	bf 4f       	sbci	r27, 0xFF	; 255
    5172:	fe 01       	movw	r30, r28
    5174:	ec 59       	subi	r30, 0x9C	; 156
    5176:	ff 4f       	sbci	r31, 0xFF	; 255
    5178:	80 81       	ld	r24, Z
    517a:	8f 5f       	subi	r24, 0xFF	; 255
    517c:	8c 93       	st	X, r24
				LCD_CLR();
    517e:	0e 94 2b 13 	call	0x2656	; 0x2656 <LCD_CLR>
				 Bluetooth_SendString("\n--------------------\n");
    5182:	80 e6       	ldi	r24, 0x60	; 96
    5184:	90 e0       	ldi	r25, 0x00	; 0
    5186:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
				 Bluetooth_SendString("Wrong Pass");
    518a:	82 e1       	ldi	r24, 0x12	; 18
    518c:	91 e0       	ldi	r25, 0x01	; 1
    518e:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
				LCD_WriteString("Wrong Pass");
    5192:	82 e1       	ldi	r24, 0x12	; 18
    5194:	91 e0       	ldi	r25, 0x01	; 1
    5196:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LCD_WriteString>
				LCD_goto(5,1);
    519a:	85 e0       	ldi	r24, 0x05	; 5
    519c:	61 e0       	ldi	r22, 0x01	; 1
    519e:	0e 94 13 13 	call	0x2626	; 0x2626 <LCD_goto>
				LCD_PrintNum(Maximum_Trial);
    51a2:	fe 01       	movw	r30, r28
    51a4:	ec 59       	subi	r30, 0x9C	; 156
    51a6:	ff 4f       	sbci	r31, 0xFF	; 255
    51a8:	80 81       	ld	r24, Z
    51aa:	88 2f       	mov	r24, r24
    51ac:	90 e0       	ldi	r25, 0x00	; 0
    51ae:	a0 e0       	ldi	r26, 0x00	; 0
    51b0:	b0 e0       	ldi	r27, 0x00	; 0
    51b2:	bc 01       	movw	r22, r24
    51b4:	cd 01       	movw	r24, r26
    51b6:	0e 94 49 13 	call	0x2692	; 0x2692 <LCD_PrintNum>
				 Bluetooth_SendString("\n--------------------\n");
    51ba:	80 e6       	ldi	r24, 0x60	; 96
    51bc:	90 e0       	ldi	r25, 0x00	; 0
    51be:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
				Bluetooth_SendNumber(Maximum_Trial);
    51c2:	fe 01       	movw	r30, r28
    51c4:	ec 59       	subi	r30, 0x9C	; 156
    51c6:	ff 4f       	sbci	r31, 0xFF	; 255
    51c8:	80 81       	ld	r24, Z
    51ca:	88 2f       	mov	r24, r24
    51cc:	90 e0       	ldi	r25, 0x00	; 0
    51ce:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <Bluetooth_SendNumber>
				 Bluetooth_SendString("/3");
    51d2:	80 e8       	ldi	r24, 0x80	; 128
    51d4:	92 e0       	ldi	r25, 0x02	; 2
    51d6:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
				LCD_WriteString("/3");
    51da:	80 e8       	ldi	r24, 0x80	; 128
    51dc:	92 e0       	ldi	r25, 0x02	; 2
    51de:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LCD_WriteString>
    51e2:	80 e0       	ldi	r24, 0x00	; 0
    51e4:	90 e0       	ldi	r25, 0x00	; 0
    51e6:	aa e7       	ldi	r26, 0x7A	; 122
    51e8:	b4 e4       	ldi	r27, 0x44	; 68
    51ea:	8d ab       	std	Y+53, r24	; 0x35
    51ec:	9e ab       	std	Y+54, r25	; 0x36
    51ee:	af ab       	std	Y+55, r26	; 0x37
    51f0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    51f2:	6d a9       	ldd	r22, Y+53	; 0x35
    51f4:	7e a9       	ldd	r23, Y+54	; 0x36
    51f6:	8f a9       	ldd	r24, Y+55	; 0x37
    51f8:	98 ad       	ldd	r25, Y+56	; 0x38
    51fa:	20 e0       	ldi	r18, 0x00	; 0
    51fc:	30 e0       	ldi	r19, 0x00	; 0
    51fe:	4a ef       	ldi	r20, 0xFA	; 250
    5200:	54 e4       	ldi	r21, 0x44	; 68
    5202:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5206:	dc 01       	movw	r26, r24
    5208:	cb 01       	movw	r24, r22
    520a:	89 ab       	std	Y+49, r24	; 0x31
    520c:	9a ab       	std	Y+50, r25	; 0x32
    520e:	ab ab       	std	Y+51, r26	; 0x33
    5210:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5212:	69 a9       	ldd	r22, Y+49	; 0x31
    5214:	7a a9       	ldd	r23, Y+50	; 0x32
    5216:	8b a9       	ldd	r24, Y+51	; 0x33
    5218:	9c a9       	ldd	r25, Y+52	; 0x34
    521a:	20 e0       	ldi	r18, 0x00	; 0
    521c:	30 e0       	ldi	r19, 0x00	; 0
    521e:	40 e8       	ldi	r20, 0x80	; 128
    5220:	5f e3       	ldi	r21, 0x3F	; 63
    5222:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5226:	88 23       	and	r24, r24
    5228:	2c f4       	brge	.+10     	; 0x5234 <User_Validation+0x6ac>
		__ticks = 1;
    522a:	81 e0       	ldi	r24, 0x01	; 1
    522c:	90 e0       	ldi	r25, 0x00	; 0
    522e:	98 ab       	std	Y+48, r25	; 0x30
    5230:	8f a7       	std	Y+47, r24	; 0x2f
    5232:	3f c0       	rjmp	.+126    	; 0x52b2 <User_Validation+0x72a>
	else if (__tmp > 65535)
    5234:	69 a9       	ldd	r22, Y+49	; 0x31
    5236:	7a a9       	ldd	r23, Y+50	; 0x32
    5238:	8b a9       	ldd	r24, Y+51	; 0x33
    523a:	9c a9       	ldd	r25, Y+52	; 0x34
    523c:	20 e0       	ldi	r18, 0x00	; 0
    523e:	3f ef       	ldi	r19, 0xFF	; 255
    5240:	4f e7       	ldi	r20, 0x7F	; 127
    5242:	57 e4       	ldi	r21, 0x47	; 71
    5244:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5248:	18 16       	cp	r1, r24
    524a:	4c f5       	brge	.+82     	; 0x529e <User_Validation+0x716>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    524c:	6d a9       	ldd	r22, Y+53	; 0x35
    524e:	7e a9       	ldd	r23, Y+54	; 0x36
    5250:	8f a9       	ldd	r24, Y+55	; 0x37
    5252:	98 ad       	ldd	r25, Y+56	; 0x38
    5254:	20 e0       	ldi	r18, 0x00	; 0
    5256:	30 e0       	ldi	r19, 0x00	; 0
    5258:	40 e2       	ldi	r20, 0x20	; 32
    525a:	51 e4       	ldi	r21, 0x41	; 65
    525c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5260:	dc 01       	movw	r26, r24
    5262:	cb 01       	movw	r24, r22
    5264:	bc 01       	movw	r22, r24
    5266:	cd 01       	movw	r24, r26
    5268:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    526c:	dc 01       	movw	r26, r24
    526e:	cb 01       	movw	r24, r22
    5270:	98 ab       	std	Y+48, r25	; 0x30
    5272:	8f a7       	std	Y+47, r24	; 0x2f
    5274:	0f c0       	rjmp	.+30     	; 0x5294 <User_Validation+0x70c>
    5276:	88 ec       	ldi	r24, 0xC8	; 200
    5278:	90 e0       	ldi	r25, 0x00	; 0
    527a:	9e a7       	std	Y+46, r25	; 0x2e
    527c:	8d a7       	std	Y+45, r24	; 0x2d
    527e:	8d a5       	ldd	r24, Y+45	; 0x2d
    5280:	9e a5       	ldd	r25, Y+46	; 0x2e
    5282:	01 97       	sbiw	r24, 0x01	; 1
    5284:	f1 f7       	brne	.-4      	; 0x5282 <User_Validation+0x6fa>
    5286:	9e a7       	std	Y+46, r25	; 0x2e
    5288:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    528a:	8f a5       	ldd	r24, Y+47	; 0x2f
    528c:	98 a9       	ldd	r25, Y+48	; 0x30
    528e:	01 97       	sbiw	r24, 0x01	; 1
    5290:	98 ab       	std	Y+48, r25	; 0x30
    5292:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5294:	8f a5       	ldd	r24, Y+47	; 0x2f
    5296:	98 a9       	ldd	r25, Y+48	; 0x30
    5298:	00 97       	sbiw	r24, 0x00	; 0
    529a:	69 f7       	brne	.-38     	; 0x5276 <User_Validation+0x6ee>
    529c:	14 c0       	rjmp	.+40     	; 0x52c6 <User_Validation+0x73e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    529e:	69 a9       	ldd	r22, Y+49	; 0x31
    52a0:	7a a9       	ldd	r23, Y+50	; 0x32
    52a2:	8b a9       	ldd	r24, Y+51	; 0x33
    52a4:	9c a9       	ldd	r25, Y+52	; 0x34
    52a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52aa:	dc 01       	movw	r26, r24
    52ac:	cb 01       	movw	r24, r22
    52ae:	98 ab       	std	Y+48, r25	; 0x30
    52b0:	8f a7       	std	Y+47, r24	; 0x2f
    52b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    52b4:	98 a9       	ldd	r25, Y+48	; 0x30
    52b6:	9c a7       	std	Y+44, r25	; 0x2c
    52b8:	8b a7       	std	Y+43, r24	; 0x2b
    52ba:	8b a5       	ldd	r24, Y+43	; 0x2b
    52bc:	9c a5       	ldd	r25, Y+44	; 0x2c
    52be:	01 97       	sbiw	r24, 0x01	; 1
    52c0:	f1 f7       	brne	.-4      	; 0x52be <User_Validation+0x736>
    52c2:	9c a7       	std	Y+44, r25	; 0x2c
    52c4:	8b a7       	std	Y+43, r24	; 0x2b
		 Bluetooth_SendString("\n--------------------\n");
		 Bluetooth_SendString("User Found");
		LCD_WriteString("User Found");
		_delay_ms(1000);
			/* WHILE LOOP FOR MAXIMUM TRIAL */
		while(Maximum_Trial<3)
    52c6:	fe 01       	movw	r30, r28
    52c8:	ec 59       	subi	r30, 0x9C	; 156
    52ca:	ff 4f       	sbci	r31, 0xFF	; 255
    52cc:	80 81       	ld	r24, Z
    52ce:	83 30       	cpi	r24, 0x03	; 3
    52d0:	08 f4       	brcc	.+2      	; 0x52d4 <User_Validation+0x74c>
    52d2:	62 cd       	rjmp	.-1340   	; 0x4d98 <User_Validation+0x210>
				 Bluetooth_SendString("/3");
				LCD_WriteString("/3");
				_delay_ms(1000);
			}
		}
		if(Login_Success==1)
    52d4:	fe 01       	movw	r30, r28
    52d6:	eb 59       	subi	r30, 0x9B	; 155
    52d8:	ff 4f       	sbci	r31, 0xFF	; 255
    52da:	80 81       	ld	r24, Z
    52dc:	81 30       	cpi	r24, 0x01	; 1
    52de:	09 f0       	breq	.+2      	; 0x52e2 <User_Validation+0x75a>
    52e0:	85 c0       	rjmp	.+266    	; 0x53ec <User_Validation+0x864>
		{
			LCD_CLR();
    52e2:	0e 94 2b 13 	call	0x2656	; 0x2656 <LCD_CLR>
			/* ADD HERE USER TASKS*/
			 Bluetooth_SendString("\n--------------------\n");
    52e6:	80 e6       	ldi	r24, 0x60	; 96
    52e8:	90 e0       	ldi	r25, 0x00	; 0
    52ea:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
			 Bluetooth_SendString("Loging Success");
    52ee:	83 e8       	ldi	r24, 0x83	; 131
    52f0:	92 e0       	ldi	r25, 0x02	; 2
    52f2:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
			LCD_WriteString("Login Success");
    52f6:	82 e9       	ldi	r24, 0x92	; 146
    52f8:	92 e0       	ldi	r25, 0x02	; 2
    52fa:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LCD_WriteString>
    52fe:	80 e0       	ldi	r24, 0x00	; 0
    5300:	90 e0       	ldi	r25, 0x00	; 0
    5302:	aa e7       	ldi	r26, 0x7A	; 122
    5304:	b4 e4       	ldi	r27, 0x44	; 68
    5306:	8f a3       	std	Y+39, r24	; 0x27
    5308:	98 a7       	std	Y+40, r25	; 0x28
    530a:	a9 a7       	std	Y+41, r26	; 0x29
    530c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    530e:	6f a1       	ldd	r22, Y+39	; 0x27
    5310:	78 a5       	ldd	r23, Y+40	; 0x28
    5312:	89 a5       	ldd	r24, Y+41	; 0x29
    5314:	9a a5       	ldd	r25, Y+42	; 0x2a
    5316:	20 e0       	ldi	r18, 0x00	; 0
    5318:	30 e0       	ldi	r19, 0x00	; 0
    531a:	4a ef       	ldi	r20, 0xFA	; 250
    531c:	54 e4       	ldi	r21, 0x44	; 68
    531e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5322:	dc 01       	movw	r26, r24
    5324:	cb 01       	movw	r24, r22
    5326:	8b a3       	std	Y+35, r24	; 0x23
    5328:	9c a3       	std	Y+36, r25	; 0x24
    532a:	ad a3       	std	Y+37, r26	; 0x25
    532c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    532e:	6b a1       	ldd	r22, Y+35	; 0x23
    5330:	7c a1       	ldd	r23, Y+36	; 0x24
    5332:	8d a1       	ldd	r24, Y+37	; 0x25
    5334:	9e a1       	ldd	r25, Y+38	; 0x26
    5336:	20 e0       	ldi	r18, 0x00	; 0
    5338:	30 e0       	ldi	r19, 0x00	; 0
    533a:	40 e8       	ldi	r20, 0x80	; 128
    533c:	5f e3       	ldi	r21, 0x3F	; 63
    533e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5342:	88 23       	and	r24, r24
    5344:	2c f4       	brge	.+10     	; 0x5350 <User_Validation+0x7c8>
		__ticks = 1;
    5346:	81 e0       	ldi	r24, 0x01	; 1
    5348:	90 e0       	ldi	r25, 0x00	; 0
    534a:	9a a3       	std	Y+34, r25	; 0x22
    534c:	89 a3       	std	Y+33, r24	; 0x21
    534e:	3f c0       	rjmp	.+126    	; 0x53ce <User_Validation+0x846>
	else if (__tmp > 65535)
    5350:	6b a1       	ldd	r22, Y+35	; 0x23
    5352:	7c a1       	ldd	r23, Y+36	; 0x24
    5354:	8d a1       	ldd	r24, Y+37	; 0x25
    5356:	9e a1       	ldd	r25, Y+38	; 0x26
    5358:	20 e0       	ldi	r18, 0x00	; 0
    535a:	3f ef       	ldi	r19, 0xFF	; 255
    535c:	4f e7       	ldi	r20, 0x7F	; 127
    535e:	57 e4       	ldi	r21, 0x47	; 71
    5360:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5364:	18 16       	cp	r1, r24
    5366:	4c f5       	brge	.+82     	; 0x53ba <User_Validation+0x832>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5368:	6f a1       	ldd	r22, Y+39	; 0x27
    536a:	78 a5       	ldd	r23, Y+40	; 0x28
    536c:	89 a5       	ldd	r24, Y+41	; 0x29
    536e:	9a a5       	ldd	r25, Y+42	; 0x2a
    5370:	20 e0       	ldi	r18, 0x00	; 0
    5372:	30 e0       	ldi	r19, 0x00	; 0
    5374:	40 e2       	ldi	r20, 0x20	; 32
    5376:	51 e4       	ldi	r21, 0x41	; 65
    5378:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    537c:	dc 01       	movw	r26, r24
    537e:	cb 01       	movw	r24, r22
    5380:	bc 01       	movw	r22, r24
    5382:	cd 01       	movw	r24, r26
    5384:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5388:	dc 01       	movw	r26, r24
    538a:	cb 01       	movw	r24, r22
    538c:	9a a3       	std	Y+34, r25	; 0x22
    538e:	89 a3       	std	Y+33, r24	; 0x21
    5390:	0f c0       	rjmp	.+30     	; 0x53b0 <User_Validation+0x828>
    5392:	88 ec       	ldi	r24, 0xC8	; 200
    5394:	90 e0       	ldi	r25, 0x00	; 0
    5396:	98 a3       	std	Y+32, r25	; 0x20
    5398:	8f 8f       	std	Y+31, r24	; 0x1f
    539a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    539c:	98 a1       	ldd	r25, Y+32	; 0x20
    539e:	01 97       	sbiw	r24, 0x01	; 1
    53a0:	f1 f7       	brne	.-4      	; 0x539e <User_Validation+0x816>
    53a2:	98 a3       	std	Y+32, r25	; 0x20
    53a4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    53a6:	89 a1       	ldd	r24, Y+33	; 0x21
    53a8:	9a a1       	ldd	r25, Y+34	; 0x22
    53aa:	01 97       	sbiw	r24, 0x01	; 1
    53ac:	9a a3       	std	Y+34, r25	; 0x22
    53ae:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    53b0:	89 a1       	ldd	r24, Y+33	; 0x21
    53b2:	9a a1       	ldd	r25, Y+34	; 0x22
    53b4:	00 97       	sbiw	r24, 0x00	; 0
    53b6:	69 f7       	brne	.-38     	; 0x5392 <User_Validation+0x80a>
    53b8:	14 c0       	rjmp	.+40     	; 0x53e2 <User_Validation+0x85a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    53ba:	6b a1       	ldd	r22, Y+35	; 0x23
    53bc:	7c a1       	ldd	r23, Y+36	; 0x24
    53be:	8d a1       	ldd	r24, Y+37	; 0x25
    53c0:	9e a1       	ldd	r25, Y+38	; 0x26
    53c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53c6:	dc 01       	movw	r26, r24
    53c8:	cb 01       	movw	r24, r22
    53ca:	9a a3       	std	Y+34, r25	; 0x22
    53cc:	89 a3       	std	Y+33, r24	; 0x21
    53ce:	89 a1       	ldd	r24, Y+33	; 0x21
    53d0:	9a a1       	ldd	r25, Y+34	; 0x22
    53d2:	9e 8f       	std	Y+30, r25	; 0x1e
    53d4:	8d 8f       	std	Y+29, r24	; 0x1d
    53d6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    53d8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    53da:	01 97       	sbiw	r24, 0x01	; 1
    53dc:	f1 f7       	brne	.-4      	; 0x53da <User_Validation+0x852>
    53de:	9e 8f       	std	Y+30, r25	; 0x1e
    53e0:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(1000);
			return 1;
    53e2:	f1 e0       	ldi	r31, 0x01	; 1
    53e4:	e1 96       	adiw	r28, 0x31	; 49
    53e6:	ff af       	std	Y+63, r31	; 0x3f
    53e8:	e1 97       	sbiw	r28, 0x31	; 49
    53ea:	18 c1       	rjmp	.+560    	; 0x561c <User_Validation+0xa94>
		}
		else if (Login_Success==0 && Maximum_Trial==3)
    53ec:	fe 01       	movw	r30, r28
    53ee:	eb 59       	subi	r30, 0x9B	; 155
    53f0:	ff 4f       	sbci	r31, 0xFF	; 255
    53f2:	80 81       	ld	r24, Z
    53f4:	88 23       	and	r24, r24
    53f6:	09 f0       	breq	.+2      	; 0x53fa <User_Validation+0x872>
    53f8:	8d c0       	rjmp	.+282    	; 0x5514 <User_Validation+0x98c>
    53fa:	fe 01       	movw	r30, r28
    53fc:	ec 59       	subi	r30, 0x9C	; 156
    53fe:	ff 4f       	sbci	r31, 0xFF	; 255
    5400:	80 81       	ld	r24, Z
    5402:	83 30       	cpi	r24, 0x03	; 3
    5404:	09 f0       	breq	.+2      	; 0x5408 <User_Validation+0x880>
    5406:	86 c0       	rjmp	.+268    	; 0x5514 <User_Validation+0x98c>
		{
			LCD_CLR();
    5408:	0e 94 2b 13 	call	0x2656	; 0x2656 <LCD_CLR>
			 Bluetooth_SendString("\n--------------------\n");
    540c:	80 e6       	ldi	r24, 0x60	; 96
    540e:	90 e0       	ldi	r25, 0x00	; 0
    5410:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
			 Bluetooth_SendString("Timed Out");
    5414:	80 ea       	ldi	r24, 0xA0	; 160
    5416:	92 e0       	ldi	r25, 0x02	; 2
    5418:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
			LCD_WriteString("Timed Out");
    541c:	80 ea       	ldi	r24, 0xA0	; 160
    541e:	92 e0       	ldi	r25, 0x02	; 2
    5420:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LCD_WriteString>
    5424:	80 e0       	ldi	r24, 0x00	; 0
    5426:	90 e0       	ldi	r25, 0x00	; 0
    5428:	aa e7       	ldi	r26, 0x7A	; 122
    542a:	b4 e4       	ldi	r27, 0x44	; 68
    542c:	89 8f       	std	Y+25, r24	; 0x19
    542e:	9a 8f       	std	Y+26, r25	; 0x1a
    5430:	ab 8f       	std	Y+27, r26	; 0x1b
    5432:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5434:	69 8d       	ldd	r22, Y+25	; 0x19
    5436:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5438:	8b 8d       	ldd	r24, Y+27	; 0x1b
    543a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    543c:	20 e0       	ldi	r18, 0x00	; 0
    543e:	30 e0       	ldi	r19, 0x00	; 0
    5440:	4a ef       	ldi	r20, 0xFA	; 250
    5442:	54 e4       	ldi	r21, 0x44	; 68
    5444:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5448:	dc 01       	movw	r26, r24
    544a:	cb 01       	movw	r24, r22
    544c:	8d 8b       	std	Y+21, r24	; 0x15
    544e:	9e 8b       	std	Y+22, r25	; 0x16
    5450:	af 8b       	std	Y+23, r26	; 0x17
    5452:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5454:	6d 89       	ldd	r22, Y+21	; 0x15
    5456:	7e 89       	ldd	r23, Y+22	; 0x16
    5458:	8f 89       	ldd	r24, Y+23	; 0x17
    545a:	98 8d       	ldd	r25, Y+24	; 0x18
    545c:	20 e0       	ldi	r18, 0x00	; 0
    545e:	30 e0       	ldi	r19, 0x00	; 0
    5460:	40 e8       	ldi	r20, 0x80	; 128
    5462:	5f e3       	ldi	r21, 0x3F	; 63
    5464:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5468:	88 23       	and	r24, r24
    546a:	2c f4       	brge	.+10     	; 0x5476 <User_Validation+0x8ee>
		__ticks = 1;
    546c:	81 e0       	ldi	r24, 0x01	; 1
    546e:	90 e0       	ldi	r25, 0x00	; 0
    5470:	9c 8b       	std	Y+20, r25	; 0x14
    5472:	8b 8b       	std	Y+19, r24	; 0x13
    5474:	3f c0       	rjmp	.+126    	; 0x54f4 <User_Validation+0x96c>
	else if (__tmp > 65535)
    5476:	6d 89       	ldd	r22, Y+21	; 0x15
    5478:	7e 89       	ldd	r23, Y+22	; 0x16
    547a:	8f 89       	ldd	r24, Y+23	; 0x17
    547c:	98 8d       	ldd	r25, Y+24	; 0x18
    547e:	20 e0       	ldi	r18, 0x00	; 0
    5480:	3f ef       	ldi	r19, 0xFF	; 255
    5482:	4f e7       	ldi	r20, 0x7F	; 127
    5484:	57 e4       	ldi	r21, 0x47	; 71
    5486:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    548a:	18 16       	cp	r1, r24
    548c:	4c f5       	brge	.+82     	; 0x54e0 <User_Validation+0x958>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    548e:	69 8d       	ldd	r22, Y+25	; 0x19
    5490:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5492:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5494:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5496:	20 e0       	ldi	r18, 0x00	; 0
    5498:	30 e0       	ldi	r19, 0x00	; 0
    549a:	40 e2       	ldi	r20, 0x20	; 32
    549c:	51 e4       	ldi	r21, 0x41	; 65
    549e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    54a2:	dc 01       	movw	r26, r24
    54a4:	cb 01       	movw	r24, r22
    54a6:	bc 01       	movw	r22, r24
    54a8:	cd 01       	movw	r24, r26
    54aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54ae:	dc 01       	movw	r26, r24
    54b0:	cb 01       	movw	r24, r22
    54b2:	9c 8b       	std	Y+20, r25	; 0x14
    54b4:	8b 8b       	std	Y+19, r24	; 0x13
    54b6:	0f c0       	rjmp	.+30     	; 0x54d6 <User_Validation+0x94e>
    54b8:	88 ec       	ldi	r24, 0xC8	; 200
    54ba:	90 e0       	ldi	r25, 0x00	; 0
    54bc:	9a 8b       	std	Y+18, r25	; 0x12
    54be:	89 8b       	std	Y+17, r24	; 0x11
    54c0:	89 89       	ldd	r24, Y+17	; 0x11
    54c2:	9a 89       	ldd	r25, Y+18	; 0x12
    54c4:	01 97       	sbiw	r24, 0x01	; 1
    54c6:	f1 f7       	brne	.-4      	; 0x54c4 <User_Validation+0x93c>
    54c8:	9a 8b       	std	Y+18, r25	; 0x12
    54ca:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    54cc:	8b 89       	ldd	r24, Y+19	; 0x13
    54ce:	9c 89       	ldd	r25, Y+20	; 0x14
    54d0:	01 97       	sbiw	r24, 0x01	; 1
    54d2:	9c 8b       	std	Y+20, r25	; 0x14
    54d4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    54d6:	8b 89       	ldd	r24, Y+19	; 0x13
    54d8:	9c 89       	ldd	r25, Y+20	; 0x14
    54da:	00 97       	sbiw	r24, 0x00	; 0
    54dc:	69 f7       	brne	.-38     	; 0x54b8 <User_Validation+0x930>
    54de:	14 c0       	rjmp	.+40     	; 0x5508 <User_Validation+0x980>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    54e0:	6d 89       	ldd	r22, Y+21	; 0x15
    54e2:	7e 89       	ldd	r23, Y+22	; 0x16
    54e4:	8f 89       	ldd	r24, Y+23	; 0x17
    54e6:	98 8d       	ldd	r25, Y+24	; 0x18
    54e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54ec:	dc 01       	movw	r26, r24
    54ee:	cb 01       	movw	r24, r22
    54f0:	9c 8b       	std	Y+20, r25	; 0x14
    54f2:	8b 8b       	std	Y+19, r24	; 0x13
    54f4:	8b 89       	ldd	r24, Y+19	; 0x13
    54f6:	9c 89       	ldd	r25, Y+20	; 0x14
    54f8:	98 8b       	std	Y+16, r25	; 0x10
    54fa:	8f 87       	std	Y+15, r24	; 0x0f
    54fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    54fe:	98 89       	ldd	r25, Y+16	; 0x10
    5500:	01 97       	sbiw	r24, 0x01	; 1
    5502:	f1 f7       	brne	.-4      	; 0x5500 <User_Validation+0x978>
    5504:	98 8b       	std	Y+16, r25	; 0x10
    5506:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1000);
	        Time_Out_Function();
    5508:	0e 94 0f 25 	call	0x4a1e	; 0x4a1e <Time_Out_Function>
			return 0;
    550c:	e1 96       	adiw	r28, 0x31	; 49
    550e:	1f ae       	std	Y+63, r1	; 0x3f
    5510:	e1 97       	sbiw	r28, 0x31	; 49
    5512:	84 c0       	rjmp	.+264    	; 0x561c <User_Validation+0xa94>
    5514:	89 c0       	rjmp	.+274    	; 0x5628 <User_Validation+0xaa0>
		}
	}
	else//unregistered user
	{
		LCD_CLR();
    5516:	0e 94 2b 13 	call	0x2656	; 0x2656 <LCD_CLR>
		 Bluetooth_SendString("\n--------------------\n");
    551a:	80 e6       	ldi	r24, 0x60	; 96
    551c:	90 e0       	ldi	r25, 0x00	; 0
    551e:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
		 Bluetooth_SendString("User Not Found");
    5522:	8a ea       	ldi	r24, 0xAA	; 170
    5524:	92 e0       	ldi	r25, 0x02	; 2
    5526:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
		LCD_WriteString("User not Found");
    552a:	89 eb       	ldi	r24, 0xB9	; 185
    552c:	92 e0       	ldi	r25, 0x02	; 2
    552e:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LCD_WriteString>
    5532:	80 e0       	ldi	r24, 0x00	; 0
    5534:	90 e0       	ldi	r25, 0x00	; 0
    5536:	aa e7       	ldi	r26, 0x7A	; 122
    5538:	b4 e4       	ldi	r27, 0x44	; 68
    553a:	8b 87       	std	Y+11, r24	; 0x0b
    553c:	9c 87       	std	Y+12, r25	; 0x0c
    553e:	ad 87       	std	Y+13, r26	; 0x0d
    5540:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5542:	6b 85       	ldd	r22, Y+11	; 0x0b
    5544:	7c 85       	ldd	r23, Y+12	; 0x0c
    5546:	8d 85       	ldd	r24, Y+13	; 0x0d
    5548:	9e 85       	ldd	r25, Y+14	; 0x0e
    554a:	20 e0       	ldi	r18, 0x00	; 0
    554c:	30 e0       	ldi	r19, 0x00	; 0
    554e:	4a ef       	ldi	r20, 0xFA	; 250
    5550:	54 e4       	ldi	r21, 0x44	; 68
    5552:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5556:	dc 01       	movw	r26, r24
    5558:	cb 01       	movw	r24, r22
    555a:	8f 83       	std	Y+7, r24	; 0x07
    555c:	98 87       	std	Y+8, r25	; 0x08
    555e:	a9 87       	std	Y+9, r26	; 0x09
    5560:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5562:	6f 81       	ldd	r22, Y+7	; 0x07
    5564:	78 85       	ldd	r23, Y+8	; 0x08
    5566:	89 85       	ldd	r24, Y+9	; 0x09
    5568:	9a 85       	ldd	r25, Y+10	; 0x0a
    556a:	20 e0       	ldi	r18, 0x00	; 0
    556c:	30 e0       	ldi	r19, 0x00	; 0
    556e:	40 e8       	ldi	r20, 0x80	; 128
    5570:	5f e3       	ldi	r21, 0x3F	; 63
    5572:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5576:	88 23       	and	r24, r24
    5578:	2c f4       	brge	.+10     	; 0x5584 <User_Validation+0x9fc>
		__ticks = 1;
    557a:	81 e0       	ldi	r24, 0x01	; 1
    557c:	90 e0       	ldi	r25, 0x00	; 0
    557e:	9e 83       	std	Y+6, r25	; 0x06
    5580:	8d 83       	std	Y+5, r24	; 0x05
    5582:	3f c0       	rjmp	.+126    	; 0x5602 <User_Validation+0xa7a>
	else if (__tmp > 65535)
    5584:	6f 81       	ldd	r22, Y+7	; 0x07
    5586:	78 85       	ldd	r23, Y+8	; 0x08
    5588:	89 85       	ldd	r24, Y+9	; 0x09
    558a:	9a 85       	ldd	r25, Y+10	; 0x0a
    558c:	20 e0       	ldi	r18, 0x00	; 0
    558e:	3f ef       	ldi	r19, 0xFF	; 255
    5590:	4f e7       	ldi	r20, 0x7F	; 127
    5592:	57 e4       	ldi	r21, 0x47	; 71
    5594:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5598:	18 16       	cp	r1, r24
    559a:	4c f5       	brge	.+82     	; 0x55ee <User_Validation+0xa66>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    559c:	6b 85       	ldd	r22, Y+11	; 0x0b
    559e:	7c 85       	ldd	r23, Y+12	; 0x0c
    55a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    55a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    55a4:	20 e0       	ldi	r18, 0x00	; 0
    55a6:	30 e0       	ldi	r19, 0x00	; 0
    55a8:	40 e2       	ldi	r20, 0x20	; 32
    55aa:	51 e4       	ldi	r21, 0x41	; 65
    55ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55b0:	dc 01       	movw	r26, r24
    55b2:	cb 01       	movw	r24, r22
    55b4:	bc 01       	movw	r22, r24
    55b6:	cd 01       	movw	r24, r26
    55b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    55bc:	dc 01       	movw	r26, r24
    55be:	cb 01       	movw	r24, r22
    55c0:	9e 83       	std	Y+6, r25	; 0x06
    55c2:	8d 83       	std	Y+5, r24	; 0x05
    55c4:	0f c0       	rjmp	.+30     	; 0x55e4 <User_Validation+0xa5c>
    55c6:	88 ec       	ldi	r24, 0xC8	; 200
    55c8:	90 e0       	ldi	r25, 0x00	; 0
    55ca:	9c 83       	std	Y+4, r25	; 0x04
    55cc:	8b 83       	std	Y+3, r24	; 0x03
    55ce:	8b 81       	ldd	r24, Y+3	; 0x03
    55d0:	9c 81       	ldd	r25, Y+4	; 0x04
    55d2:	01 97       	sbiw	r24, 0x01	; 1
    55d4:	f1 f7       	brne	.-4      	; 0x55d2 <User_Validation+0xa4a>
    55d6:	9c 83       	std	Y+4, r25	; 0x04
    55d8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    55da:	8d 81       	ldd	r24, Y+5	; 0x05
    55dc:	9e 81       	ldd	r25, Y+6	; 0x06
    55de:	01 97       	sbiw	r24, 0x01	; 1
    55e0:	9e 83       	std	Y+6, r25	; 0x06
    55e2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    55e4:	8d 81       	ldd	r24, Y+5	; 0x05
    55e6:	9e 81       	ldd	r25, Y+6	; 0x06
    55e8:	00 97       	sbiw	r24, 0x00	; 0
    55ea:	69 f7       	brne	.-38     	; 0x55c6 <User_Validation+0xa3e>
    55ec:	14 c0       	rjmp	.+40     	; 0x5616 <User_Validation+0xa8e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    55ee:	6f 81       	ldd	r22, Y+7	; 0x07
    55f0:	78 85       	ldd	r23, Y+8	; 0x08
    55f2:	89 85       	ldd	r24, Y+9	; 0x09
    55f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    55f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    55fa:	dc 01       	movw	r26, r24
    55fc:	cb 01       	movw	r24, r22
    55fe:	9e 83       	std	Y+6, r25	; 0x06
    5600:	8d 83       	std	Y+5, r24	; 0x05
    5602:	8d 81       	ldd	r24, Y+5	; 0x05
    5604:	9e 81       	ldd	r25, Y+6	; 0x06
    5606:	9a 83       	std	Y+2, r25	; 0x02
    5608:	89 83       	std	Y+1, r24	; 0x01
    560a:	89 81       	ldd	r24, Y+1	; 0x01
    560c:	9a 81       	ldd	r25, Y+2	; 0x02
    560e:	01 97       	sbiw	r24, 0x01	; 1
    5610:	f1 f7       	brne	.-4      	; 0x560e <User_Validation+0xa86>
    5612:	9a 83       	std	Y+2, r25	; 0x02
    5614:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		return 0;
    5616:	e1 96       	adiw	r28, 0x31	; 49
    5618:	1f ae       	std	Y+63, r1	; 0x3f
    561a:	e1 97       	sbiw	r28, 0x31	; 49
    561c:	e1 96       	adiw	r28, 0x31	; 49
    561e:	8f ad       	ldd	r24, Y+63	; 0x3f
    5620:	e1 97       	sbiw	r28, 0x31	; 49
    5622:	e2 96       	adiw	r28, 0x32	; 50
    5624:	8f af       	std	Y+63, r24	; 0x3f
    5626:	e2 97       	sbiw	r28, 0x32	; 50
	}
}
    5628:	e2 96       	adiw	r28, 0x32	; 50
    562a:	8f ad       	ldd	r24, Y+63	; 0x3f
    562c:	e2 97       	sbiw	r28, 0x32	; 50
    562e:	cf 58       	subi	r28, 0x8F	; 143
    5630:	df 4f       	sbci	r29, 0xFF	; 255
    5632:	0f b6       	in	r0, 0x3f	; 63
    5634:	f8 94       	cli
    5636:	de bf       	out	0x3e, r29	; 62
    5638:	0f be       	out	0x3f, r0	; 63
    563a:	cd bf       	out	0x3d, r28	; 61
    563c:	cf 91       	pop	r28
    563e:	df 91       	pop	r29
    5640:	1f 91       	pop	r17
    5642:	0f 91       	pop	r16
    5644:	08 95       	ret

00005646 <User_DoorControl>:
/* Graduation Project Door Open/Close */
void User_DoorControl(void)
{
    5646:	df 93       	push	r29
    5648:	cf 93       	push	r28
    564a:	cd b7       	in	r28, 0x3d	; 61
    564c:	de b7       	in	r29, 0x3e	; 62
    564e:	6e 97       	sbiw	r28, 0x1e	; 30
    5650:	0f b6       	in	r0, 0x3f	; 63
    5652:	f8 94       	cli
    5654:	de bf       	out	0x3e, r29	; 62
    5656:	0f be       	out	0x3f, r0	; 63
    5658:	cd bf       	out	0x3d, r28	; 61
	u8 User_DoorInput,User_Door_ExitFlag=0;
    565a:	1d 8e       	std	Y+29, r1	; 0x1d
	LCD_CLR();
    565c:	0e 94 2b 13 	call	0x2656	; 0x2656 <LCD_CLR>
	 Bluetooth_SendString("\n--------------------\n");
    5660:	80 e6       	ldi	r24, 0x60	; 96
    5662:	90 e0       	ldi	r25, 0x00	; 0
    5664:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
	 Bluetooth_SendString("1)Open\n2)Close\n3)Back");
    5668:	88 ec       	ldi	r24, 0xC8	; 200
    566a:	92 e0       	ldi	r25, 0x02	; 2
    566c:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
	LCD_WriteString("1)Open");
    5670:	8e ed       	ldi	r24, 0xDE	; 222
    5672:	92 e0       	ldi	r25, 0x02	; 2
    5674:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LCD_WriteString>
	LCD_goto(0,1);
    5678:	80 e0       	ldi	r24, 0x00	; 0
    567a:	61 e0       	ldi	r22, 0x01	; 1
    567c:	0e 94 13 13 	call	0x2626	; 0x2626 <LCD_goto>
	LCD_WriteString("2)Close");
    5680:	85 ee       	ldi	r24, 0xE5	; 229
    5682:	92 e0       	ldi	r25, 0x02	; 2
    5684:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LCD_WriteString>
    5688:	0e c1       	rjmp	.+540    	; 0x58a6 <User_DoorControl+0x260>
	/* While here*/
	while(User_Door_ExitFlag==0)
	{
		User_DoorInput = UART_u8Receiver();
    568a:	0e 94 a3 1a 	call	0x3546	; 0x3546 <UART_u8Receiver>
    568e:	8e 8f       	std	Y+30, r24	; 0x1e
		ASCII_Conversion(&User_DoorInput);
    5690:	ce 01       	movw	r24, r28
    5692:	4e 96       	adiw	r24, 0x1e	; 30
    5694:	0e 94 b7 1c 	call	0x396e	; 0x396e <ASCII_Conversion>
		if(User_DoorInput==1)
    5698:	8e 8d       	ldd	r24, Y+30	; 0x1e
    569a:	81 30       	cpi	r24, 0x01	; 1
    569c:	09 f0       	breq	.+2      	; 0x56a0 <User_DoorControl+0x5a>
    569e:	7d c0       	rjmp	.+250    	; 0x579a <User_DoorControl+0x154>
		{
			TIMER1_Start();
    56a0:	0e 94 90 19 	call	0x3320	; 0x3320 <TIMER1_Start>
			OCR1A=2600;//180 angle
    56a4:	ea e4       	ldi	r30, 0x4A	; 74
    56a6:	f0 e0       	ldi	r31, 0x00	; 0
    56a8:	88 e2       	ldi	r24, 0x28	; 40
    56aa:	9a e0       	ldi	r25, 0x0A	; 10
    56ac:	91 83       	std	Z+1, r25	; 0x01
    56ae:	80 83       	st	Z, r24
    56b0:	80 e0       	ldi	r24, 0x00	; 0
    56b2:	90 e0       	ldi	r25, 0x00	; 0
    56b4:	aa e7       	ldi	r26, 0x7A	; 122
    56b6:	b4 e4       	ldi	r27, 0x44	; 68
    56b8:	89 8f       	std	Y+25, r24	; 0x19
    56ba:	9a 8f       	std	Y+26, r25	; 0x1a
    56bc:	ab 8f       	std	Y+27, r26	; 0x1b
    56be:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    56c0:	69 8d       	ldd	r22, Y+25	; 0x19
    56c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    56c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    56c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    56c8:	20 e0       	ldi	r18, 0x00	; 0
    56ca:	30 e0       	ldi	r19, 0x00	; 0
    56cc:	4a ef       	ldi	r20, 0xFA	; 250
    56ce:	54 e4       	ldi	r21, 0x44	; 68
    56d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    56d4:	dc 01       	movw	r26, r24
    56d6:	cb 01       	movw	r24, r22
    56d8:	8d 8b       	std	Y+21, r24	; 0x15
    56da:	9e 8b       	std	Y+22, r25	; 0x16
    56dc:	af 8b       	std	Y+23, r26	; 0x17
    56de:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    56e0:	6d 89       	ldd	r22, Y+21	; 0x15
    56e2:	7e 89       	ldd	r23, Y+22	; 0x16
    56e4:	8f 89       	ldd	r24, Y+23	; 0x17
    56e6:	98 8d       	ldd	r25, Y+24	; 0x18
    56e8:	20 e0       	ldi	r18, 0x00	; 0
    56ea:	30 e0       	ldi	r19, 0x00	; 0
    56ec:	40 e8       	ldi	r20, 0x80	; 128
    56ee:	5f e3       	ldi	r21, 0x3F	; 63
    56f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    56f4:	88 23       	and	r24, r24
    56f6:	2c f4       	brge	.+10     	; 0x5702 <User_DoorControl+0xbc>
		__ticks = 1;
    56f8:	81 e0       	ldi	r24, 0x01	; 1
    56fa:	90 e0       	ldi	r25, 0x00	; 0
    56fc:	9c 8b       	std	Y+20, r25	; 0x14
    56fe:	8b 8b       	std	Y+19, r24	; 0x13
    5700:	3f c0       	rjmp	.+126    	; 0x5780 <User_DoorControl+0x13a>
	else if (__tmp > 65535)
    5702:	6d 89       	ldd	r22, Y+21	; 0x15
    5704:	7e 89       	ldd	r23, Y+22	; 0x16
    5706:	8f 89       	ldd	r24, Y+23	; 0x17
    5708:	98 8d       	ldd	r25, Y+24	; 0x18
    570a:	20 e0       	ldi	r18, 0x00	; 0
    570c:	3f ef       	ldi	r19, 0xFF	; 255
    570e:	4f e7       	ldi	r20, 0x7F	; 127
    5710:	57 e4       	ldi	r21, 0x47	; 71
    5712:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5716:	18 16       	cp	r1, r24
    5718:	4c f5       	brge	.+82     	; 0x576c <User_DoorControl+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    571a:	69 8d       	ldd	r22, Y+25	; 0x19
    571c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    571e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5720:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5722:	20 e0       	ldi	r18, 0x00	; 0
    5724:	30 e0       	ldi	r19, 0x00	; 0
    5726:	40 e2       	ldi	r20, 0x20	; 32
    5728:	51 e4       	ldi	r21, 0x41	; 65
    572a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    572e:	dc 01       	movw	r26, r24
    5730:	cb 01       	movw	r24, r22
    5732:	bc 01       	movw	r22, r24
    5734:	cd 01       	movw	r24, r26
    5736:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    573a:	dc 01       	movw	r26, r24
    573c:	cb 01       	movw	r24, r22
    573e:	9c 8b       	std	Y+20, r25	; 0x14
    5740:	8b 8b       	std	Y+19, r24	; 0x13
    5742:	0f c0       	rjmp	.+30     	; 0x5762 <User_DoorControl+0x11c>
    5744:	88 ec       	ldi	r24, 0xC8	; 200
    5746:	90 e0       	ldi	r25, 0x00	; 0
    5748:	9a 8b       	std	Y+18, r25	; 0x12
    574a:	89 8b       	std	Y+17, r24	; 0x11
    574c:	89 89       	ldd	r24, Y+17	; 0x11
    574e:	9a 89       	ldd	r25, Y+18	; 0x12
    5750:	01 97       	sbiw	r24, 0x01	; 1
    5752:	f1 f7       	brne	.-4      	; 0x5750 <User_DoorControl+0x10a>
    5754:	9a 8b       	std	Y+18, r25	; 0x12
    5756:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5758:	8b 89       	ldd	r24, Y+19	; 0x13
    575a:	9c 89       	ldd	r25, Y+20	; 0x14
    575c:	01 97       	sbiw	r24, 0x01	; 1
    575e:	9c 8b       	std	Y+20, r25	; 0x14
    5760:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5762:	8b 89       	ldd	r24, Y+19	; 0x13
    5764:	9c 89       	ldd	r25, Y+20	; 0x14
    5766:	00 97       	sbiw	r24, 0x00	; 0
    5768:	69 f7       	brne	.-38     	; 0x5744 <User_DoorControl+0xfe>
    576a:	14 c0       	rjmp	.+40     	; 0x5794 <User_DoorControl+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    576c:	6d 89       	ldd	r22, Y+21	; 0x15
    576e:	7e 89       	ldd	r23, Y+22	; 0x16
    5770:	8f 89       	ldd	r24, Y+23	; 0x17
    5772:	98 8d       	ldd	r25, Y+24	; 0x18
    5774:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5778:	dc 01       	movw	r26, r24
    577a:	cb 01       	movw	r24, r22
    577c:	9c 8b       	std	Y+20, r25	; 0x14
    577e:	8b 8b       	std	Y+19, r24	; 0x13
    5780:	8b 89       	ldd	r24, Y+19	; 0x13
    5782:	9c 89       	ldd	r25, Y+20	; 0x14
    5784:	98 8b       	std	Y+16, r25	; 0x10
    5786:	8f 87       	std	Y+15, r24	; 0x0f
    5788:	8f 85       	ldd	r24, Y+15	; 0x0f
    578a:	98 89       	ldd	r25, Y+16	; 0x10
    578c:	01 97       	sbiw	r24, 0x01	; 1
    578e:	f1 f7       	brne	.-4      	; 0x578c <User_DoorControl+0x146>
    5790:	98 8b       	std	Y+16, r25	; 0x10
    5792:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1000);
			TIMER1_Stop();
    5794:	0e 94 74 19 	call	0x32e8	; 0x32e8 <TIMER1_Stop>
    5798:	86 c0       	rjmp	.+268    	; 0x58a6 <User_DoorControl+0x260>
		}
		else if(User_DoorInput==2)
    579a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    579c:	82 30       	cpi	r24, 0x02	; 2
    579e:	09 f0       	breq	.+2      	; 0x57a2 <User_DoorControl+0x15c>
    57a0:	7d c0       	rjmp	.+250    	; 0x589c <User_DoorControl+0x256>
		{
			TIMER1_Start();
    57a2:	0e 94 90 19 	call	0x3320	; 0x3320 <TIMER1_Start>
			OCR1A=580;//0 angle
    57a6:	ea e4       	ldi	r30, 0x4A	; 74
    57a8:	f0 e0       	ldi	r31, 0x00	; 0
    57aa:	84 e4       	ldi	r24, 0x44	; 68
    57ac:	92 e0       	ldi	r25, 0x02	; 2
    57ae:	91 83       	std	Z+1, r25	; 0x01
    57b0:	80 83       	st	Z, r24
    57b2:	80 e0       	ldi	r24, 0x00	; 0
    57b4:	90 e0       	ldi	r25, 0x00	; 0
    57b6:	aa e7       	ldi	r26, 0x7A	; 122
    57b8:	b4 e4       	ldi	r27, 0x44	; 68
    57ba:	8b 87       	std	Y+11, r24	; 0x0b
    57bc:	9c 87       	std	Y+12, r25	; 0x0c
    57be:	ad 87       	std	Y+13, r26	; 0x0d
    57c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    57c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    57c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    57c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    57c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    57ca:	20 e0       	ldi	r18, 0x00	; 0
    57cc:	30 e0       	ldi	r19, 0x00	; 0
    57ce:	4a ef       	ldi	r20, 0xFA	; 250
    57d0:	54 e4       	ldi	r21, 0x44	; 68
    57d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    57d6:	dc 01       	movw	r26, r24
    57d8:	cb 01       	movw	r24, r22
    57da:	8f 83       	std	Y+7, r24	; 0x07
    57dc:	98 87       	std	Y+8, r25	; 0x08
    57de:	a9 87       	std	Y+9, r26	; 0x09
    57e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    57e2:	6f 81       	ldd	r22, Y+7	; 0x07
    57e4:	78 85       	ldd	r23, Y+8	; 0x08
    57e6:	89 85       	ldd	r24, Y+9	; 0x09
    57e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    57ea:	20 e0       	ldi	r18, 0x00	; 0
    57ec:	30 e0       	ldi	r19, 0x00	; 0
    57ee:	40 e8       	ldi	r20, 0x80	; 128
    57f0:	5f e3       	ldi	r21, 0x3F	; 63
    57f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    57f6:	88 23       	and	r24, r24
    57f8:	2c f4       	brge	.+10     	; 0x5804 <User_DoorControl+0x1be>
		__ticks = 1;
    57fa:	81 e0       	ldi	r24, 0x01	; 1
    57fc:	90 e0       	ldi	r25, 0x00	; 0
    57fe:	9e 83       	std	Y+6, r25	; 0x06
    5800:	8d 83       	std	Y+5, r24	; 0x05
    5802:	3f c0       	rjmp	.+126    	; 0x5882 <User_DoorControl+0x23c>
	else if (__tmp > 65535)
    5804:	6f 81       	ldd	r22, Y+7	; 0x07
    5806:	78 85       	ldd	r23, Y+8	; 0x08
    5808:	89 85       	ldd	r24, Y+9	; 0x09
    580a:	9a 85       	ldd	r25, Y+10	; 0x0a
    580c:	20 e0       	ldi	r18, 0x00	; 0
    580e:	3f ef       	ldi	r19, 0xFF	; 255
    5810:	4f e7       	ldi	r20, 0x7F	; 127
    5812:	57 e4       	ldi	r21, 0x47	; 71
    5814:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5818:	18 16       	cp	r1, r24
    581a:	4c f5       	brge	.+82     	; 0x586e <User_DoorControl+0x228>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    581c:	6b 85       	ldd	r22, Y+11	; 0x0b
    581e:	7c 85       	ldd	r23, Y+12	; 0x0c
    5820:	8d 85       	ldd	r24, Y+13	; 0x0d
    5822:	9e 85       	ldd	r25, Y+14	; 0x0e
    5824:	20 e0       	ldi	r18, 0x00	; 0
    5826:	30 e0       	ldi	r19, 0x00	; 0
    5828:	40 e2       	ldi	r20, 0x20	; 32
    582a:	51 e4       	ldi	r21, 0x41	; 65
    582c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5830:	dc 01       	movw	r26, r24
    5832:	cb 01       	movw	r24, r22
    5834:	bc 01       	movw	r22, r24
    5836:	cd 01       	movw	r24, r26
    5838:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    583c:	dc 01       	movw	r26, r24
    583e:	cb 01       	movw	r24, r22
    5840:	9e 83       	std	Y+6, r25	; 0x06
    5842:	8d 83       	std	Y+5, r24	; 0x05
    5844:	0f c0       	rjmp	.+30     	; 0x5864 <User_DoorControl+0x21e>
    5846:	88 ec       	ldi	r24, 0xC8	; 200
    5848:	90 e0       	ldi	r25, 0x00	; 0
    584a:	9c 83       	std	Y+4, r25	; 0x04
    584c:	8b 83       	std	Y+3, r24	; 0x03
    584e:	8b 81       	ldd	r24, Y+3	; 0x03
    5850:	9c 81       	ldd	r25, Y+4	; 0x04
    5852:	01 97       	sbiw	r24, 0x01	; 1
    5854:	f1 f7       	brne	.-4      	; 0x5852 <User_DoorControl+0x20c>
    5856:	9c 83       	std	Y+4, r25	; 0x04
    5858:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    585a:	8d 81       	ldd	r24, Y+5	; 0x05
    585c:	9e 81       	ldd	r25, Y+6	; 0x06
    585e:	01 97       	sbiw	r24, 0x01	; 1
    5860:	9e 83       	std	Y+6, r25	; 0x06
    5862:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5864:	8d 81       	ldd	r24, Y+5	; 0x05
    5866:	9e 81       	ldd	r25, Y+6	; 0x06
    5868:	00 97       	sbiw	r24, 0x00	; 0
    586a:	69 f7       	brne	.-38     	; 0x5846 <User_DoorControl+0x200>
    586c:	14 c0       	rjmp	.+40     	; 0x5896 <User_DoorControl+0x250>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    586e:	6f 81       	ldd	r22, Y+7	; 0x07
    5870:	78 85       	ldd	r23, Y+8	; 0x08
    5872:	89 85       	ldd	r24, Y+9	; 0x09
    5874:	9a 85       	ldd	r25, Y+10	; 0x0a
    5876:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    587a:	dc 01       	movw	r26, r24
    587c:	cb 01       	movw	r24, r22
    587e:	9e 83       	std	Y+6, r25	; 0x06
    5880:	8d 83       	std	Y+5, r24	; 0x05
    5882:	8d 81       	ldd	r24, Y+5	; 0x05
    5884:	9e 81       	ldd	r25, Y+6	; 0x06
    5886:	9a 83       	std	Y+2, r25	; 0x02
    5888:	89 83       	std	Y+1, r24	; 0x01
    588a:	89 81       	ldd	r24, Y+1	; 0x01
    588c:	9a 81       	ldd	r25, Y+2	; 0x02
    588e:	01 97       	sbiw	r24, 0x01	; 1
    5890:	f1 f7       	brne	.-4      	; 0x588e <User_DoorControl+0x248>
    5892:	9a 83       	std	Y+2, r25	; 0x02
    5894:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			TIMER1_Stop();
    5896:	0e 94 74 19 	call	0x32e8	; 0x32e8 <TIMER1_Stop>
    589a:	05 c0       	rjmp	.+10     	; 0x58a6 <User_DoorControl+0x260>
		}
		else if(User_DoorInput==3)
    589c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    589e:	83 30       	cpi	r24, 0x03	; 3
    58a0:	11 f4       	brne	.+4      	; 0x58a6 <User_DoorControl+0x260>
		{
			User_Door_ExitFlag=1;
    58a2:	81 e0       	ldi	r24, 0x01	; 1
    58a4:	8d 8f       	std	Y+29, r24	; 0x1d
	 Bluetooth_SendString("1)Open\n2)Close\n3)Back");
	LCD_WriteString("1)Open");
	LCD_goto(0,1);
	LCD_WriteString("2)Close");
	/* While here*/
	while(User_Door_ExitFlag==0)
    58a6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    58a8:	88 23       	and	r24, r24
    58aa:	09 f4       	brne	.+2      	; 0x58ae <User_DoorControl+0x268>
    58ac:	ee ce       	rjmp	.-548    	; 0x568a <User_DoorControl+0x44>
		else if(User_DoorInput==3)
		{
			User_Door_ExitFlag=1;
		}
	}
}
    58ae:	6e 96       	adiw	r28, 0x1e	; 30
    58b0:	0f b6       	in	r0, 0x3f	; 63
    58b2:	f8 94       	cli
    58b4:	de bf       	out	0x3e, r29	; 62
    58b6:	0f be       	out	0x3f, r0	; 63
    58b8:	cd bf       	out	0x3d, r28	; 61
    58ba:	cf 91       	pop	r28
    58bc:	df 91       	pop	r29
    58be:	08 95       	ret

000058c0 <User_Light_Control>:
void User_Light_Control(void)
{
    58c0:	df 93       	push	r29
    58c2:	cf 93       	push	r28
    58c4:	00 d0       	rcall	.+0      	; 0x58c6 <User_Light_Control+0x6>
    58c6:	cd b7       	in	r28, 0x3d	; 61
    58c8:	de b7       	in	r29, 0x3e	; 62
	u8 User_Ligh_Input,User_Light_ExitFlag=0;
    58ca:	19 82       	std	Y+1, r1	; 0x01
	LCD_CLR();
    58cc:	0e 94 2b 13 	call	0x2656	; 0x2656 <LCD_CLR>
	Bluetooth_SendString("\n--------------------\n");
    58d0:	80 e6       	ldi	r24, 0x60	; 96
    58d2:	90 e0       	ldi	r25, 0x00	; 0
    58d4:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
	Bluetooth_SendString("1)Turn on Light\n2)Turn off Light\n3)Back");
    58d8:	8d ee       	ldi	r24, 0xED	; 237
    58da:	92 e0       	ldi	r25, 0x02	; 2
    58dc:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
	LCD_WriteString("1)Turn on");
    58e0:	85 e1       	ldi	r24, 0x15	; 21
    58e2:	93 e0       	ldi	r25, 0x03	; 3
    58e4:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LCD_WriteString>
	LCD_goto(0,1);
    58e8:	80 e0       	ldi	r24, 0x00	; 0
    58ea:	61 e0       	ldi	r22, 0x01	; 1
    58ec:	0e 94 13 13 	call	0x2626	; 0x2626 <LCD_goto>
	LCD_WriteString("2)Turn off");
    58f0:	8f e1       	ldi	r24, 0x1F	; 31
    58f2:	93 e0       	ldi	r25, 0x03	; 3
    58f4:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LCD_WriteString>
    58f8:	1e c0       	rjmp	.+60     	; 0x5936 <User_Light_Control+0x76>
	while(User_Light_ExitFlag==0)
	{
		User_Ligh_Input=UART_u8Receiver();
    58fa:	0e 94 a3 1a 	call	0x3546	; 0x3546 <UART_u8Receiver>
    58fe:	8a 83       	std	Y+2, r24	; 0x02
		ASCII_Conversion(&User_Ligh_Input);
    5900:	ce 01       	movw	r24, r28
    5902:	02 96       	adiw	r24, 0x02	; 2
    5904:	0e 94 b7 1c 	call	0x396e	; 0x396e <ASCII_Conversion>
		if(User_Ligh_Input==1)
    5908:	8a 81       	ldd	r24, Y+2	; 0x02
    590a:	81 30       	cpi	r24, 0x01	; 1
    590c:	31 f4       	brne	.+12     	; 0x591a <User_Light_Control+0x5a>
		{
			DIO_u8SetPinVal(DIO_PORTC,DIO_PIN7,DIO_HIGH);
    590e:	82 e0       	ldi	r24, 0x02	; 2
    5910:	67 e0       	ldi	r22, 0x07	; 7
    5912:	41 e0       	ldi	r20, 0x01	; 1
    5914:	0e 94 c2 0a 	call	0x1584	; 0x1584 <DIO_u8SetPinVal>
    5918:	0e c0       	rjmp	.+28     	; 0x5936 <User_Light_Control+0x76>
		}
		else if(User_Ligh_Input==2)
    591a:	8a 81       	ldd	r24, Y+2	; 0x02
    591c:	82 30       	cpi	r24, 0x02	; 2
    591e:	31 f4       	brne	.+12     	; 0x592c <User_Light_Control+0x6c>
		{
			DIO_u8SetPinVal(DIO_PORTC,DIO_PIN7,DIO_LOW);
    5920:	82 e0       	ldi	r24, 0x02	; 2
    5922:	67 e0       	ldi	r22, 0x07	; 7
    5924:	40 e0       	ldi	r20, 0x00	; 0
    5926:	0e 94 c2 0a 	call	0x1584	; 0x1584 <DIO_u8SetPinVal>
    592a:	05 c0       	rjmp	.+10     	; 0x5936 <User_Light_Control+0x76>
		}
		else if(User_Ligh_Input==3)
    592c:	8a 81       	ldd	r24, Y+2	; 0x02
    592e:	83 30       	cpi	r24, 0x03	; 3
    5930:	11 f4       	brne	.+4      	; 0x5936 <User_Light_Control+0x76>
		{
			User_Light_ExitFlag=1;
    5932:	81 e0       	ldi	r24, 0x01	; 1
    5934:	89 83       	std	Y+1, r24	; 0x01
	Bluetooth_SendString("\n--------------------\n");
	Bluetooth_SendString("1)Turn on Light\n2)Turn off Light\n3)Back");
	LCD_WriteString("1)Turn on");
	LCD_goto(0,1);
	LCD_WriteString("2)Turn off");
	while(User_Light_ExitFlag==0)
    5936:	89 81       	ldd	r24, Y+1	; 0x01
    5938:	88 23       	and	r24, r24
    593a:	f9 f2       	breq	.-66     	; 0x58fa <User_Light_Control+0x3a>
		{
			User_Light_ExitFlag=1;
		}
	}

}
    593c:	0f 90       	pop	r0
    593e:	0f 90       	pop	r0
    5940:	cf 91       	pop	r28
    5942:	df 91       	pop	r29
    5944:	08 95       	ret

00005946 <User_AC_Control>:
void User_AC_Control(void)
{
    5946:	df 93       	push	r29
    5948:	cf 93       	push	r28
    594a:	cd b7       	in	r28, 0x3d	; 61
    594c:	de b7       	in	r29, 0x3e	; 62
    594e:	e4 97       	sbiw	r28, 0x34	; 52
    5950:	0f b6       	in	r0, 0x3f	; 63
    5952:	f8 94       	cli
    5954:	de bf       	out	0x3e, r29	; 62
    5956:	0f be       	out	0x3f, r0	; 63
    5958:	cd bf       	out	0x3d, r28	; 61
	static u8 User_AC_State_Flag=0;/*0 Off - 1 On*/
	u8 User_AC_Exit_Flag=0;
    595a:	1d a6       	std	Y+45, r1	; 0x2d
	u8 User_AC_Input,User_Edit_Temp=23,User_Edit_Looper=0;
    595c:	87 e1       	ldi	r24, 0x17	; 23
    595e:	8c a7       	std	Y+44, r24	; 0x2c
    5960:	1b a6       	std	Y+43, r1	; 0x2b
    5962:	e4 c2       	rjmp	.+1480   	; 0x5f2c <User_AC_Control+0x5e6>
	u16 User_Ac_Current_Temp;
	while(User_AC_Exit_Flag==0)
	{
		if (User_AC_State_Flag==0)//ac is off flag = 0
    5964:	80 91 46 05 	lds	r24, 0x0546
    5968:	88 23       	and	r24, r24
    596a:	09 f0       	breq	.+2      	; 0x596e <User_AC_Control+0x28>
    596c:	c6 c0       	rjmp	.+396    	; 0x5afa <User_AC_Control+0x1b4>
		{
			LCD_CLR();
    596e:	0e 94 2b 13 	call	0x2656	; 0x2656 <LCD_CLR>
			Bluetooth_SendString("\n--------------------\n");
    5972:	80 e6       	ldi	r24, 0x60	; 96
    5974:	90 e0       	ldi	r25, 0x00	; 0
    5976:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
			Bluetooth_SendString("1)Turn on AC\n2)Back");
    597a:	8a e2       	ldi	r24, 0x2A	; 42
    597c:	93 e0       	ldi	r25, 0x03	; 3
    597e:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
			LCD_WriteString("1)Turn on AC");
    5982:	8e e3       	ldi	r24, 0x3E	; 62
    5984:	93 e0       	ldi	r25, 0x03	; 3
    5986:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LCD_WriteString>
			LCD_goto(0,1);
    598a:	80 e0       	ldi	r24, 0x00	; 0
    598c:	61 e0       	ldi	r22, 0x01	; 1
    598e:	0e 94 13 13 	call	0x2626	; 0x2626 <LCD_goto>
			LCD_WriteString("2)Back");
    5992:	8b e4       	ldi	r24, 0x4B	; 75
    5994:	93 e0       	ldi	r25, 0x03	; 3
    5996:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LCD_WriteString>
			User_AC_Input = UART_u8Receiver();
    599a:	0e 94 a3 1a 	call	0x3546	; 0x3546 <UART_u8Receiver>
    599e:	8e a7       	std	Y+46, r24	; 0x2e
			ASCII_Conversion(&User_AC_Input);
    59a0:	ce 01       	movw	r24, r28
    59a2:	8e 96       	adiw	r24, 0x2e	; 46
    59a4:	0e 94 b7 1c 	call	0x396e	; 0x396e <ASCII_Conversion>
			switch(User_AC_Input)
    59a8:	8e a5       	ldd	r24, Y+46	; 0x2e
    59aa:	28 2f       	mov	r18, r24
    59ac:	30 e0       	ldi	r19, 0x00	; 0
    59ae:	3c ab       	std	Y+52, r19	; 0x34
    59b0:	2b ab       	std	Y+51, r18	; 0x33
    59b2:	8b a9       	ldd	r24, Y+51	; 0x33
    59b4:	9c a9       	ldd	r25, Y+52	; 0x34
    59b6:	81 30       	cpi	r24, 0x01	; 1
    59b8:	91 05       	cpc	r25, r1
    59ba:	39 f0       	breq	.+14     	; 0x59ca <User_AC_Control+0x84>
    59bc:	2b a9       	ldd	r18, Y+51	; 0x33
    59be:	3c a9       	ldd	r19, Y+52	; 0x34
    59c0:	22 30       	cpi	r18, 0x02	; 2
    59c2:	31 05       	cpc	r19, r1
    59c4:	09 f4       	brne	.+2      	; 0x59c8 <User_AC_Control+0x82>
    59c6:	96 c0       	rjmp	.+300    	; 0x5af4 <User_AC_Control+0x1ae>
    59c8:	b1 c2       	rjmp	.+1378   	; 0x5f2c <User_AC_Control+0x5e6>
			{
				case 1:LCD_CLR();
    59ca:	0e 94 2b 13 	call	0x2656	; 0x2656 <LCD_CLR>
					   ADC_Init();
    59ce:	0e 94 b9 05 	call	0xb72	; 0xb72 <ADC_Init>
					   Bluetooth_SendString("\n--------------------\n");
    59d2:	80 e6       	ldi	r24, 0x60	; 96
    59d4:	90 e0       	ldi	r25, 0x00	; 0
    59d6:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
					   Bluetooth_SendString("Room Temp:");
    59da:	82 e5       	ldi	r24, 0x52	; 82
    59dc:	93 e0       	ldi	r25, 0x03	; 3
    59de:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
					   LCD_WriteString("Room Temp:");
    59e2:	82 e5       	ldi	r24, 0x52	; 82
    59e4:	93 e0       	ldi	r25, 0x03	; 3
    59e6:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LCD_WriteString>
					   ADC_StartConversion_SingleMode(ADC_Chann0,&User_Ac_Current_Temp);
    59ea:	9e 01       	movw	r18, r28
    59ec:	21 5d       	subi	r18, 0xD1	; 209
    59ee:	3f 4f       	sbci	r19, 0xFF	; 255
    59f0:	80 e0       	ldi	r24, 0x00	; 0
    59f2:	b9 01       	movw	r22, r18
    59f4:	0e 94 12 08 	call	0x1024	; 0x1024 <ADC_StartConversion_SingleMode>
					   Bluetooth_SendNumber(User_Ac_Current_Temp);
    59f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    59fa:	98 a9       	ldd	r25, Y+48	; 0x30
    59fc:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <Bluetooth_SendNumber>
					   LCD_PrintNum(User_Ac_Current_Temp);
    5a00:	8f a5       	ldd	r24, Y+47	; 0x2f
    5a02:	98 a9       	ldd	r25, Y+48	; 0x30
    5a04:	cc 01       	movw	r24, r24
    5a06:	a0 e0       	ldi	r26, 0x00	; 0
    5a08:	b0 e0       	ldi	r27, 0x00	; 0
    5a0a:	bc 01       	movw	r22, r24
    5a0c:	cd 01       	movw	r24, r26
    5a0e:	0e 94 49 13 	call	0x2692	; 0x2692 <LCD_PrintNum>
					   Celsius_Sym();
    5a12:	0e 94 aa 33 	call	0x6754	; 0x6754 <Celsius_Sym>
					   Bluetooth_SendString("\n--------------------\n");
    5a16:	80 e6       	ldi	r24, 0x60	; 96
    5a18:	90 e0       	ldi	r25, 0x00	; 0
    5a1a:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
					   Bluetooth_SendString("Edit Temperature\n1)Increase temp\n2)Decrease temp\n3)Enter");
    5a1e:	8d e5       	ldi	r24, 0x5D	; 93
    5a20:	93 e0       	ldi	r25, 0x03	; 3
    5a22:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
    5a26:	60 c0       	rjmp	.+192    	; 0x5ae8 <User_AC_Control+0x1a2>
					   //while for edit temp until enter is pressed
					   while(User_Edit_Looper==0)
					   {
						   LCD_goto(0,1);
    5a28:	80 e0       	ldi	r24, 0x00	; 0
    5a2a:	61 e0       	ldi	r22, 0x01	; 1
    5a2c:	0e 94 13 13 	call	0x2626	; 0x2626 <LCD_goto>
							 Bluetooth_SendString("\n--------------------\n");
    5a30:	80 e6       	ldi	r24, 0x60	; 96
    5a32:	90 e0       	ldi	r25, 0x00	; 0
    5a34:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
							 Bluetooth_SendString("Desired Temp:<");
    5a38:	86 e9       	ldi	r24, 0x96	; 150
    5a3a:	93 e0       	ldi	r25, 0x03	; 3
    5a3c:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
							 Bluetooth_SendNumber(User_Edit_Temp);
    5a40:	8c a5       	ldd	r24, Y+44	; 0x2c
    5a42:	88 2f       	mov	r24, r24
    5a44:	90 e0       	ldi	r25, 0x00	; 0
    5a46:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <Bluetooth_SendNumber>
							 Bluetooth_SendString(">");
    5a4a:	85 ea       	ldi	r24, 0xA5	; 165
    5a4c:	93 e0       	ldi	r25, 0x03	; 3
    5a4e:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
						   LCD_WriteString("Edit Temp:");
    5a52:	87 ea       	ldi	r24, 0xA7	; 167
    5a54:	93 e0       	ldi	r25, 0x03	; 3
    5a56:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LCD_WriteString>
						   Left_Arrow();
    5a5a:	0e 94 a0 33 	call	0x6740	; 0x6740 <Left_Arrow>
						   LCD_PrintNum(User_Edit_Temp);
    5a5e:	8c a5       	ldd	r24, Y+44	; 0x2c
    5a60:	88 2f       	mov	r24, r24
    5a62:	90 e0       	ldi	r25, 0x00	; 0
    5a64:	a0 e0       	ldi	r26, 0x00	; 0
    5a66:	b0 e0       	ldi	r27, 0x00	; 0
    5a68:	bc 01       	movw	r22, r24
    5a6a:	cd 01       	movw	r24, r26
    5a6c:	0e 94 49 13 	call	0x2692	; 0x2692 <LCD_PrintNum>
						   Right_Arrow();
    5a70:	0e 94 96 33 	call	0x672c	; 0x672c <Right_Arrow>
						   Celsius_Sym();
    5a74:	0e 94 aa 33 	call	0x6754	; 0x6754 <Celsius_Sym>
						   User_AC_Input = UART_u8Receiver();
    5a78:	0e 94 a3 1a 	call	0x3546	; 0x3546 <UART_u8Receiver>
    5a7c:	8e a7       	std	Y+46, r24	; 0x2e
						   ASCII_Conversion(&User_AC_Input);
    5a7e:	ce 01       	movw	r24, r28
    5a80:	8e 96       	adiw	r24, 0x2e	; 46
    5a82:	0e 94 b7 1c 	call	0x396e	; 0x396e <ASCII_Conversion>
						   if(User_AC_Input==1)//-temp
    5a86:	8e a5       	ldd	r24, Y+46	; 0x2e
    5a88:	81 30       	cpi	r24, 0x01	; 1
    5a8a:	51 f4       	brne	.+20     	; 0x5aa0 <User_AC_Control+0x15a>
						   {
							   if(User_Edit_Temp<=27)
    5a8c:	8c a5       	ldd	r24, Y+44	; 0x2c
    5a8e:	8c 31       	cpi	r24, 0x1C	; 28
    5a90:	58 f5       	brcc	.+86     	; 0x5ae8 <User_AC_Control+0x1a2>
							   {
								   User_Edit_Temp++;
    5a92:	8c a5       	ldd	r24, Y+44	; 0x2c
    5a94:	8f 5f       	subi	r24, 0xFF	; 255
    5a96:	8c a7       	std	Y+44, r24	; 0x2c
								   Desired_Temp = User_Edit_Temp;
    5a98:	8c a5       	ldd	r24, Y+44	; 0x2c
    5a9a:	80 93 49 05 	sts	0x0549, r24
    5a9e:	24 c0       	rjmp	.+72     	; 0x5ae8 <User_AC_Control+0x1a2>
							   }
						   }
						   else if(User_AC_Input==2)//+temp
    5aa0:	8e a5       	ldd	r24, Y+46	; 0x2e
    5aa2:	82 30       	cpi	r24, 0x02	; 2
    5aa4:	51 f4       	brne	.+20     	; 0x5aba <User_AC_Control+0x174>
						   {
							   if(User_Edit_Temp>=18)
    5aa6:	8c a5       	ldd	r24, Y+44	; 0x2c
    5aa8:	82 31       	cpi	r24, 0x12	; 18
    5aaa:	f0 f0       	brcs	.+60     	; 0x5ae8 <User_AC_Control+0x1a2>
							   {
								   User_Edit_Temp--;
    5aac:	8c a5       	ldd	r24, Y+44	; 0x2c
    5aae:	81 50       	subi	r24, 0x01	; 1
    5ab0:	8c a7       	std	Y+44, r24	; 0x2c
								   Desired_Temp = User_Edit_Temp;
    5ab2:	8c a5       	ldd	r24, Y+44	; 0x2c
    5ab4:	80 93 49 05 	sts	0x0549, r24
    5ab8:	17 c0       	rjmp	.+46     	; 0x5ae8 <User_AC_Control+0x1a2>
							   }
						   }
						   else if(User_AC_Input==3)//enter
    5aba:	8e a5       	ldd	r24, Y+46	; 0x2e
    5abc:	83 30       	cpi	r24, 0x03	; 3
    5abe:	a1 f4       	brne	.+40     	; 0x5ae8 <User_AC_Control+0x1a2>
						   {
							   //start ADC here and Exit edit looper flag
								ADC_FreeRunningSetCallBack(User_ADC_ISR);
    5ac0:	83 ea       	ldi	r24, 0xA3	; 163
    5ac2:	9f e2       	ldi	r25, 0x2F	; 47
    5ac4:	0e 94 a3 05 	call	0xb46	; 0xb46 <ADC_FreeRunningSetCallBack>
								GI_voidGlobalIntEnable();
    5ac8:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <GI_voidGlobalIntEnable>
								ADC_Init_FreeRunning_Mode();
    5acc:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <ADC_Init_FreeRunning_Mode>
								ADC_ChannelSelect_FreeRunning_Mode(ADC_Chann0);
    5ad0:	80 e0       	ldi	r24, 0x00	; 0
    5ad2:	0e 94 ac 06 	call	0xd58	; 0xd58 <ADC_ChannelSelect_FreeRunning_Mode>
								//send isr by setcallback function
								TIMER0_Start();
    5ad6:	0e 94 0b 19 	call	0x3216	; 0x3216 <TIMER0_Start>
								ADC_Enable();
    5ada:	0e 94 2b 06 	call	0xc56	; 0xc56 <ADC_Enable>
								User_Edit_Looper = 1;
    5ade:	81 e0       	ldi	r24, 0x01	; 1
    5ae0:	8b a7       	std	Y+43, r24	; 0x2b
								User_AC_State_Flag = 1;
    5ae2:	81 e0       	ldi	r24, 0x01	; 1
    5ae4:	80 93 46 05 	sts	0x0546, r24
					   LCD_PrintNum(User_Ac_Current_Temp);
					   Celsius_Sym();
					   Bluetooth_SendString("\n--------------------\n");
					   Bluetooth_SendString("Edit Temperature\n1)Increase temp\n2)Decrease temp\n3)Enter");
					   //while for edit temp until enter is pressed
					   while(User_Edit_Looper==0)
    5ae8:	8b a5       	ldd	r24, Y+43	; 0x2b
    5aea:	88 23       	and	r24, r24
    5aec:	09 f4       	brne	.+2      	; 0x5af0 <User_AC_Control+0x1aa>
    5aee:	9c cf       	rjmp	.-200    	; 0x5a28 <User_AC_Control+0xe2>
								ADC_Enable();
								User_Edit_Looper = 1;
								User_AC_State_Flag = 1;
						   }
					   }
					   User_Edit_Looper = 0;
    5af0:	1b a6       	std	Y+43, r1	; 0x2b
    5af2:	1c c2       	rjmp	.+1080   	; 0x5f2c <User_AC_Control+0x5e6>
						break;
				case 2:User_AC_Exit_Flag=1;
    5af4:	81 e0       	ldi	r24, 0x01	; 1
    5af6:	8d a7       	std	Y+45, r24	; 0x2d
    5af8:	19 c2       	rjmp	.+1074   	; 0x5f2c <User_AC_Control+0x5e6>
			}

		}
		else//ac is on flag = 1
		{
			LCD_CLR();
    5afa:	0e 94 2b 13 	call	0x2656	; 0x2656 <LCD_CLR>
			 Bluetooth_SendString("\n--------------------\n");
    5afe:	80 e6       	ldi	r24, 0x60	; 96
    5b00:	90 e0       	ldi	r25, 0x00	; 0
    5b02:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
			 Bluetooth_SendString("1)Turn off AC\n2)Edit temp\n3)Back");
    5b06:	82 eb       	ldi	r24, 0xB2	; 178
    5b08:	93 e0       	ldi	r25, 0x03	; 3
    5b0a:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
			LCD_WriteString("1)Turn off AC");
    5b0e:	83 ed       	ldi	r24, 0xD3	; 211
    5b10:	93 e0       	ldi	r25, 0x03	; 3
    5b12:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LCD_WriteString>
			LCD_goto(0,1);
    5b16:	80 e0       	ldi	r24, 0x00	; 0
    5b18:	61 e0       	ldi	r22, 0x01	; 1
    5b1a:	0e 94 13 13 	call	0x2626	; 0x2626 <LCD_goto>
			LCD_WriteString("2)Edit    3)Back");
    5b1e:	81 ee       	ldi	r24, 0xE1	; 225
    5b20:	93 e0       	ldi	r25, 0x03	; 3
    5b22:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LCD_WriteString>
			User_AC_Input = UART_u8Receiver();
    5b26:	0e 94 a3 1a 	call	0x3546	; 0x3546 <UART_u8Receiver>
    5b2a:	8e a7       	std	Y+46, r24	; 0x2e
			ASCII_Conversion(&User_AC_Input);
    5b2c:	ce 01       	movw	r24, r28
    5b2e:	8e 96       	adiw	r24, 0x2e	; 46
    5b30:	0e 94 b7 1c 	call	0x396e	; 0x396e <ASCII_Conversion>
			switch(User_AC_Input)
    5b34:	8e a5       	ldd	r24, Y+46	; 0x2e
    5b36:	28 2f       	mov	r18, r24
    5b38:	30 e0       	ldi	r19, 0x00	; 0
    5b3a:	3a ab       	std	Y+50, r19	; 0x32
    5b3c:	29 ab       	std	Y+49, r18	; 0x31
    5b3e:	89 a9       	ldd	r24, Y+49	; 0x31
    5b40:	9a a9       	ldd	r25, Y+50	; 0x32
    5b42:	82 30       	cpi	r24, 0x02	; 2
    5b44:	91 05       	cpc	r25, r1
    5b46:	09 f4       	brne	.+2      	; 0x5b4a <User_AC_Control+0x204>
    5b48:	7a c1       	rjmp	.+756    	; 0x5e3e <User_AC_Control+0x4f8>
    5b4a:	29 a9       	ldd	r18, Y+49	; 0x31
    5b4c:	3a a9       	ldd	r19, Y+50	; 0x32
    5b4e:	23 30       	cpi	r18, 0x03	; 3
    5b50:	31 05       	cpc	r19, r1
    5b52:	09 f4       	brne	.+2      	; 0x5b56 <User_AC_Control+0x210>
    5b54:	e9 c1       	rjmp	.+978    	; 0x5f28 <User_AC_Control+0x5e2>
    5b56:	89 a9       	ldd	r24, Y+49	; 0x31
    5b58:	9a a9       	ldd	r25, Y+50	; 0x32
    5b5a:	81 30       	cpi	r24, 0x01	; 1
    5b5c:	91 05       	cpc	r25, r1
    5b5e:	09 f0       	breq	.+2      	; 0x5b62 <User_AC_Control+0x21c>
    5b60:	e5 c1       	rjmp	.+970    	; 0x5f2c <User_AC_Control+0x5e6>
    5b62:	80 e0       	ldi	r24, 0x00	; 0
    5b64:	90 e0       	ldi	r25, 0x00	; 0
    5b66:	a8 e4       	ldi	r26, 0x48	; 72
    5b68:	b2 e4       	ldi	r27, 0x42	; 66
    5b6a:	8f a3       	std	Y+39, r24	; 0x27
    5b6c:	98 a7       	std	Y+40, r25	; 0x28
    5b6e:	a9 a7       	std	Y+41, r26	; 0x29
    5b70:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5b72:	6f a1       	ldd	r22, Y+39	; 0x27
    5b74:	78 a5       	ldd	r23, Y+40	; 0x28
    5b76:	89 a5       	ldd	r24, Y+41	; 0x29
    5b78:	9a a5       	ldd	r25, Y+42	; 0x2a
    5b7a:	20 e0       	ldi	r18, 0x00	; 0
    5b7c:	30 e0       	ldi	r19, 0x00	; 0
    5b7e:	4a ef       	ldi	r20, 0xFA	; 250
    5b80:	54 e4       	ldi	r21, 0x44	; 68
    5b82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b86:	dc 01       	movw	r26, r24
    5b88:	cb 01       	movw	r24, r22
    5b8a:	8b a3       	std	Y+35, r24	; 0x23
    5b8c:	9c a3       	std	Y+36, r25	; 0x24
    5b8e:	ad a3       	std	Y+37, r26	; 0x25
    5b90:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5b92:	6b a1       	ldd	r22, Y+35	; 0x23
    5b94:	7c a1       	ldd	r23, Y+36	; 0x24
    5b96:	8d a1       	ldd	r24, Y+37	; 0x25
    5b98:	9e a1       	ldd	r25, Y+38	; 0x26
    5b9a:	20 e0       	ldi	r18, 0x00	; 0
    5b9c:	30 e0       	ldi	r19, 0x00	; 0
    5b9e:	40 e8       	ldi	r20, 0x80	; 128
    5ba0:	5f e3       	ldi	r21, 0x3F	; 63
    5ba2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5ba6:	88 23       	and	r24, r24
    5ba8:	2c f4       	brge	.+10     	; 0x5bb4 <User_AC_Control+0x26e>
		__ticks = 1;
    5baa:	81 e0       	ldi	r24, 0x01	; 1
    5bac:	90 e0       	ldi	r25, 0x00	; 0
    5bae:	9a a3       	std	Y+34, r25	; 0x22
    5bb0:	89 a3       	std	Y+33, r24	; 0x21
    5bb2:	3f c0       	rjmp	.+126    	; 0x5c32 <User_AC_Control+0x2ec>
	else if (__tmp > 65535)
    5bb4:	6b a1       	ldd	r22, Y+35	; 0x23
    5bb6:	7c a1       	ldd	r23, Y+36	; 0x24
    5bb8:	8d a1       	ldd	r24, Y+37	; 0x25
    5bba:	9e a1       	ldd	r25, Y+38	; 0x26
    5bbc:	20 e0       	ldi	r18, 0x00	; 0
    5bbe:	3f ef       	ldi	r19, 0xFF	; 255
    5bc0:	4f e7       	ldi	r20, 0x7F	; 127
    5bc2:	57 e4       	ldi	r21, 0x47	; 71
    5bc4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5bc8:	18 16       	cp	r1, r24
    5bca:	4c f5       	brge	.+82     	; 0x5c1e <User_AC_Control+0x2d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5bcc:	6f a1       	ldd	r22, Y+39	; 0x27
    5bce:	78 a5       	ldd	r23, Y+40	; 0x28
    5bd0:	89 a5       	ldd	r24, Y+41	; 0x29
    5bd2:	9a a5       	ldd	r25, Y+42	; 0x2a
    5bd4:	20 e0       	ldi	r18, 0x00	; 0
    5bd6:	30 e0       	ldi	r19, 0x00	; 0
    5bd8:	40 e2       	ldi	r20, 0x20	; 32
    5bda:	51 e4       	ldi	r21, 0x41	; 65
    5bdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5be0:	dc 01       	movw	r26, r24
    5be2:	cb 01       	movw	r24, r22
    5be4:	bc 01       	movw	r22, r24
    5be6:	cd 01       	movw	r24, r26
    5be8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5bec:	dc 01       	movw	r26, r24
    5bee:	cb 01       	movw	r24, r22
    5bf0:	9a a3       	std	Y+34, r25	; 0x22
    5bf2:	89 a3       	std	Y+33, r24	; 0x21
    5bf4:	0f c0       	rjmp	.+30     	; 0x5c14 <User_AC_Control+0x2ce>
    5bf6:	88 ec       	ldi	r24, 0xC8	; 200
    5bf8:	90 e0       	ldi	r25, 0x00	; 0
    5bfa:	98 a3       	std	Y+32, r25	; 0x20
    5bfc:	8f 8f       	std	Y+31, r24	; 0x1f
    5bfe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5c00:	98 a1       	ldd	r25, Y+32	; 0x20
    5c02:	01 97       	sbiw	r24, 0x01	; 1
    5c04:	f1 f7       	brne	.-4      	; 0x5c02 <User_AC_Control+0x2bc>
    5c06:	98 a3       	std	Y+32, r25	; 0x20
    5c08:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5c0a:	89 a1       	ldd	r24, Y+33	; 0x21
    5c0c:	9a a1       	ldd	r25, Y+34	; 0x22
    5c0e:	01 97       	sbiw	r24, 0x01	; 1
    5c10:	9a a3       	std	Y+34, r25	; 0x22
    5c12:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5c14:	89 a1       	ldd	r24, Y+33	; 0x21
    5c16:	9a a1       	ldd	r25, Y+34	; 0x22
    5c18:	00 97       	sbiw	r24, 0x00	; 0
    5c1a:	69 f7       	brne	.-38     	; 0x5bf6 <User_AC_Control+0x2b0>
    5c1c:	14 c0       	rjmp	.+40     	; 0x5c46 <User_AC_Control+0x300>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5c1e:	6b a1       	ldd	r22, Y+35	; 0x23
    5c20:	7c a1       	ldd	r23, Y+36	; 0x24
    5c22:	8d a1       	ldd	r24, Y+37	; 0x25
    5c24:	9e a1       	ldd	r25, Y+38	; 0x26
    5c26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c2a:	dc 01       	movw	r26, r24
    5c2c:	cb 01       	movw	r24, r22
    5c2e:	9a a3       	std	Y+34, r25	; 0x22
    5c30:	89 a3       	std	Y+33, r24	; 0x21
    5c32:	89 a1       	ldd	r24, Y+33	; 0x21
    5c34:	9a a1       	ldd	r25, Y+34	; 0x22
    5c36:	9e 8f       	std	Y+30, r25	; 0x1e
    5c38:	8d 8f       	std	Y+29, r24	; 0x1d
    5c3a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5c3c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5c3e:	01 97       	sbiw	r24, 0x01	; 1
    5c40:	f1 f7       	brne	.-4      	; 0x5c3e <User_AC_Control+0x2f8>
    5c42:	9e 8f       	std	Y+30, r25	; 0x1e
    5c44:	8d 8f       	std	Y+29, r24	; 0x1d
			{
			case 1:_delay_ms(50);
					ADC_Dsiable();
    5c46:	0e 94 3b 06 	call	0xc76	; 0xc76 <ADC_Dsiable>
					TIMER0_FAST_PWM_DutyCycle(0);
    5c4a:	80 e0       	ldi	r24, 0x00	; 0
    5c4c:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <TIMER0_FAST_PWM_DutyCycle>
    5c50:	80 e0       	ldi	r24, 0x00	; 0
    5c52:	90 e0       	ldi	r25, 0x00	; 0
    5c54:	a8 e4       	ldi	r26, 0x48	; 72
    5c56:	b2 e4       	ldi	r27, 0x42	; 66
    5c58:	89 8f       	std	Y+25, r24	; 0x19
    5c5a:	9a 8f       	std	Y+26, r25	; 0x1a
    5c5c:	ab 8f       	std	Y+27, r26	; 0x1b
    5c5e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5c60:	69 8d       	ldd	r22, Y+25	; 0x19
    5c62:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5c64:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5c66:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5c68:	20 e0       	ldi	r18, 0x00	; 0
    5c6a:	30 e0       	ldi	r19, 0x00	; 0
    5c6c:	4a ef       	ldi	r20, 0xFA	; 250
    5c6e:	54 e4       	ldi	r21, 0x44	; 68
    5c70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c74:	dc 01       	movw	r26, r24
    5c76:	cb 01       	movw	r24, r22
    5c78:	8d 8b       	std	Y+21, r24	; 0x15
    5c7a:	9e 8b       	std	Y+22, r25	; 0x16
    5c7c:	af 8b       	std	Y+23, r26	; 0x17
    5c7e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5c80:	6d 89       	ldd	r22, Y+21	; 0x15
    5c82:	7e 89       	ldd	r23, Y+22	; 0x16
    5c84:	8f 89       	ldd	r24, Y+23	; 0x17
    5c86:	98 8d       	ldd	r25, Y+24	; 0x18
    5c88:	20 e0       	ldi	r18, 0x00	; 0
    5c8a:	30 e0       	ldi	r19, 0x00	; 0
    5c8c:	40 e8       	ldi	r20, 0x80	; 128
    5c8e:	5f e3       	ldi	r21, 0x3F	; 63
    5c90:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5c94:	88 23       	and	r24, r24
    5c96:	2c f4       	brge	.+10     	; 0x5ca2 <User_AC_Control+0x35c>
		__ticks = 1;
    5c98:	81 e0       	ldi	r24, 0x01	; 1
    5c9a:	90 e0       	ldi	r25, 0x00	; 0
    5c9c:	9c 8b       	std	Y+20, r25	; 0x14
    5c9e:	8b 8b       	std	Y+19, r24	; 0x13
    5ca0:	3f c0       	rjmp	.+126    	; 0x5d20 <User_AC_Control+0x3da>
	else if (__tmp > 65535)
    5ca2:	6d 89       	ldd	r22, Y+21	; 0x15
    5ca4:	7e 89       	ldd	r23, Y+22	; 0x16
    5ca6:	8f 89       	ldd	r24, Y+23	; 0x17
    5ca8:	98 8d       	ldd	r25, Y+24	; 0x18
    5caa:	20 e0       	ldi	r18, 0x00	; 0
    5cac:	3f ef       	ldi	r19, 0xFF	; 255
    5cae:	4f e7       	ldi	r20, 0x7F	; 127
    5cb0:	57 e4       	ldi	r21, 0x47	; 71
    5cb2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5cb6:	18 16       	cp	r1, r24
    5cb8:	4c f5       	brge	.+82     	; 0x5d0c <User_AC_Control+0x3c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5cba:	69 8d       	ldd	r22, Y+25	; 0x19
    5cbc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5cbe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5cc0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5cc2:	20 e0       	ldi	r18, 0x00	; 0
    5cc4:	30 e0       	ldi	r19, 0x00	; 0
    5cc6:	40 e2       	ldi	r20, 0x20	; 32
    5cc8:	51 e4       	ldi	r21, 0x41	; 65
    5cca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5cce:	dc 01       	movw	r26, r24
    5cd0:	cb 01       	movw	r24, r22
    5cd2:	bc 01       	movw	r22, r24
    5cd4:	cd 01       	movw	r24, r26
    5cd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5cda:	dc 01       	movw	r26, r24
    5cdc:	cb 01       	movw	r24, r22
    5cde:	9c 8b       	std	Y+20, r25	; 0x14
    5ce0:	8b 8b       	std	Y+19, r24	; 0x13
    5ce2:	0f c0       	rjmp	.+30     	; 0x5d02 <User_AC_Control+0x3bc>
    5ce4:	88 ec       	ldi	r24, 0xC8	; 200
    5ce6:	90 e0       	ldi	r25, 0x00	; 0
    5ce8:	9a 8b       	std	Y+18, r25	; 0x12
    5cea:	89 8b       	std	Y+17, r24	; 0x11
    5cec:	89 89       	ldd	r24, Y+17	; 0x11
    5cee:	9a 89       	ldd	r25, Y+18	; 0x12
    5cf0:	01 97       	sbiw	r24, 0x01	; 1
    5cf2:	f1 f7       	brne	.-4      	; 0x5cf0 <User_AC_Control+0x3aa>
    5cf4:	9a 8b       	std	Y+18, r25	; 0x12
    5cf6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5cf8:	8b 89       	ldd	r24, Y+19	; 0x13
    5cfa:	9c 89       	ldd	r25, Y+20	; 0x14
    5cfc:	01 97       	sbiw	r24, 0x01	; 1
    5cfe:	9c 8b       	std	Y+20, r25	; 0x14
    5d00:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5d02:	8b 89       	ldd	r24, Y+19	; 0x13
    5d04:	9c 89       	ldd	r25, Y+20	; 0x14
    5d06:	00 97       	sbiw	r24, 0x00	; 0
    5d08:	69 f7       	brne	.-38     	; 0x5ce4 <User_AC_Control+0x39e>
    5d0a:	14 c0       	rjmp	.+40     	; 0x5d34 <User_AC_Control+0x3ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5d0c:	6d 89       	ldd	r22, Y+21	; 0x15
    5d0e:	7e 89       	ldd	r23, Y+22	; 0x16
    5d10:	8f 89       	ldd	r24, Y+23	; 0x17
    5d12:	98 8d       	ldd	r25, Y+24	; 0x18
    5d14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d18:	dc 01       	movw	r26, r24
    5d1a:	cb 01       	movw	r24, r22
    5d1c:	9c 8b       	std	Y+20, r25	; 0x14
    5d1e:	8b 8b       	std	Y+19, r24	; 0x13
    5d20:	8b 89       	ldd	r24, Y+19	; 0x13
    5d22:	9c 89       	ldd	r25, Y+20	; 0x14
    5d24:	98 8b       	std	Y+16, r25	; 0x10
    5d26:	8f 87       	std	Y+15, r24	; 0x0f
    5d28:	8f 85       	ldd	r24, Y+15	; 0x0f
    5d2a:	98 89       	ldd	r25, Y+16	; 0x10
    5d2c:	01 97       	sbiw	r24, 0x01	; 1
    5d2e:	f1 f7       	brne	.-4      	; 0x5d2c <User_AC_Control+0x3e6>
    5d30:	98 8b       	std	Y+16, r25	; 0x10
    5d32:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(50);
				   TIMER0_Stop();
    5d34:	0e 94 27 19 	call	0x324e	; 0x324e <TIMER0_Stop>
				   LCD_CLR();
    5d38:	0e 94 2b 13 	call	0x2656	; 0x2656 <LCD_CLR>
					 Bluetooth_SendString("\n--------------------\n");
    5d3c:	80 e6       	ldi	r24, 0x60	; 96
    5d3e:	90 e0       	ldi	r25, 0x00	; 0
    5d40:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
					 Bluetooth_SendString("AC Turned Off");
    5d44:	82 ef       	ldi	r24, 0xF2	; 242
    5d46:	93 e0       	ldi	r25, 0x03	; 3
    5d48:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
				   LCD_WriteString("AC Turned Off");
    5d4c:	82 ef       	ldi	r24, 0xF2	; 242
    5d4e:	93 e0       	ldi	r25, 0x03	; 3
    5d50:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LCD_WriteString>
    5d54:	80 e0       	ldi	r24, 0x00	; 0
    5d56:	90 e0       	ldi	r25, 0x00	; 0
    5d58:	aa e7       	ldi	r26, 0x7A	; 122
    5d5a:	b4 e4       	ldi	r27, 0x44	; 68
    5d5c:	8b 87       	std	Y+11, r24	; 0x0b
    5d5e:	9c 87       	std	Y+12, r25	; 0x0c
    5d60:	ad 87       	std	Y+13, r26	; 0x0d
    5d62:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5d64:	6b 85       	ldd	r22, Y+11	; 0x0b
    5d66:	7c 85       	ldd	r23, Y+12	; 0x0c
    5d68:	8d 85       	ldd	r24, Y+13	; 0x0d
    5d6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    5d6c:	20 e0       	ldi	r18, 0x00	; 0
    5d6e:	30 e0       	ldi	r19, 0x00	; 0
    5d70:	4a ef       	ldi	r20, 0xFA	; 250
    5d72:	54 e4       	ldi	r21, 0x44	; 68
    5d74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5d78:	dc 01       	movw	r26, r24
    5d7a:	cb 01       	movw	r24, r22
    5d7c:	8f 83       	std	Y+7, r24	; 0x07
    5d7e:	98 87       	std	Y+8, r25	; 0x08
    5d80:	a9 87       	std	Y+9, r26	; 0x09
    5d82:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5d84:	6f 81       	ldd	r22, Y+7	; 0x07
    5d86:	78 85       	ldd	r23, Y+8	; 0x08
    5d88:	89 85       	ldd	r24, Y+9	; 0x09
    5d8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d8c:	20 e0       	ldi	r18, 0x00	; 0
    5d8e:	30 e0       	ldi	r19, 0x00	; 0
    5d90:	40 e8       	ldi	r20, 0x80	; 128
    5d92:	5f e3       	ldi	r21, 0x3F	; 63
    5d94:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5d98:	88 23       	and	r24, r24
    5d9a:	2c f4       	brge	.+10     	; 0x5da6 <User_AC_Control+0x460>
		__ticks = 1;
    5d9c:	81 e0       	ldi	r24, 0x01	; 1
    5d9e:	90 e0       	ldi	r25, 0x00	; 0
    5da0:	9e 83       	std	Y+6, r25	; 0x06
    5da2:	8d 83       	std	Y+5, r24	; 0x05
    5da4:	3f c0       	rjmp	.+126    	; 0x5e24 <User_AC_Control+0x4de>
	else if (__tmp > 65535)
    5da6:	6f 81       	ldd	r22, Y+7	; 0x07
    5da8:	78 85       	ldd	r23, Y+8	; 0x08
    5daa:	89 85       	ldd	r24, Y+9	; 0x09
    5dac:	9a 85       	ldd	r25, Y+10	; 0x0a
    5dae:	20 e0       	ldi	r18, 0x00	; 0
    5db0:	3f ef       	ldi	r19, 0xFF	; 255
    5db2:	4f e7       	ldi	r20, 0x7F	; 127
    5db4:	57 e4       	ldi	r21, 0x47	; 71
    5db6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5dba:	18 16       	cp	r1, r24
    5dbc:	4c f5       	brge	.+82     	; 0x5e10 <User_AC_Control+0x4ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5dbe:	6b 85       	ldd	r22, Y+11	; 0x0b
    5dc0:	7c 85       	ldd	r23, Y+12	; 0x0c
    5dc2:	8d 85       	ldd	r24, Y+13	; 0x0d
    5dc4:	9e 85       	ldd	r25, Y+14	; 0x0e
    5dc6:	20 e0       	ldi	r18, 0x00	; 0
    5dc8:	30 e0       	ldi	r19, 0x00	; 0
    5dca:	40 e2       	ldi	r20, 0x20	; 32
    5dcc:	51 e4       	ldi	r21, 0x41	; 65
    5dce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5dd2:	dc 01       	movw	r26, r24
    5dd4:	cb 01       	movw	r24, r22
    5dd6:	bc 01       	movw	r22, r24
    5dd8:	cd 01       	movw	r24, r26
    5dda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5dde:	dc 01       	movw	r26, r24
    5de0:	cb 01       	movw	r24, r22
    5de2:	9e 83       	std	Y+6, r25	; 0x06
    5de4:	8d 83       	std	Y+5, r24	; 0x05
    5de6:	0f c0       	rjmp	.+30     	; 0x5e06 <User_AC_Control+0x4c0>
    5de8:	88 ec       	ldi	r24, 0xC8	; 200
    5dea:	90 e0       	ldi	r25, 0x00	; 0
    5dec:	9c 83       	std	Y+4, r25	; 0x04
    5dee:	8b 83       	std	Y+3, r24	; 0x03
    5df0:	8b 81       	ldd	r24, Y+3	; 0x03
    5df2:	9c 81       	ldd	r25, Y+4	; 0x04
    5df4:	01 97       	sbiw	r24, 0x01	; 1
    5df6:	f1 f7       	brne	.-4      	; 0x5df4 <User_AC_Control+0x4ae>
    5df8:	9c 83       	std	Y+4, r25	; 0x04
    5dfa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5dfc:	8d 81       	ldd	r24, Y+5	; 0x05
    5dfe:	9e 81       	ldd	r25, Y+6	; 0x06
    5e00:	01 97       	sbiw	r24, 0x01	; 1
    5e02:	9e 83       	std	Y+6, r25	; 0x06
    5e04:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5e06:	8d 81       	ldd	r24, Y+5	; 0x05
    5e08:	9e 81       	ldd	r25, Y+6	; 0x06
    5e0a:	00 97       	sbiw	r24, 0x00	; 0
    5e0c:	69 f7       	brne	.-38     	; 0x5de8 <User_AC_Control+0x4a2>
    5e0e:	14 c0       	rjmp	.+40     	; 0x5e38 <User_AC_Control+0x4f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5e10:	6f 81       	ldd	r22, Y+7	; 0x07
    5e12:	78 85       	ldd	r23, Y+8	; 0x08
    5e14:	89 85       	ldd	r24, Y+9	; 0x09
    5e16:	9a 85       	ldd	r25, Y+10	; 0x0a
    5e18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5e1c:	dc 01       	movw	r26, r24
    5e1e:	cb 01       	movw	r24, r22
    5e20:	9e 83       	std	Y+6, r25	; 0x06
    5e22:	8d 83       	std	Y+5, r24	; 0x05
    5e24:	8d 81       	ldd	r24, Y+5	; 0x05
    5e26:	9e 81       	ldd	r25, Y+6	; 0x06
    5e28:	9a 83       	std	Y+2, r25	; 0x02
    5e2a:	89 83       	std	Y+1, r24	; 0x01
    5e2c:	89 81       	ldd	r24, Y+1	; 0x01
    5e2e:	9a 81       	ldd	r25, Y+2	; 0x02
    5e30:	01 97       	sbiw	r24, 0x01	; 1
    5e32:	f1 f7       	brne	.-4      	; 0x5e30 <User_AC_Control+0x4ea>
    5e34:	9a 83       	std	Y+2, r25	; 0x02
    5e36:	89 83       	std	Y+1, r24	; 0x01
				   _delay_ms(1000);
				   User_AC_State_Flag = 0;
    5e38:	10 92 46 05 	sts	0x0546, r1
    5e3c:	77 c0       	rjmp	.+238    	; 0x5f2c <User_AC_Control+0x5e6>
				break;
			case 2:LCD_CLR();
    5e3e:	0e 94 2b 13 	call	0x2656	; 0x2656 <LCD_CLR>
				   Bluetooth_SendString("\n--------------------\n");
    5e42:	80 e6       	ldi	r24, 0x60	; 96
    5e44:	90 e0       	ldi	r25, 0x00	; 0
    5e46:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
				   Bluetooth_SendString("Room Temp:");
    5e4a:	82 e5       	ldi	r24, 0x52	; 82
    5e4c:	93 e0       	ldi	r25, 0x03	; 3
    5e4e:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
				   Bluetooth_SendNumber(Temperature);
    5e52:	80 91 48 05 	lds	r24, 0x0548
    5e56:	88 2f       	mov	r24, r24
    5e58:	90 e0       	ldi	r25, 0x00	; 0
    5e5a:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <Bluetooth_SendNumber>
			       LCD_WriteString("Room Temp:");
    5e5e:	82 e5       	ldi	r24, 0x52	; 82
    5e60:	93 e0       	ldi	r25, 0x03	; 3
    5e62:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LCD_WriteString>
			       LCD_PrintNum(Temperature);
    5e66:	80 91 48 05 	lds	r24, 0x0548
    5e6a:	88 2f       	mov	r24, r24
    5e6c:	90 e0       	ldi	r25, 0x00	; 0
    5e6e:	a0 e0       	ldi	r26, 0x00	; 0
    5e70:	b0 e0       	ldi	r27, 0x00	; 0
    5e72:	bc 01       	movw	r22, r24
    5e74:	cd 01       	movw	r24, r26
    5e76:	0e 94 49 13 	call	0x2692	; 0x2692 <LCD_PrintNum>
			       Celsius_Sym();
    5e7a:	0e 94 aa 33 	call	0x6754	; 0x6754 <Celsius_Sym>
				   Bluetooth_SendString("\n--------------------\n");
    5e7e:	80 e6       	ldi	r24, 0x60	; 96
    5e80:	90 e0       	ldi	r25, 0x00	; 0
    5e82:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
				   Bluetooth_SendString("Edit temp\n1)Increase temp\n2)Decrease temp\n3)Enter");
    5e86:	80 e0       	ldi	r24, 0x00	; 0
    5e88:	94 e0       	ldi	r25, 0x04	; 4
    5e8a:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
    5e8e:	46 c0       	rjmp	.+140    	; 0x5f1c <User_AC_Control+0x5d6>
				   while(User_Edit_Looper==0)
				   {
					   LCD_goto(0,1);
    5e90:	80 e0       	ldi	r24, 0x00	; 0
    5e92:	61 e0       	ldi	r22, 0x01	; 1
    5e94:	0e 94 13 13 	call	0x2626	; 0x2626 <LCD_goto>
					   LCD_WriteString("Edit Temp:<");
    5e98:	82 e3       	ldi	r24, 0x32	; 50
    5e9a:	94 e0       	ldi	r25, 0x04	; 4
    5e9c:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LCD_WriteString>
					   Bluetooth_SendNumber(User_Edit_Temp);
    5ea0:	8c a5       	ldd	r24, Y+44	; 0x2c
    5ea2:	88 2f       	mov	r24, r24
    5ea4:	90 e0       	ldi	r25, 0x00	; 0
    5ea6:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <Bluetooth_SendNumber>
					   Bluetooth_SendString(">");
    5eaa:	85 ea       	ldi	r24, 0xA5	; 165
    5eac:	93 e0       	ldi	r25, 0x03	; 3
    5eae:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
					   Left_Arrow();
    5eb2:	0e 94 a0 33 	call	0x6740	; 0x6740 <Left_Arrow>
					   LCD_PrintNum(User_Edit_Temp);
    5eb6:	8c a5       	ldd	r24, Y+44	; 0x2c
    5eb8:	88 2f       	mov	r24, r24
    5eba:	90 e0       	ldi	r25, 0x00	; 0
    5ebc:	a0 e0       	ldi	r26, 0x00	; 0
    5ebe:	b0 e0       	ldi	r27, 0x00	; 0
    5ec0:	bc 01       	movw	r22, r24
    5ec2:	cd 01       	movw	r24, r26
    5ec4:	0e 94 49 13 	call	0x2692	; 0x2692 <LCD_PrintNum>
					   Right_Arrow();
    5ec8:	0e 94 96 33 	call	0x672c	; 0x672c <Right_Arrow>
					   Celsius_Sym();
    5ecc:	0e 94 aa 33 	call	0x6754	; 0x6754 <Celsius_Sym>
					   User_AC_Input = UART_u8Receiver();
    5ed0:	0e 94 a3 1a 	call	0x3546	; 0x3546 <UART_u8Receiver>
    5ed4:	8e a7       	std	Y+46, r24	; 0x2e
					   ASCII_Conversion(&User_AC_Input);
    5ed6:	ce 01       	movw	r24, r28
    5ed8:	8e 96       	adiw	r24, 0x2e	; 46
    5eda:	0e 94 b7 1c 	call	0x396e	; 0x396e <ASCII_Conversion>
					   if(User_AC_Input==1)//-temp
    5ede:	8e a5       	ldd	r24, Y+46	; 0x2e
    5ee0:	81 30       	cpi	r24, 0x01	; 1
    5ee2:	51 f4       	brne	.+20     	; 0x5ef8 <User_AC_Control+0x5b2>
					   {
						   if(User_Edit_Temp<=27)
    5ee4:	8c a5       	ldd	r24, Y+44	; 0x2c
    5ee6:	8c 31       	cpi	r24, 0x1C	; 28
    5ee8:	c8 f4       	brcc	.+50     	; 0x5f1c <User_AC_Control+0x5d6>
						   {
							   User_Edit_Temp++;
    5eea:	8c a5       	ldd	r24, Y+44	; 0x2c
    5eec:	8f 5f       	subi	r24, 0xFF	; 255
    5eee:	8c a7       	std	Y+44, r24	; 0x2c
							   Desired_Temp = User_Edit_Temp;
    5ef0:	8c a5       	ldd	r24, Y+44	; 0x2c
    5ef2:	80 93 49 05 	sts	0x0549, r24
    5ef6:	12 c0       	rjmp	.+36     	; 0x5f1c <User_AC_Control+0x5d6>
						   }
					   }
					   else if(User_AC_Input==2)//+temp
    5ef8:	8e a5       	ldd	r24, Y+46	; 0x2e
    5efa:	82 30       	cpi	r24, 0x02	; 2
    5efc:	51 f4       	brne	.+20     	; 0x5f12 <User_AC_Control+0x5cc>
					   {
						   if(User_Edit_Temp>=18)
    5efe:	8c a5       	ldd	r24, Y+44	; 0x2c
    5f00:	82 31       	cpi	r24, 0x12	; 18
    5f02:	60 f0       	brcs	.+24     	; 0x5f1c <User_AC_Control+0x5d6>
						   {
							   User_Edit_Temp--;
    5f04:	8c a5       	ldd	r24, Y+44	; 0x2c
    5f06:	81 50       	subi	r24, 0x01	; 1
    5f08:	8c a7       	std	Y+44, r24	; 0x2c
							   Desired_Temp = User_Edit_Temp;
    5f0a:	8c a5       	ldd	r24, Y+44	; 0x2c
    5f0c:	80 93 49 05 	sts	0x0549, r24
    5f10:	05 c0       	rjmp	.+10     	; 0x5f1c <User_AC_Control+0x5d6>
						   }
					   }
					   else if(User_AC_Input==3)//enter
    5f12:	8e a5       	ldd	r24, Y+46	; 0x2e
    5f14:	83 30       	cpi	r24, 0x03	; 3
    5f16:	11 f4       	brne	.+4      	; 0x5f1c <User_AC_Control+0x5d6>
//							ADC_ChannelSelect_FreeRunning_Mode(ADC_Chann0);
							//send isr by setcallback function
//							ADC_FreeRunningSetCallBack(User_ADC_ISR);
//							ADC_Enable();
//							TIMER0_Start();
							User_Edit_Looper = 1;
    5f18:	81 e0       	ldi	r24, 0x01	; 1
    5f1a:	8b a7       	std	Y+43, r24	; 0x2b
			       LCD_WriteString("Room Temp:");
			       LCD_PrintNum(Temperature);
			       Celsius_Sym();
				   Bluetooth_SendString("\n--------------------\n");
				   Bluetooth_SendString("Edit temp\n1)Increase temp\n2)Decrease temp\n3)Enter");
				   while(User_Edit_Looper==0)
    5f1c:	8b a5       	ldd	r24, Y+43	; 0x2b
    5f1e:	88 23       	and	r24, r24
    5f20:	09 f4       	brne	.+2      	; 0x5f24 <User_AC_Control+0x5de>
    5f22:	b6 cf       	rjmp	.-148    	; 0x5e90 <User_AC_Control+0x54a>
//							TIMER0_Start();
							User_Edit_Looper = 1;
//							User_AC_State_Flag = 1;
					   }
				   }
				   User_Edit_Looper = 0;
    5f24:	1b a6       	std	Y+43, r1	; 0x2b
    5f26:	02 c0       	rjmp	.+4      	; 0x5f2c <User_AC_Control+0x5e6>
				break;
			case 3:User_AC_Exit_Flag=1;
    5f28:	81 e0       	ldi	r24, 0x01	; 1
    5f2a:	8d a7       	std	Y+45, r24	; 0x2d
{
	static u8 User_AC_State_Flag=0;/*0 Off - 1 On*/
	u8 User_AC_Exit_Flag=0;
	u8 User_AC_Input,User_Edit_Temp=23,User_Edit_Looper=0;
	u16 User_Ac_Current_Temp;
	while(User_AC_Exit_Flag==0)
    5f2c:	8d a5       	ldd	r24, Y+45	; 0x2d
    5f2e:	88 23       	and	r24, r24
    5f30:	09 f4       	brne	.+2      	; 0x5f34 <User_AC_Control+0x5ee>
    5f32:	18 cd       	rjmp	.-1488   	; 0x5964 <User_AC_Control+0x1e>
			case 3:User_AC_Exit_Flag=1;
				break;
			}
		}
	}
}
    5f34:	e4 96       	adiw	r28, 0x34	; 52
    5f36:	0f b6       	in	r0, 0x3f	; 63
    5f38:	f8 94       	cli
    5f3a:	de bf       	out	0x3e, r29	; 62
    5f3c:	0f be       	out	0x3f, r0	; 63
    5f3e:	cd bf       	out	0x3d, r28	; 61
    5f40:	cf 91       	pop	r28
    5f42:	df 91       	pop	r29
    5f44:	08 95       	ret

00005f46 <User_ADC_ISR>:
void User_ADC_ISR(u16 temp)
{
    5f46:	df 93       	push	r29
    5f48:	cf 93       	push	r28
    5f4a:	00 d0       	rcall	.+0      	; 0x5f4c <User_ADC_ISR+0x6>
    5f4c:	cd b7       	in	r28, 0x3d	; 61
    5f4e:	de b7       	in	r29, 0x3e	; 62
    5f50:	9a 83       	std	Y+2, r25	; 0x02
    5f52:	89 83       	std	Y+1, r24	; 0x01
//	static u8 Temperature_Prev=0;

//	temp=temp*19;//Val=PTR*5/256  5-> ref volt and 5/256 is the step
//	temp=(temp/10);
//	Temperature = temp;
	Temperature = 25;
    5f54:	89 e1       	ldi	r24, 0x19	; 25
    5f56:	80 93 48 05 	sts	0x0548, r24
//	if(Temperature!=Temperature_Prev)
//	{
		if((Temperature-Desired_Temp)==0)
    5f5a:	90 91 48 05 	lds	r25, 0x0548
    5f5e:	80 91 49 05 	lds	r24, 0x0549
    5f62:	98 17       	cp	r25, r24
    5f64:	21 f4       	brne	.+8      	; 0x5f6e <User_ADC_ISR+0x28>
		{
			TIMER0_FAST_PWM_DutyCycle(0);//el moshkla kant hna 3shan bya5od w2t fel casting lel float
    5f66:	80 e0       	ldi	r24, 0x00	; 0
    5f68:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <TIMER0_FAST_PWM_DutyCycle>
    5f6c:	25 c0       	rjmp	.+74     	; 0x5fb8 <User_ADC_ISR+0x72>
		}
		else if((Temperature-Desired_Temp)>3)
    5f6e:	80 91 48 05 	lds	r24, 0x0548
    5f72:	28 2f       	mov	r18, r24
    5f74:	30 e0       	ldi	r19, 0x00	; 0
    5f76:	80 91 49 05 	lds	r24, 0x0549
    5f7a:	88 2f       	mov	r24, r24
    5f7c:	90 e0       	ldi	r25, 0x00	; 0
    5f7e:	a9 01       	movw	r20, r18
    5f80:	48 1b       	sub	r20, r24
    5f82:	59 0b       	sbc	r21, r25
    5f84:	ca 01       	movw	r24, r20
    5f86:	84 30       	cpi	r24, 0x04	; 4
    5f88:	91 05       	cpc	r25, r1
    5f8a:	24 f0       	brlt	.+8      	; 0x5f94 <User_ADC_ISR+0x4e>
		{
			TIMER0_FAST_PWM_DutyCycle(100);
    5f8c:	84 e6       	ldi	r24, 0x64	; 100
    5f8e:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <TIMER0_FAST_PWM_DutyCycle>
    5f92:	12 c0       	rjmp	.+36     	; 0x5fb8 <User_ADC_ISR+0x72>
		}
		else if((Temperature-Desired_Temp)<=3)
    5f94:	80 91 48 05 	lds	r24, 0x0548
    5f98:	28 2f       	mov	r18, r24
    5f9a:	30 e0       	ldi	r19, 0x00	; 0
    5f9c:	80 91 49 05 	lds	r24, 0x0549
    5fa0:	88 2f       	mov	r24, r24
    5fa2:	90 e0       	ldi	r25, 0x00	; 0
    5fa4:	a9 01       	movw	r20, r18
    5fa6:	48 1b       	sub	r20, r24
    5fa8:	59 0b       	sbc	r21, r25
    5faa:	ca 01       	movw	r24, r20
    5fac:	84 30       	cpi	r24, 0x04	; 4
    5fae:	91 05       	cpc	r25, r1
    5fb0:	1c f4       	brge	.+6      	; 0x5fb8 <User_ADC_ISR+0x72>
		{
			TIMER0_FAST_PWM_DutyCycle(50);
    5fb2:	82 e3       	ldi	r24, 0x32	; 50
    5fb4:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <TIMER0_FAST_PWM_DutyCycle>
		}
//	}
//	Temperature_Prev = Temperature;
}
    5fb8:	0f 90       	pop	r0
    5fba:	0f 90       	pop	r0
    5fbc:	cf 91       	pop	r28
    5fbe:	df 91       	pop	r29
    5fc0:	08 95       	ret

00005fc2 <Recovering_Addresses_Location>:
void Recovering_Addresses_Location(void)
{
    5fc2:	0f 93       	push	r16
    5fc4:	1f 93       	push	r17
    5fc6:	df 93       	push	r29
    5fc8:	cf 93       	push	r28
    5fca:	0f 92       	push	r0
    5fcc:	cd b7       	in	r28, 0x3d	; 61
    5fce:	de b7       	in	r29, 0x3e	; 62
	u8 i;
	for(i=1;i<11;i++)
    5fd0:	81 e0       	ldi	r24, 0x01	; 1
    5fd2:	89 83       	std	Y+1, r24	; 0x01
    5fd4:	12 c0       	rjmp	.+36     	; 0x5ffa <Recovering_Addresses_Location+0x38>
	{
		Array_Of_Addresses_Location[i-1]=eeprom_read_byte(i);
    5fd6:	89 81       	ldd	r24, Y+1	; 0x01
    5fd8:	88 2f       	mov	r24, r24
    5fda:	90 e0       	ldi	r25, 0x00	; 0
    5fdc:	8c 01       	movw	r16, r24
    5fde:	01 50       	subi	r16, 0x01	; 1
    5fe0:	10 40       	sbci	r17, 0x00	; 0
    5fe2:	89 81       	ldd	r24, Y+1	; 0x01
    5fe4:	88 2f       	mov	r24, r24
    5fe6:	90 e0       	ldi	r25, 0x00	; 0
    5fe8:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <eeprom_read_byte>
    5fec:	f8 01       	movw	r30, r16
    5fee:	ee 5c       	subi	r30, 0xCE	; 206
    5ff0:	fa 4f       	sbci	r31, 0xFA	; 250
    5ff2:	80 83       	st	Z, r24
//	Temperature_Prev = Temperature;
}
void Recovering_Addresses_Location(void)
{
	u8 i;
	for(i=1;i<11;i++)
    5ff4:	89 81       	ldd	r24, Y+1	; 0x01
    5ff6:	8f 5f       	subi	r24, 0xFF	; 255
    5ff8:	89 83       	std	Y+1, r24	; 0x01
    5ffa:	89 81       	ldd	r24, Y+1	; 0x01
    5ffc:	8b 30       	cpi	r24, 0x0B	; 11
    5ffe:	58 f3       	brcs	.-42     	; 0x5fd6 <Recovering_Addresses_Location+0x14>
	{
		Array_Of_Addresses_Location[i-1]=eeprom_read_byte(i);
	}
}
    6000:	0f 90       	pop	r0
    6002:	cf 91       	pop	r28
    6004:	df 91       	pop	r29
    6006:	1f 91       	pop	r17
    6008:	0f 91       	pop	r16
    600a:	08 95       	ret

0000600c <Recovering_Users_Status>:

void Recovering_Users_Status(void)
{
    600c:	0f 93       	push	r16
    600e:	1f 93       	push	r17
    6010:	df 93       	push	r29
    6012:	cf 93       	push	r28
    6014:	0f 92       	push	r0
    6016:	cd b7       	in	r28, 0x3d	; 61
    6018:	de b7       	in	r29, 0x3e	; 62
	u8 i;
	for(i=0;i<10;i++)
    601a:	19 82       	std	Y+1, r1	; 0x01
    601c:	10 c0       	rjmp	.+32     	; 0x603e <Recovering_Users_Status+0x32>
		{
			Array_Of_User_Status[i]=eeprom_read_byte((55+i));//EEPROM location 55 to 64 for status check
    601e:	89 81       	ldd	r24, Y+1	; 0x01
    6020:	08 2f       	mov	r16, r24
    6022:	10 e0       	ldi	r17, 0x00	; 0
    6024:	89 81       	ldd	r24, Y+1	; 0x01
    6026:	88 2f       	mov	r24, r24
    6028:	90 e0       	ldi	r25, 0x00	; 0
    602a:	c7 96       	adiw	r24, 0x37	; 55
    602c:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <eeprom_read_byte>
    6030:	f8 01       	movw	r30, r16
    6032:	e4 5c       	subi	r30, 0xC4	; 196
    6034:	fa 4f       	sbci	r31, 0xFA	; 250
    6036:	80 83       	st	Z, r24
}

void Recovering_Users_Status(void)
{
	u8 i;
	for(i=0;i<10;i++)
    6038:	89 81       	ldd	r24, Y+1	; 0x01
    603a:	8f 5f       	subi	r24, 0xFF	; 255
    603c:	89 83       	std	Y+1, r24	; 0x01
    603e:	89 81       	ldd	r24, Y+1	; 0x01
    6040:	8a 30       	cpi	r24, 0x0A	; 10
    6042:	68 f3       	brcs	.-38     	; 0x601e <Recovering_Users_Status+0x12>
		{
			Array_Of_User_Status[i]=eeprom_read_byte((55+i));//EEPROM location 55 to 64 for status check
		}
}
    6044:	0f 90       	pop	r0
    6046:	cf 91       	pop	r28
    6048:	df 91       	pop	r29
    604a:	1f 91       	pop	r17
    604c:	0f 91       	pop	r16
    604e:	08 95       	ret

00006050 <Add_User>:

void Add_User(void)
{
    6050:	df 93       	push	r29
    6052:	cf 93       	push	r28
    6054:	cd b7       	in	r28, 0x3d	; 61
    6056:	de b7       	in	r29, 0x3e	; 62
    6058:	65 97       	sbiw	r28, 0x15	; 21
    605a:	0f b6       	in	r0, 0x3f	; 63
    605c:	f8 94       	cli
    605e:	de bf       	out	0x3e, r29	; 62
    6060:	0f be       	out	0x3f, r0	; 63
    6062:	cd bf       	out	0x3d, r28	; 61
	u8 User_Index,Add_User_Input,Add_User_Looper_ExitFlag=1,User_List_Full_Flag=0;
    6064:	81 e0       	ldi	r24, 0x01	; 1
    6066:	8b 8b       	std	Y+19, r24	; 0x13
    6068:	1a 8a       	std	Y+18, r1	; 0x12
	u8 User_Index_Prev_val,Add_User_Guard_Looper=0;
    606a:	18 8a       	std	Y+16, r1	; 0x10
	u8 User_Full_List_Counter=0;
    606c:	1f 86       	std	Y+15, r1	; 0x0f
	LCD_CLR();
    606e:	0e 94 2b 13 	call	0x2656	; 0x2656 <LCD_CLR>
	Bluetooth_SendString("\n--------------------\n");
    6072:	80 e6       	ldi	r24, 0x60	; 96
    6074:	90 e0       	ldi	r25, 0x00	; 0
    6076:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
	Bluetooth_SendString("1)Move to LEFT\n2)Move to RIGHT\n3)Enter\n4)Back");
    607a:	8e e3       	ldi	r24, 0x3E	; 62
    607c:	94 e0       	ldi	r25, 0x04	; 4
    607e:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
	LCD_WriteString("Available Users");
    6082:	8c e6       	ldi	r24, 0x6C	; 108
    6084:	94 e0       	ldi	r25, 0x04	; 4
    6086:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LCD_WriteString>
	LCD_goto(7,1);
    608a:	87 e0       	ldi	r24, 0x07	; 7
    608c:	61 e0       	ldi	r22, 0x01	; 1
    608e:	0e 94 13 13 	call	0x2626	; 0x2626 <LCD_goto>
	for(User_Index=0;User_Index<10;User_Index++)
    6092:	1c 8a       	std	Y+20, r1	; 0x14
    6094:	13 c0       	rjmp	.+38     	; 0x60bc <Add_User+0x6c>
	{
		if(Array_Of_User_Status[User_Index]==1)
    6096:	8c 89       	ldd	r24, Y+20	; 0x14
    6098:	88 2f       	mov	r24, r24
    609a:	90 e0       	ldi	r25, 0x00	; 0
    609c:	fc 01       	movw	r30, r24
    609e:	e4 5c       	subi	r30, 0xC4	; 196
    60a0:	fa 4f       	sbci	r31, 0xFA	; 250
    60a2:	80 81       	ld	r24, Z
    60a4:	81 30       	cpi	r24, 0x01	; 1
    60a6:	21 f4       	brne	.+8      	; 0x60b0 <Add_User+0x60>
		{
			User_Index++;//to match the switch cases (start from 1 and end at 10)
    60a8:	8c 89       	ldd	r24, Y+20	; 0x14
    60aa:	8f 5f       	subi	r24, 0xFF	; 255
    60ac:	8c 8b       	std	Y+20, r24	; 0x14
    60ae:	09 c0       	rjmp	.+18     	; 0x60c2 <Add_User+0x72>
			break;
		}
		User_Full_List_Counter++;
    60b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    60b2:	8f 5f       	subi	r24, 0xFF	; 255
    60b4:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_CLR();
	Bluetooth_SendString("\n--------------------\n");
	Bluetooth_SendString("1)Move to LEFT\n2)Move to RIGHT\n3)Enter\n4)Back");
	LCD_WriteString("Available Users");
	LCD_goto(7,1);
	for(User_Index=0;User_Index<10;User_Index++)
    60b6:	8c 89       	ldd	r24, Y+20	; 0x14
    60b8:	8f 5f       	subi	r24, 0xFF	; 255
    60ba:	8c 8b       	std	Y+20, r24	; 0x14
    60bc:	8c 89       	ldd	r24, Y+20	; 0x14
    60be:	8a 30       	cpi	r24, 0x0A	; 10
    60c0:	50 f3       	brcs	.-44     	; 0x6096 <Add_User+0x46>
			User_Index++;//to match the switch cases (start from 1 and end at 10)
			break;
		}
		User_Full_List_Counter++;
	}
	if(User_Full_List_Counter==10)
    60c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    60c4:	8a 30       	cpi	r24, 0x0A	; 10
    60c6:	09 f0       	breq	.+2      	; 0x60ca <Add_User+0x7a>
    60c8:	ea c0       	rjmp	.+468    	; 0x629e <Add_User+0x24e>
	{
		User_List_Full_Flag=1;
    60ca:	81 e0       	ldi	r24, 0x01	; 1
    60cc:	8a 8b       	std	Y+18, r24	; 0x12
    60ce:	e7 c0       	rjmp	.+462    	; 0x629e <Add_User+0x24e>
		while( (Add_User_Looper_ExitFlag==1) && (User_List_Full_Flag==0) )
		{
			/* Start Of GUARD */
			while(Add_User_Guard_Looper==0)
			{
				if( (Array_Of_User_Status[User_Index-1]!=1) && (User_List_Full_Flag!=1) )
    60d0:	8c 89       	ldd	r24, Y+20	; 0x14
    60d2:	88 2f       	mov	r24, r24
    60d4:	90 e0       	ldi	r25, 0x00	; 0
    60d6:	01 97       	sbiw	r24, 0x01	; 1
    60d8:	fc 01       	movw	r30, r24
    60da:	e4 5c       	subi	r30, 0xC4	; 196
    60dc:	fa 4f       	sbci	r31, 0xFA	; 250
    60de:	80 81       	ld	r24, Z
    60e0:	81 30       	cpi	r24, 0x01	; 1
    60e2:	31 f1       	breq	.+76     	; 0x6130 <Add_User+0xe0>
    60e4:	8a 89       	ldd	r24, Y+18	; 0x12
    60e6:	81 30       	cpi	r24, 0x01	; 1
    60e8:	19 f1       	breq	.+70     	; 0x6130 <Add_User+0xe0>
				{
					if(User_Index<User_Index_Prev_val)
    60ea:	9c 89       	ldd	r25, Y+20	; 0x14
    60ec:	89 89       	ldd	r24, Y+17	; 0x11
    60ee:	98 17       	cp	r25, r24
    60f0:	70 f4       	brcc	.+28     	; 0x610e <Add_User+0xbe>
					{
						if (User_Index==1)
    60f2:	8c 89       	ldd	r24, Y+20	; 0x14
    60f4:	81 30       	cpi	r24, 0x01	; 1
    60f6:	29 f4       	brne	.+10     	; 0x6102 <Add_User+0xb2>
						{
							User_Index_Prev_val=11;
    60f8:	8b e0       	ldi	r24, 0x0B	; 11
    60fa:	89 8b       	std	Y+17, r24	; 0x11
							User_Index=10;
    60fc:	8a e0       	ldi	r24, 0x0A	; 10
    60fe:	8c 8b       	std	Y+20, r24	; 0x14
    6100:	19 c0       	rjmp	.+50     	; 0x6134 <Add_User+0xe4>
						}
						else
						{
							User_Index_Prev_val=User_Index;
    6102:	8c 89       	ldd	r24, Y+20	; 0x14
    6104:	89 8b       	std	Y+17, r24	; 0x11
							User_Index--;
    6106:	8c 89       	ldd	r24, Y+20	; 0x14
    6108:	81 50       	subi	r24, 0x01	; 1
    610a:	8c 8b       	std	Y+20, r24	; 0x14
    610c:	13 c0       	rjmp	.+38     	; 0x6134 <Add_User+0xe4>
						}
					}
					else if(User_Index>User_Index_Prev_val)
    610e:	9c 89       	ldd	r25, Y+20	; 0x14
    6110:	89 89       	ldd	r24, Y+17	; 0x11
    6112:	89 17       	cp	r24, r25
    6114:	78 f4       	brcc	.+30     	; 0x6134 <Add_User+0xe4>
					{
						if (User_Index==10)
    6116:	8c 89       	ldd	r24, Y+20	; 0x14
    6118:	8a 30       	cpi	r24, 0x0A	; 10
    611a:	21 f4       	brne	.+8      	; 0x6124 <Add_User+0xd4>
						{
							User_Index_Prev_val=0;
    611c:	19 8a       	std	Y+17, r1	; 0x11
							User_Index=1;
    611e:	81 e0       	ldi	r24, 0x01	; 1
    6120:	8c 8b       	std	Y+20, r24	; 0x14
    6122:	08 c0       	rjmp	.+16     	; 0x6134 <Add_User+0xe4>
						}
						else
						{
							User_Index_Prev_val=User_Index;
    6124:	8c 89       	ldd	r24, Y+20	; 0x14
    6126:	89 8b       	std	Y+17, r24	; 0x11
							User_Index++;
    6128:	8c 89       	ldd	r24, Y+20	; 0x14
    612a:	8f 5f       	subi	r24, 0xFF	; 255
    612c:	8c 8b       	std	Y+20, r24	; 0x14
    612e:	02 c0       	rjmp	.+4      	; 0x6134 <Add_User+0xe4>
						}
					}
				}
				else
				{
					Add_User_Guard_Looper=1;
    6130:	81 e0       	ldi	r24, 0x01	; 1
    6132:	88 8b       	std	Y+16, r24	; 0x10
	}
		//add while loop with an exit flag
		while( (Add_User_Looper_ExitFlag==1) && (User_List_Full_Flag==0) )
		{
			/* Start Of GUARD */
			while(Add_User_Guard_Looper==0)
    6134:	88 89       	ldd	r24, Y+16	; 0x10
    6136:	88 23       	and	r24, r24
    6138:	59 f2       	breq	.-106    	; 0x60d0 <Add_User+0x80>
				{
					Add_User_Guard_Looper=1;
				}
			}
			/*Resetting Add user guard looper flag*/
			Add_User_Guard_Looper=0;
    613a:	18 8a       	std	Y+16, r1	; 0x10
					/* Start of Printing*/
			if(User_Index == 1)
    613c:	8c 89       	ldd	r24, Y+20	; 0x14
    613e:	81 30       	cpi	r24, 0x01	; 1
    6140:	21 f5       	brne	.+72     	; 0x618a <Add_User+0x13a>
			{
				Bluetooth_SendString("\n--------------------\n");
    6142:	80 e6       	ldi	r24, 0x60	; 96
    6144:	90 e0       	ldi	r25, 0x00	; 0
    6146:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
				UART_SendByteSynchronous((User_Index+48));
    614a:	8c 89       	ldd	r24, Y+20	; 0x14
    614c:	80 5d       	subi	r24, 0xD0	; 208
    614e:	0e 94 18 1a 	call	0x3430	; 0x3430 <UART_SendByteSynchronous>
				Bluetooth_SendString(">");
    6152:	85 ea       	ldi	r24, 0xA5	; 165
    6154:	93 e0       	ldi	r25, 0x03	; 3
    6156:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
				LCD_goto(6,1);
    615a:	86 e0       	ldi	r24, 0x06	; 6
    615c:	61 e0       	ldi	r22, 0x01	; 1
    615e:	0e 94 13 13 	call	0x2626	; 0x2626 <LCD_goto>
				LCD_WriteString("      ");
    6162:	8c e7       	ldi	r24, 0x7C	; 124
    6164:	94 e0       	ldi	r25, 0x04	; 4
    6166:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LCD_WriteString>
				LCD_goto(8,1);
    616a:	88 e0       	ldi	r24, 0x08	; 8
    616c:	61 e0       	ldi	r22, 0x01	; 1
    616e:	0e 94 13 13 	call	0x2626	; 0x2626 <LCD_goto>
				LCD_PrintNum(User_Index);
    6172:	8c 89       	ldd	r24, Y+20	; 0x14
    6174:	88 2f       	mov	r24, r24
    6176:	90 e0       	ldi	r25, 0x00	; 0
    6178:	a0 e0       	ldi	r26, 0x00	; 0
    617a:	b0 e0       	ldi	r27, 0x00	; 0
    617c:	bc 01       	movw	r22, r24
    617e:	cd 01       	movw	r24, r26
    6180:	0e 94 49 13 	call	0x2692	; 0x2692 <LCD_PrintNum>
				Right_Arrow();
    6184:	0e 94 96 33 	call	0x672c	; 0x672c <Right_Arrow>
    6188:	57 c0       	rjmp	.+174    	; 0x6238 <Add_User+0x1e8>
			}
			else if(User_Index>1 && User_Index<10)
    618a:	8c 89       	ldd	r24, Y+20	; 0x14
    618c:	82 30       	cpi	r24, 0x02	; 2
    618e:	68 f1       	brcs	.+90     	; 0x61ea <Add_User+0x19a>
    6190:	8c 89       	ldd	r24, Y+20	; 0x14
    6192:	8a 30       	cpi	r24, 0x0A	; 10
    6194:	50 f5       	brcc	.+84     	; 0x61ea <Add_User+0x19a>
			{
				Bluetooth_SendString("\n--------------------\n");
    6196:	80 e6       	ldi	r24, 0x60	; 96
    6198:	90 e0       	ldi	r25, 0x00	; 0
    619a:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
				Bluetooth_SendString("<");
    619e:	83 e8       	ldi	r24, 0x83	; 131
    61a0:	94 e0       	ldi	r25, 0x04	; 4
    61a2:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
				UART_SendByteSynchronous((User_Index+48));
    61a6:	8c 89       	ldd	r24, Y+20	; 0x14
    61a8:	80 5d       	subi	r24, 0xD0	; 208
    61aa:	0e 94 18 1a 	call	0x3430	; 0x3430 <UART_SendByteSynchronous>
				Bluetooth_SendString(">");
    61ae:	85 ea       	ldi	r24, 0xA5	; 165
    61b0:	93 e0       	ldi	r25, 0x03	; 3
    61b2:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
				LCD_goto(6,1);
    61b6:	86 e0       	ldi	r24, 0x06	; 6
    61b8:	61 e0       	ldi	r22, 0x01	; 1
    61ba:	0e 94 13 13 	call	0x2626	; 0x2626 <LCD_goto>
				LCD_WriteString("      ");
    61be:	8c e7       	ldi	r24, 0x7C	; 124
    61c0:	94 e0       	ldi	r25, 0x04	; 4
    61c2:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LCD_WriteString>
				LCD_goto(7,1);
    61c6:	87 e0       	ldi	r24, 0x07	; 7
    61c8:	61 e0       	ldi	r22, 0x01	; 1
    61ca:	0e 94 13 13 	call	0x2626	; 0x2626 <LCD_goto>
				Left_Arrow();
    61ce:	0e 94 a0 33 	call	0x6740	; 0x6740 <Left_Arrow>
				LCD_PrintNum(User_Index);
    61d2:	8c 89       	ldd	r24, Y+20	; 0x14
    61d4:	88 2f       	mov	r24, r24
    61d6:	90 e0       	ldi	r25, 0x00	; 0
    61d8:	a0 e0       	ldi	r26, 0x00	; 0
    61da:	b0 e0       	ldi	r27, 0x00	; 0
    61dc:	bc 01       	movw	r22, r24
    61de:	cd 01       	movw	r24, r26
    61e0:	0e 94 49 13 	call	0x2692	; 0x2692 <LCD_PrintNum>
				Right_Arrow();
    61e4:	0e 94 96 33 	call	0x672c	; 0x672c <Right_Arrow>
    61e8:	27 c0       	rjmp	.+78     	; 0x6238 <Add_User+0x1e8>
			}
			else if(User_Index == 10)
    61ea:	8c 89       	ldd	r24, Y+20	; 0x14
    61ec:	8a 30       	cpi	r24, 0x0A	; 10
    61ee:	21 f5       	brne	.+72     	; 0x6238 <Add_User+0x1e8>
			{
				Bluetooth_SendString("\n--------------------\n");
    61f0:	80 e6       	ldi	r24, 0x60	; 96
    61f2:	90 e0       	ldi	r25, 0x00	; 0
    61f4:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
				Bluetooth_SendString("<");
    61f8:	83 e8       	ldi	r24, 0x83	; 131
    61fa:	94 e0       	ldi	r25, 0x04	; 4
    61fc:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
				Bluetooth_SendNumber(User_Index);
    6200:	8c 89       	ldd	r24, Y+20	; 0x14
    6202:	88 2f       	mov	r24, r24
    6204:	90 e0       	ldi	r25, 0x00	; 0
    6206:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <Bluetooth_SendNumber>
				LCD_goto(6,1);
    620a:	86 e0       	ldi	r24, 0x06	; 6
    620c:	61 e0       	ldi	r22, 0x01	; 1
    620e:	0e 94 13 13 	call	0x2626	; 0x2626 <LCD_goto>
				LCD_WriteString("      ");
    6212:	8c e7       	ldi	r24, 0x7C	; 124
    6214:	94 e0       	ldi	r25, 0x04	; 4
    6216:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LCD_WriteString>
				LCD_goto(7,1);
    621a:	87 e0       	ldi	r24, 0x07	; 7
    621c:	61 e0       	ldi	r22, 0x01	; 1
    621e:	0e 94 13 13 	call	0x2626	; 0x2626 <LCD_goto>
				Left_Arrow();
    6222:	0e 94 a0 33 	call	0x6740	; 0x6740 <Left_Arrow>
				LCD_PrintNum(User_Index);
    6226:	8c 89       	ldd	r24, Y+20	; 0x14
    6228:	88 2f       	mov	r24, r24
    622a:	90 e0       	ldi	r25, 0x00	; 0
    622c:	a0 e0       	ldi	r26, 0x00	; 0
    622e:	b0 e0       	ldi	r27, 0x00	; 0
    6230:	bc 01       	movw	r22, r24
    6232:	cd 01       	movw	r24, r26
    6234:	0e 94 49 13 	call	0x2692	; 0x2692 <LCD_PrintNum>
			}

				/* Start of Recieving	*/
			Add_User_Input=UART_u8Receiver();
    6238:	0e 94 a3 1a 	call	0x3546	; 0x3546 <UART_u8Receiver>
    623c:	8d 8b       	std	Y+21, r24	; 0x15
			ASCII_Conversion(&Add_User_Input);
    623e:	ce 01       	movw	r24, r28
    6240:	45 96       	adiw	r24, 0x15	; 21
    6242:	0e 94 b7 1c 	call	0x396e	; 0x396e <ASCII_Conversion>
						   /* Start of ACTION */
			if( (Add_User_Input==1) && (User_Index!=1) ) // 1 Move to Left  //2 Move to Right //3 IS ENTER
    6246:	8d 89       	ldd	r24, Y+21	; 0x15
    6248:	81 30       	cpi	r24, 0x01	; 1
    624a:	49 f4       	brne	.+18     	; 0x625e <Add_User+0x20e>
    624c:	8c 89       	ldd	r24, Y+20	; 0x14
    624e:	81 30       	cpi	r24, 0x01	; 1
    6250:	31 f0       	breq	.+12     	; 0x625e <Add_User+0x20e>
			{
				User_Index_Prev_val=User_Index;
    6252:	8c 89       	ldd	r24, Y+20	; 0x14
    6254:	89 8b       	std	Y+17, r24	; 0x11
				User_Index--;
    6256:	8c 89       	ldd	r24, Y+20	; 0x14
    6258:	81 50       	subi	r24, 0x01	; 1
    625a:	8c 8b       	std	Y+20, r24	; 0x14
    625c:	20 c0       	rjmp	.+64     	; 0x629e <Add_User+0x24e>
			}
			else if( (Add_User_Input==2)  && (User_Index!=10) )
    625e:	8d 89       	ldd	r24, Y+21	; 0x15
    6260:	82 30       	cpi	r24, 0x02	; 2
    6262:	49 f4       	brne	.+18     	; 0x6276 <Add_User+0x226>
    6264:	8c 89       	ldd	r24, Y+20	; 0x14
    6266:	8a 30       	cpi	r24, 0x0A	; 10
    6268:	31 f0       	breq	.+12     	; 0x6276 <Add_User+0x226>
			{
				User_Index_Prev_val=User_Index;
    626a:	8c 89       	ldd	r24, Y+20	; 0x14
    626c:	89 8b       	std	Y+17, r24	; 0x11
				User_Index++;
    626e:	8c 89       	ldd	r24, Y+20	; 0x14
    6270:	8f 5f       	subi	r24, 0xFF	; 255
    6272:	8c 8b       	std	Y+20, r24	; 0x14
    6274:	14 c0       	rjmp	.+40     	; 0x629e <Add_User+0x24e>
			}
			else if(Add_User_Input==3)
    6276:	8d 89       	ldd	r24, Y+21	; 0x15
    6278:	83 30       	cpi	r24, 0x03	; 3
    627a:	69 f4       	brne	.+26     	; 0x6296 <Add_User+0x246>
			{
				//getting pass and saving it into eeprom code
			    Bluetooth_SendString("\n--------------------\n");
    627c:	80 e6       	ldi	r24, 0x60	; 96
    627e:	90 e0       	ldi	r25, 0x00	; 0
    6280:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
				Bluetooth_SendString("Enter a Password");
    6284:	85 e8       	ldi	r24, 0x85	; 133
    6286:	94 e0       	ldi	r25, 0x04	; 4
    6288:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
				Save_User_Password(User_Index);
    628c:	8c 89       	ldd	r24, Y+20	; 0x14
    628e:	0e 94 b7 33 	call	0x676e	; 0x676e <Save_User_Password>
				Add_User_Looper_ExitFlag=0;//need to change flag to Add_user_Looper_ExitFlag
    6292:	1b 8a       	std	Y+19, r1	; 0x13
    6294:	04 c0       	rjmp	.+8      	; 0x629e <Add_User+0x24e>
			}
			else if(Add_User_Input==4)
    6296:	8d 89       	ldd	r24, Y+21	; 0x15
    6298:	84 30       	cpi	r24, 0x04	; 4
    629a:	09 f4       	brne	.+2      	; 0x629e <Add_User+0x24e>
			{
				Add_User_Looper_ExitFlag=0;
    629c:	1b 8a       	std	Y+19, r1	; 0x13
	if(User_Full_List_Counter==10)
	{
		User_List_Full_Flag=1;
	}
		//add while loop with an exit flag
		while( (Add_User_Looper_ExitFlag==1) && (User_List_Full_Flag==0) )
    629e:	8b 89       	ldd	r24, Y+19	; 0x13
    62a0:	81 30       	cpi	r24, 0x01	; 1
    62a2:	21 f4       	brne	.+8      	; 0x62ac <Add_User+0x25c>
    62a4:	8a 89       	ldd	r24, Y+18	; 0x12
    62a6:	88 23       	and	r24, r24
    62a8:	09 f4       	brne	.+2      	; 0x62ac <Add_User+0x25c>
    62aa:	44 cf       	rjmp	.-376    	; 0x6134 <Add_User+0xe4>
			else if(Add_User_Input==4)
			{
				Add_User_Looper_ExitFlag=0;
			}
		}
	if (User_List_Full_Flag==1)
    62ac:	8a 89       	ldd	r24, Y+18	; 0x12
    62ae:	81 30       	cpi	r24, 0x01	; 1
    62b0:	09 f0       	breq	.+2      	; 0x62b4 <Add_User+0x264>
    62b2:	80 c0       	rjmp	.+256    	; 0x63b4 <Add_User+0x364>
	{
		LCD_CLR();
    62b4:	0e 94 2b 13 	call	0x2656	; 0x2656 <LCD_CLR>
		Bluetooth_SendString("\n--------------------\n");
    62b8:	80 e6       	ldi	r24, 0x60	; 96
    62ba:	90 e0       	ldi	r25, 0x00	; 0
    62bc:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
		Bluetooth_SendString("List Is Full");
    62c0:	86 e9       	ldi	r24, 0x96	; 150
    62c2:	94 e0       	ldi	r25, 0x04	; 4
    62c4:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
		LCD_WriteString("List Is Full");
    62c8:	86 e9       	ldi	r24, 0x96	; 150
    62ca:	94 e0       	ldi	r25, 0x04	; 4
    62cc:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LCD_WriteString>
    62d0:	80 e0       	ldi	r24, 0x00	; 0
    62d2:	90 e0       	ldi	r25, 0x00	; 0
    62d4:	aa ef       	ldi	r26, 0xFA	; 250
    62d6:	b4 e4       	ldi	r27, 0x44	; 68
    62d8:	8b 87       	std	Y+11, r24	; 0x0b
    62da:	9c 87       	std	Y+12, r25	; 0x0c
    62dc:	ad 87       	std	Y+13, r26	; 0x0d
    62de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    62e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    62e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    62e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    62e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    62e8:	20 e0       	ldi	r18, 0x00	; 0
    62ea:	30 e0       	ldi	r19, 0x00	; 0
    62ec:	4a ef       	ldi	r20, 0xFA	; 250
    62ee:	54 e4       	ldi	r21, 0x44	; 68
    62f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    62f4:	dc 01       	movw	r26, r24
    62f6:	cb 01       	movw	r24, r22
    62f8:	8f 83       	std	Y+7, r24	; 0x07
    62fa:	98 87       	std	Y+8, r25	; 0x08
    62fc:	a9 87       	std	Y+9, r26	; 0x09
    62fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6300:	6f 81       	ldd	r22, Y+7	; 0x07
    6302:	78 85       	ldd	r23, Y+8	; 0x08
    6304:	89 85       	ldd	r24, Y+9	; 0x09
    6306:	9a 85       	ldd	r25, Y+10	; 0x0a
    6308:	20 e0       	ldi	r18, 0x00	; 0
    630a:	30 e0       	ldi	r19, 0x00	; 0
    630c:	40 e8       	ldi	r20, 0x80	; 128
    630e:	5f e3       	ldi	r21, 0x3F	; 63
    6310:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    6314:	88 23       	and	r24, r24
    6316:	2c f4       	brge	.+10     	; 0x6322 <Add_User+0x2d2>
		__ticks = 1;
    6318:	81 e0       	ldi	r24, 0x01	; 1
    631a:	90 e0       	ldi	r25, 0x00	; 0
    631c:	9e 83       	std	Y+6, r25	; 0x06
    631e:	8d 83       	std	Y+5, r24	; 0x05
    6320:	3f c0       	rjmp	.+126    	; 0x63a0 <Add_User+0x350>
	else if (__tmp > 65535)
    6322:	6f 81       	ldd	r22, Y+7	; 0x07
    6324:	78 85       	ldd	r23, Y+8	; 0x08
    6326:	89 85       	ldd	r24, Y+9	; 0x09
    6328:	9a 85       	ldd	r25, Y+10	; 0x0a
    632a:	20 e0       	ldi	r18, 0x00	; 0
    632c:	3f ef       	ldi	r19, 0xFF	; 255
    632e:	4f e7       	ldi	r20, 0x7F	; 127
    6330:	57 e4       	ldi	r21, 0x47	; 71
    6332:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    6336:	18 16       	cp	r1, r24
    6338:	4c f5       	brge	.+82     	; 0x638c <Add_User+0x33c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    633a:	6b 85       	ldd	r22, Y+11	; 0x0b
    633c:	7c 85       	ldd	r23, Y+12	; 0x0c
    633e:	8d 85       	ldd	r24, Y+13	; 0x0d
    6340:	9e 85       	ldd	r25, Y+14	; 0x0e
    6342:	20 e0       	ldi	r18, 0x00	; 0
    6344:	30 e0       	ldi	r19, 0x00	; 0
    6346:	40 e2       	ldi	r20, 0x20	; 32
    6348:	51 e4       	ldi	r21, 0x41	; 65
    634a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    634e:	dc 01       	movw	r26, r24
    6350:	cb 01       	movw	r24, r22
    6352:	bc 01       	movw	r22, r24
    6354:	cd 01       	movw	r24, r26
    6356:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    635a:	dc 01       	movw	r26, r24
    635c:	cb 01       	movw	r24, r22
    635e:	9e 83       	std	Y+6, r25	; 0x06
    6360:	8d 83       	std	Y+5, r24	; 0x05
    6362:	0f c0       	rjmp	.+30     	; 0x6382 <Add_User+0x332>
    6364:	88 ec       	ldi	r24, 0xC8	; 200
    6366:	90 e0       	ldi	r25, 0x00	; 0
    6368:	9c 83       	std	Y+4, r25	; 0x04
    636a:	8b 83       	std	Y+3, r24	; 0x03
    636c:	8b 81       	ldd	r24, Y+3	; 0x03
    636e:	9c 81       	ldd	r25, Y+4	; 0x04
    6370:	01 97       	sbiw	r24, 0x01	; 1
    6372:	f1 f7       	brne	.-4      	; 0x6370 <Add_User+0x320>
    6374:	9c 83       	std	Y+4, r25	; 0x04
    6376:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6378:	8d 81       	ldd	r24, Y+5	; 0x05
    637a:	9e 81       	ldd	r25, Y+6	; 0x06
    637c:	01 97       	sbiw	r24, 0x01	; 1
    637e:	9e 83       	std	Y+6, r25	; 0x06
    6380:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6382:	8d 81       	ldd	r24, Y+5	; 0x05
    6384:	9e 81       	ldd	r25, Y+6	; 0x06
    6386:	00 97       	sbiw	r24, 0x00	; 0
    6388:	69 f7       	brne	.-38     	; 0x6364 <Add_User+0x314>
    638a:	14 c0       	rjmp	.+40     	; 0x63b4 <Add_User+0x364>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    638c:	6f 81       	ldd	r22, Y+7	; 0x07
    638e:	78 85       	ldd	r23, Y+8	; 0x08
    6390:	89 85       	ldd	r24, Y+9	; 0x09
    6392:	9a 85       	ldd	r25, Y+10	; 0x0a
    6394:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6398:	dc 01       	movw	r26, r24
    639a:	cb 01       	movw	r24, r22
    639c:	9e 83       	std	Y+6, r25	; 0x06
    639e:	8d 83       	std	Y+5, r24	; 0x05
    63a0:	8d 81       	ldd	r24, Y+5	; 0x05
    63a2:	9e 81       	ldd	r25, Y+6	; 0x06
    63a4:	9a 83       	std	Y+2, r25	; 0x02
    63a6:	89 83       	std	Y+1, r24	; 0x01
    63a8:	89 81       	ldd	r24, Y+1	; 0x01
    63aa:	9a 81       	ldd	r25, Y+2	; 0x02
    63ac:	01 97       	sbiw	r24, 0x01	; 1
    63ae:	f1 f7       	brne	.-4      	; 0x63ac <Add_User+0x35c>
    63b0:	9a 83       	std	Y+2, r25	; 0x02
    63b2:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2000);
	}
}
    63b4:	65 96       	adiw	r28, 0x15	; 21
    63b6:	0f b6       	in	r0, 0x3f	; 63
    63b8:	f8 94       	cli
    63ba:	de bf       	out	0x3e, r29	; 62
    63bc:	0f be       	out	0x3f, r0	; 63
    63be:	cd bf       	out	0x3d, r28	; 61
    63c0:	cf 91       	pop	r28
    63c2:	df 91       	pop	r29
    63c4:	08 95       	ret

000063c6 <Delete_User>:

void Delete_User(void)
{
    63c6:	df 93       	push	r29
    63c8:	cf 93       	push	r28
    63ca:	cd b7       	in	r28, 0x3d	; 61
    63cc:	de b7       	in	r29, 0x3e	; 62
    63ce:	65 97       	sbiw	r28, 0x15	; 21
    63d0:	0f b6       	in	r0, 0x3f	; 63
    63d2:	f8 94       	cli
    63d4:	de bf       	out	0x3e, r29	; 62
    63d6:	0f be       	out	0x3f, r0	; 63
    63d8:	cd bf       	out	0x3d, r28	; 61
	u8 User_Index,Delete_User_Input,Delete_User_Looper_ExitFlag=1,User_List_Empty_Flag=0;
    63da:	81 e0       	ldi	r24, 0x01	; 1
    63dc:	8b 8b       	std	Y+19, r24	; 0x13
    63de:	1a 8a       	std	Y+18, r1	; 0x12
	u8 User_Index_Prev_val,User_Empty_List_Counter=0,Delete_User_Guard_Looper=0;
    63e0:	18 8a       	std	Y+16, r1	; 0x10
    63e2:	1f 86       	std	Y+15, r1	; 0x0f
	LCD_CLR();
    63e4:	0e 94 2b 13 	call	0x2656	; 0x2656 <LCD_CLR>
	Bluetooth_SendString("\n--------------------\n");
    63e8:	80 e6       	ldi	r24, 0x60	; 96
    63ea:	90 e0       	ldi	r25, 0x00	; 0
    63ec:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
	Bluetooth_SendString("1)Move to LEFT\n2)Move to RIGHT\n3)Enter\n4)Back");
    63f0:	8e e3       	ldi	r24, 0x3E	; 62
    63f2:	94 e0       	ldi	r25, 0x04	; 4
    63f4:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
	LCD_WriteString("Registered Users");
    63f8:	83 ea       	ldi	r24, 0xA3	; 163
    63fa:	94 e0       	ldi	r25, 0x04	; 4
    63fc:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LCD_WriteString>
	LCD_goto(7,1);
    6400:	87 e0       	ldi	r24, 0x07	; 7
    6402:	61 e0       	ldi	r22, 0x01	; 1
    6404:	0e 94 13 13 	call	0x2626	; 0x2626 <LCD_goto>
	for(User_Index=0;User_Index<10;User_Index++)
    6408:	1c 8a       	std	Y+20, r1	; 0x14
    640a:	13 c0       	rjmp	.+38     	; 0x6432 <Delete_User+0x6c>
	{
		if(Array_Of_User_Status[User_Index]==2)
    640c:	8c 89       	ldd	r24, Y+20	; 0x14
    640e:	88 2f       	mov	r24, r24
    6410:	90 e0       	ldi	r25, 0x00	; 0
    6412:	fc 01       	movw	r30, r24
    6414:	e4 5c       	subi	r30, 0xC4	; 196
    6416:	fa 4f       	sbci	r31, 0xFA	; 250
    6418:	80 81       	ld	r24, Z
    641a:	82 30       	cpi	r24, 0x02	; 2
    641c:	21 f4       	brne	.+8      	; 0x6426 <Delete_User+0x60>
		{
			User_Index++;//to match the switch cases (start from 1 and end at 10)
    641e:	8c 89       	ldd	r24, Y+20	; 0x14
    6420:	8f 5f       	subi	r24, 0xFF	; 255
    6422:	8c 8b       	std	Y+20, r24	; 0x14
    6424:	09 c0       	rjmp	.+18     	; 0x6438 <Delete_User+0x72>
			break;
		}
		User_Empty_List_Counter++;
    6426:	88 89       	ldd	r24, Y+16	; 0x10
    6428:	8f 5f       	subi	r24, 0xFF	; 255
    642a:	88 8b       	std	Y+16, r24	; 0x10
	LCD_CLR();
	Bluetooth_SendString("\n--------------------\n");
	Bluetooth_SendString("1)Move to LEFT\n2)Move to RIGHT\n3)Enter\n4)Back");
	LCD_WriteString("Registered Users");
	LCD_goto(7,1);
	for(User_Index=0;User_Index<10;User_Index++)
    642c:	8c 89       	ldd	r24, Y+20	; 0x14
    642e:	8f 5f       	subi	r24, 0xFF	; 255
    6430:	8c 8b       	std	Y+20, r24	; 0x14
    6432:	8c 89       	ldd	r24, Y+20	; 0x14
    6434:	8a 30       	cpi	r24, 0x0A	; 10
    6436:	50 f3       	brcs	.-44     	; 0x640c <Delete_User+0x46>
			User_Index++;//to match the switch cases (start from 1 and end at 10)
			break;
		}
		User_Empty_List_Counter++;
	}
	if(User_Empty_List_Counter==10)
    6438:	88 89       	ldd	r24, Y+16	; 0x10
    643a:	8a 30       	cpi	r24, 0x0A	; 10
    643c:	09 f0       	breq	.+2      	; 0x6440 <Delete_User+0x7a>
    643e:	e2 c0       	rjmp	.+452    	; 0x6604 <Delete_User+0x23e>
	{
		User_List_Empty_Flag=1;
    6440:	81 e0       	ldi	r24, 0x01	; 1
    6442:	8a 8b       	std	Y+18, r24	; 0x12
    6444:	df c0       	rjmp	.+446    	; 0x6604 <Delete_User+0x23e>
		//add while loop with an exit flag
		while( (Delete_User_Looper_ExitFlag==1) && (User_List_Empty_Flag==0) )
		{
			while(Delete_User_Guard_Looper==0)
			{
				if( (Array_Of_User_Status[User_Index-1]==1)/*User Registerd*/ && (User_List_Empty_Flag!=1) )
    6446:	8c 89       	ldd	r24, Y+20	; 0x14
    6448:	88 2f       	mov	r24, r24
    644a:	90 e0       	ldi	r25, 0x00	; 0
    644c:	01 97       	sbiw	r24, 0x01	; 1
    644e:	fc 01       	movw	r30, r24
    6450:	e4 5c       	subi	r30, 0xC4	; 196
    6452:	fa 4f       	sbci	r31, 0xFA	; 250
    6454:	80 81       	ld	r24, Z
    6456:	81 30       	cpi	r24, 0x01	; 1
    6458:	31 f5       	brne	.+76     	; 0x64a6 <Delete_User+0xe0>
    645a:	8a 89       	ldd	r24, Y+18	; 0x12
    645c:	81 30       	cpi	r24, 0x01	; 1
    645e:	19 f1       	breq	.+70     	; 0x64a6 <Delete_User+0xe0>
				{
					if(User_Index<User_Index_Prev_val)
    6460:	9c 89       	ldd	r25, Y+20	; 0x14
    6462:	89 89       	ldd	r24, Y+17	; 0x11
    6464:	98 17       	cp	r25, r24
    6466:	70 f4       	brcc	.+28     	; 0x6484 <Delete_User+0xbe>
					{
						if (User_Index==1)
    6468:	8c 89       	ldd	r24, Y+20	; 0x14
    646a:	81 30       	cpi	r24, 0x01	; 1
    646c:	29 f4       	brne	.+10     	; 0x6478 <Delete_User+0xb2>
						{
							User_Index_Prev_val=11;
    646e:	8b e0       	ldi	r24, 0x0B	; 11
    6470:	89 8b       	std	Y+17, r24	; 0x11
							User_Index=10;
    6472:	8a e0       	ldi	r24, 0x0A	; 10
    6474:	8c 8b       	std	Y+20, r24	; 0x14
    6476:	19 c0       	rjmp	.+50     	; 0x64aa <Delete_User+0xe4>
						}
						else
						{
							User_Index_Prev_val=User_Index;
    6478:	8c 89       	ldd	r24, Y+20	; 0x14
    647a:	89 8b       	std	Y+17, r24	; 0x11
							User_Index--;
    647c:	8c 89       	ldd	r24, Y+20	; 0x14
    647e:	81 50       	subi	r24, 0x01	; 1
    6480:	8c 8b       	std	Y+20, r24	; 0x14
    6482:	13 c0       	rjmp	.+38     	; 0x64aa <Delete_User+0xe4>
						}
					}
					else if(User_Index>User_Index_Prev_val)
    6484:	9c 89       	ldd	r25, Y+20	; 0x14
    6486:	89 89       	ldd	r24, Y+17	; 0x11
    6488:	89 17       	cp	r24, r25
    648a:	78 f4       	brcc	.+30     	; 0x64aa <Delete_User+0xe4>
					{
						if (User_Index==10)
    648c:	8c 89       	ldd	r24, Y+20	; 0x14
    648e:	8a 30       	cpi	r24, 0x0A	; 10
    6490:	21 f4       	brne	.+8      	; 0x649a <Delete_User+0xd4>
						{
							User_Index_Prev_val=0;
    6492:	19 8a       	std	Y+17, r1	; 0x11
							User_Index=1;
    6494:	81 e0       	ldi	r24, 0x01	; 1
    6496:	8c 8b       	std	Y+20, r24	; 0x14
    6498:	08 c0       	rjmp	.+16     	; 0x64aa <Delete_User+0xe4>
						}
						else
						{
							User_Index_Prev_val=User_Index;
    649a:	8c 89       	ldd	r24, Y+20	; 0x14
    649c:	89 8b       	std	Y+17, r24	; 0x11
							User_Index++;
    649e:	8c 89       	ldd	r24, Y+20	; 0x14
    64a0:	8f 5f       	subi	r24, 0xFF	; 255
    64a2:	8c 8b       	std	Y+20, r24	; 0x14
    64a4:	02 c0       	rjmp	.+4      	; 0x64aa <Delete_User+0xe4>
						}
					}
				}
				else
				{
					Delete_User_Guard_Looper=1;
    64a6:	81 e0       	ldi	r24, 0x01	; 1
    64a8:	8f 87       	std	Y+15, r24	; 0x0f
		User_List_Empty_Flag=1;
	}
		//add while loop with an exit flag
		while( (Delete_User_Looper_ExitFlag==1) && (User_List_Empty_Flag==0) )
		{
			while(Delete_User_Guard_Looper==0)
    64aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    64ac:	88 23       	and	r24, r24
    64ae:	59 f2       	breq	.-106    	; 0x6446 <Delete_User+0x80>
				{
					Delete_User_Guard_Looper=1;
				}
			}
			/*Resetting Add user guard looper flag*/
			Delete_User_Guard_Looper=0;
    64b0:	1f 86       	std	Y+15, r1	; 0x0f
					/* Start of Printing*/
				if(User_Index == 1)
    64b2:	8c 89       	ldd	r24, Y+20	; 0x14
    64b4:	81 30       	cpi	r24, 0x01	; 1
    64b6:	21 f5       	brne	.+72     	; 0x6500 <Delete_User+0x13a>
				{
					 Bluetooth_SendString("\n--------------------\n");
    64b8:	80 e6       	ldi	r24, 0x60	; 96
    64ba:	90 e0       	ldi	r25, 0x00	; 0
    64bc:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
					 UART_SendByteSynchronous((User_Index+48));
    64c0:	8c 89       	ldd	r24, Y+20	; 0x14
    64c2:	80 5d       	subi	r24, 0xD0	; 208
    64c4:	0e 94 18 1a 	call	0x3430	; 0x3430 <UART_SendByteSynchronous>
					 Bluetooth_SendString(">");
    64c8:	85 ea       	ldi	r24, 0xA5	; 165
    64ca:	93 e0       	ldi	r25, 0x03	; 3
    64cc:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
					LCD_goto(6,1);
    64d0:	86 e0       	ldi	r24, 0x06	; 6
    64d2:	61 e0       	ldi	r22, 0x01	; 1
    64d4:	0e 94 13 13 	call	0x2626	; 0x2626 <LCD_goto>
					LCD_WriteString("      ");
    64d8:	8c e7       	ldi	r24, 0x7C	; 124
    64da:	94 e0       	ldi	r25, 0x04	; 4
    64dc:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LCD_WriteString>
					LCD_goto(8,1);
    64e0:	88 e0       	ldi	r24, 0x08	; 8
    64e2:	61 e0       	ldi	r22, 0x01	; 1
    64e4:	0e 94 13 13 	call	0x2626	; 0x2626 <LCD_goto>
					LCD_PrintNum(User_Index);
    64e8:	8c 89       	ldd	r24, Y+20	; 0x14
    64ea:	88 2f       	mov	r24, r24
    64ec:	90 e0       	ldi	r25, 0x00	; 0
    64ee:	a0 e0       	ldi	r26, 0x00	; 0
    64f0:	b0 e0       	ldi	r27, 0x00	; 0
    64f2:	bc 01       	movw	r22, r24
    64f4:	cd 01       	movw	r24, r26
    64f6:	0e 94 49 13 	call	0x2692	; 0x2692 <LCD_PrintNum>
					Right_Arrow();
    64fa:	0e 94 96 33 	call	0x672c	; 0x672c <Right_Arrow>
    64fe:	57 c0       	rjmp	.+174    	; 0x65ae <Delete_User+0x1e8>
				}
				else if(User_Index>1 && User_Index<10)
    6500:	8c 89       	ldd	r24, Y+20	; 0x14
    6502:	82 30       	cpi	r24, 0x02	; 2
    6504:	68 f1       	brcs	.+90     	; 0x6560 <Delete_User+0x19a>
    6506:	8c 89       	ldd	r24, Y+20	; 0x14
    6508:	8a 30       	cpi	r24, 0x0A	; 10
    650a:	50 f5       	brcc	.+84     	; 0x6560 <Delete_User+0x19a>
				{
					Bluetooth_SendString("\n--------------------\n");
    650c:	80 e6       	ldi	r24, 0x60	; 96
    650e:	90 e0       	ldi	r25, 0x00	; 0
    6510:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
					Bluetooth_SendString("<");
    6514:	83 e8       	ldi	r24, 0x83	; 131
    6516:	94 e0       	ldi	r25, 0x04	; 4
    6518:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
					UART_SendByteSynchronous((User_Index+48));
    651c:	8c 89       	ldd	r24, Y+20	; 0x14
    651e:	80 5d       	subi	r24, 0xD0	; 208
    6520:	0e 94 18 1a 	call	0x3430	; 0x3430 <UART_SendByteSynchronous>
					Bluetooth_SendString(">");
    6524:	85 ea       	ldi	r24, 0xA5	; 165
    6526:	93 e0       	ldi	r25, 0x03	; 3
    6528:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
					LCD_goto(6,1);
    652c:	86 e0       	ldi	r24, 0x06	; 6
    652e:	61 e0       	ldi	r22, 0x01	; 1
    6530:	0e 94 13 13 	call	0x2626	; 0x2626 <LCD_goto>
					LCD_WriteString("      ");
    6534:	8c e7       	ldi	r24, 0x7C	; 124
    6536:	94 e0       	ldi	r25, 0x04	; 4
    6538:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LCD_WriteString>
					LCD_goto(7,1);
    653c:	87 e0       	ldi	r24, 0x07	; 7
    653e:	61 e0       	ldi	r22, 0x01	; 1
    6540:	0e 94 13 13 	call	0x2626	; 0x2626 <LCD_goto>
					Left_Arrow();
    6544:	0e 94 a0 33 	call	0x6740	; 0x6740 <Left_Arrow>
					LCD_PrintNum(User_Index);
    6548:	8c 89       	ldd	r24, Y+20	; 0x14
    654a:	88 2f       	mov	r24, r24
    654c:	90 e0       	ldi	r25, 0x00	; 0
    654e:	a0 e0       	ldi	r26, 0x00	; 0
    6550:	b0 e0       	ldi	r27, 0x00	; 0
    6552:	bc 01       	movw	r22, r24
    6554:	cd 01       	movw	r24, r26
    6556:	0e 94 49 13 	call	0x2692	; 0x2692 <LCD_PrintNum>
					Right_Arrow();
    655a:	0e 94 96 33 	call	0x672c	; 0x672c <Right_Arrow>
    655e:	27 c0       	rjmp	.+78     	; 0x65ae <Delete_User+0x1e8>
				}
				else if(User_Index == 10)
    6560:	8c 89       	ldd	r24, Y+20	; 0x14
    6562:	8a 30       	cpi	r24, 0x0A	; 10
    6564:	21 f5       	brne	.+72     	; 0x65ae <Delete_User+0x1e8>
				{
					Bluetooth_SendString("\n--------------------\n");
    6566:	80 e6       	ldi	r24, 0x60	; 96
    6568:	90 e0       	ldi	r25, 0x00	; 0
    656a:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
					Bluetooth_SendString("<");
    656e:	83 e8       	ldi	r24, 0x83	; 131
    6570:	94 e0       	ldi	r25, 0x04	; 4
    6572:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
					Bluetooth_SendNumber(User_Index);
    6576:	8c 89       	ldd	r24, Y+20	; 0x14
    6578:	88 2f       	mov	r24, r24
    657a:	90 e0       	ldi	r25, 0x00	; 0
    657c:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <Bluetooth_SendNumber>
					LCD_goto(6,1);
    6580:	86 e0       	ldi	r24, 0x06	; 6
    6582:	61 e0       	ldi	r22, 0x01	; 1
    6584:	0e 94 13 13 	call	0x2626	; 0x2626 <LCD_goto>
					LCD_WriteString("      ");
    6588:	8c e7       	ldi	r24, 0x7C	; 124
    658a:	94 e0       	ldi	r25, 0x04	; 4
    658c:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LCD_WriteString>
					LCD_goto(7,1);
    6590:	87 e0       	ldi	r24, 0x07	; 7
    6592:	61 e0       	ldi	r22, 0x01	; 1
    6594:	0e 94 13 13 	call	0x2626	; 0x2626 <LCD_goto>
					Left_Arrow();
    6598:	0e 94 a0 33 	call	0x6740	; 0x6740 <Left_Arrow>
					LCD_PrintNum(User_Index);
    659c:	8c 89       	ldd	r24, Y+20	; 0x14
    659e:	88 2f       	mov	r24, r24
    65a0:	90 e0       	ldi	r25, 0x00	; 0
    65a2:	a0 e0       	ldi	r26, 0x00	; 0
    65a4:	b0 e0       	ldi	r27, 0x00	; 0
    65a6:	bc 01       	movw	r22, r24
    65a8:	cd 01       	movw	r24, r26
    65aa:	0e 94 49 13 	call	0x2692	; 0x2692 <LCD_PrintNum>
				}
				   Delete_User_Input=UART_u8Receiver();
    65ae:	0e 94 a3 1a 	call	0x3546	; 0x3546 <UART_u8Receiver>
    65b2:	8d 8b       	std	Y+21, r24	; 0x15
				   ASCII_Conversion(&Delete_User_Input);
    65b4:	ce 01       	movw	r24, r28
    65b6:	45 96       	adiw	r24, 0x15	; 21
    65b8:	0e 94 b7 1c 	call	0x396e	; 0x396e <ASCII_Conversion>
				   if( (Delete_User_Input==1) && (User_Index !=1) ) // 1 Move to Left  //2 Move to Right //3 IS ENTER
    65bc:	8d 89       	ldd	r24, Y+21	; 0x15
    65be:	81 30       	cpi	r24, 0x01	; 1
    65c0:	49 f4       	brne	.+18     	; 0x65d4 <Delete_User+0x20e>
    65c2:	8c 89       	ldd	r24, Y+20	; 0x14
    65c4:	81 30       	cpi	r24, 0x01	; 1
    65c6:	31 f0       	breq	.+12     	; 0x65d4 <Delete_User+0x20e>
				   {
					   User_Index_Prev_val=User_Index;
    65c8:	8c 89       	ldd	r24, Y+20	; 0x14
    65ca:	89 8b       	std	Y+17, r24	; 0x11
					   User_Index--;
    65cc:	8c 89       	ldd	r24, Y+20	; 0x14
    65ce:	81 50       	subi	r24, 0x01	; 1
    65d0:	8c 8b       	std	Y+20, r24	; 0x14
    65d2:	18 c0       	rjmp	.+48     	; 0x6604 <Delete_User+0x23e>
				   }
				   else if(Delete_User_Input==2 && (User_Index !=10) )
    65d4:	8d 89       	ldd	r24, Y+21	; 0x15
    65d6:	82 30       	cpi	r24, 0x02	; 2
    65d8:	49 f4       	brne	.+18     	; 0x65ec <Delete_User+0x226>
    65da:	8c 89       	ldd	r24, Y+20	; 0x14
    65dc:	8a 30       	cpi	r24, 0x0A	; 10
    65de:	31 f0       	breq	.+12     	; 0x65ec <Delete_User+0x226>
				   {
					   User_Index_Prev_val=User_Index;
    65e0:	8c 89       	ldd	r24, Y+20	; 0x14
    65e2:	89 8b       	std	Y+17, r24	; 0x11
					   User_Index++;
    65e4:	8c 89       	ldd	r24, Y+20	; 0x14
    65e6:	8f 5f       	subi	r24, 0xFF	; 255
    65e8:	8c 8b       	std	Y+20, r24	; 0x14
    65ea:	0c c0       	rjmp	.+24     	; 0x6604 <Delete_User+0x23e>
				   }
				   else if(Delete_User_Input==3)
    65ec:	8d 89       	ldd	r24, Y+21	; 0x15
    65ee:	83 30       	cpi	r24, 0x03	; 3
    65f0:	29 f4       	brne	.+10     	; 0x65fc <Delete_User+0x236>
				   {
					   //getting pass and saving it into eeprom code
					   Delete_Registered_User(User_Index);
    65f2:	8c 89       	ldd	r24, Y+20	; 0x14
    65f4:	0e 94 1d 37 	call	0x6e3a	; 0x6e3a <Delete_Registered_User>
					   Delete_User_Looper_ExitFlag=0;//replace with Delete_user_Looper_exitflag
    65f8:	1b 8a       	std	Y+19, r1	; 0x13
    65fa:	04 c0       	rjmp	.+8      	; 0x6604 <Delete_User+0x23e>
				   }
				   else if(Delete_User_Input==4)
    65fc:	8d 89       	ldd	r24, Y+21	; 0x15
    65fe:	84 30       	cpi	r24, 0x04	; 4
    6600:	09 f4       	brne	.+2      	; 0x6604 <Delete_User+0x23e>
				   {
					   Delete_User_Looper_ExitFlag=0;
    6602:	1b 8a       	std	Y+19, r1	; 0x13
	if(User_Empty_List_Counter==10)
	{
		User_List_Empty_Flag=1;
	}
		//add while loop with an exit flag
		while( (Delete_User_Looper_ExitFlag==1) && (User_List_Empty_Flag==0) )
    6604:	8b 89       	ldd	r24, Y+19	; 0x13
    6606:	81 30       	cpi	r24, 0x01	; 1
    6608:	21 f4       	brne	.+8      	; 0x6612 <Delete_User+0x24c>
    660a:	8a 89       	ldd	r24, Y+18	; 0x12
    660c:	88 23       	and	r24, r24
    660e:	09 f4       	brne	.+2      	; 0x6612 <Delete_User+0x24c>
    6610:	4c cf       	rjmp	.-360    	; 0x64aa <Delete_User+0xe4>
				   else if(Delete_User_Input==4)
				   {
					   Delete_User_Looper_ExitFlag=0;
				   }
		}
	if (User_List_Empty_Flag==1)
    6612:	8a 89       	ldd	r24, Y+18	; 0x12
    6614:	81 30       	cpi	r24, 0x01	; 1
    6616:	09 f0       	breq	.+2      	; 0x661a <Delete_User+0x254>
    6618:	80 c0       	rjmp	.+256    	; 0x671a <Delete_User+0x354>
	{
		LCD_CLR();
    661a:	0e 94 2b 13 	call	0x2656	; 0x2656 <LCD_CLR>
		 Bluetooth_SendString("\n--------------------\n");
    661e:	80 e6       	ldi	r24, 0x60	; 96
    6620:	90 e0       	ldi	r25, 0x00	; 0
    6622:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
		 Bluetooth_SendString("No Useres");
    6626:	84 eb       	ldi	r24, 0xB4	; 180
    6628:	94 e0       	ldi	r25, 0x04	; 4
    662a:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
		LCD_WriteString("No Users");
    662e:	8a e9       	ldi	r24, 0x9A	; 154
    6630:	91 e0       	ldi	r25, 0x01	; 1
    6632:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LCD_WriteString>
    6636:	80 e0       	ldi	r24, 0x00	; 0
    6638:	90 e0       	ldi	r25, 0x00	; 0
    663a:	aa ef       	ldi	r26, 0xFA	; 250
    663c:	b4 e4       	ldi	r27, 0x44	; 68
    663e:	8b 87       	std	Y+11, r24	; 0x0b
    6640:	9c 87       	std	Y+12, r25	; 0x0c
    6642:	ad 87       	std	Y+13, r26	; 0x0d
    6644:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6646:	6b 85       	ldd	r22, Y+11	; 0x0b
    6648:	7c 85       	ldd	r23, Y+12	; 0x0c
    664a:	8d 85       	ldd	r24, Y+13	; 0x0d
    664c:	9e 85       	ldd	r25, Y+14	; 0x0e
    664e:	20 e0       	ldi	r18, 0x00	; 0
    6650:	30 e0       	ldi	r19, 0x00	; 0
    6652:	4a ef       	ldi	r20, 0xFA	; 250
    6654:	54 e4       	ldi	r21, 0x44	; 68
    6656:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    665a:	dc 01       	movw	r26, r24
    665c:	cb 01       	movw	r24, r22
    665e:	8f 83       	std	Y+7, r24	; 0x07
    6660:	98 87       	std	Y+8, r25	; 0x08
    6662:	a9 87       	std	Y+9, r26	; 0x09
    6664:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6666:	6f 81       	ldd	r22, Y+7	; 0x07
    6668:	78 85       	ldd	r23, Y+8	; 0x08
    666a:	89 85       	ldd	r24, Y+9	; 0x09
    666c:	9a 85       	ldd	r25, Y+10	; 0x0a
    666e:	20 e0       	ldi	r18, 0x00	; 0
    6670:	30 e0       	ldi	r19, 0x00	; 0
    6672:	40 e8       	ldi	r20, 0x80	; 128
    6674:	5f e3       	ldi	r21, 0x3F	; 63
    6676:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    667a:	88 23       	and	r24, r24
    667c:	2c f4       	brge	.+10     	; 0x6688 <Delete_User+0x2c2>
		__ticks = 1;
    667e:	81 e0       	ldi	r24, 0x01	; 1
    6680:	90 e0       	ldi	r25, 0x00	; 0
    6682:	9e 83       	std	Y+6, r25	; 0x06
    6684:	8d 83       	std	Y+5, r24	; 0x05
    6686:	3f c0       	rjmp	.+126    	; 0x6706 <Delete_User+0x340>
	else if (__tmp > 65535)
    6688:	6f 81       	ldd	r22, Y+7	; 0x07
    668a:	78 85       	ldd	r23, Y+8	; 0x08
    668c:	89 85       	ldd	r24, Y+9	; 0x09
    668e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6690:	20 e0       	ldi	r18, 0x00	; 0
    6692:	3f ef       	ldi	r19, 0xFF	; 255
    6694:	4f e7       	ldi	r20, 0x7F	; 127
    6696:	57 e4       	ldi	r21, 0x47	; 71
    6698:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    669c:	18 16       	cp	r1, r24
    669e:	4c f5       	brge	.+82     	; 0x66f2 <Delete_User+0x32c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    66a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    66a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    66a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    66a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    66a8:	20 e0       	ldi	r18, 0x00	; 0
    66aa:	30 e0       	ldi	r19, 0x00	; 0
    66ac:	40 e2       	ldi	r20, 0x20	; 32
    66ae:	51 e4       	ldi	r21, 0x41	; 65
    66b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    66b4:	dc 01       	movw	r26, r24
    66b6:	cb 01       	movw	r24, r22
    66b8:	bc 01       	movw	r22, r24
    66ba:	cd 01       	movw	r24, r26
    66bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    66c0:	dc 01       	movw	r26, r24
    66c2:	cb 01       	movw	r24, r22
    66c4:	9e 83       	std	Y+6, r25	; 0x06
    66c6:	8d 83       	std	Y+5, r24	; 0x05
    66c8:	0f c0       	rjmp	.+30     	; 0x66e8 <Delete_User+0x322>
    66ca:	88 ec       	ldi	r24, 0xC8	; 200
    66cc:	90 e0       	ldi	r25, 0x00	; 0
    66ce:	9c 83       	std	Y+4, r25	; 0x04
    66d0:	8b 83       	std	Y+3, r24	; 0x03
    66d2:	8b 81       	ldd	r24, Y+3	; 0x03
    66d4:	9c 81       	ldd	r25, Y+4	; 0x04
    66d6:	01 97       	sbiw	r24, 0x01	; 1
    66d8:	f1 f7       	brne	.-4      	; 0x66d6 <Delete_User+0x310>
    66da:	9c 83       	std	Y+4, r25	; 0x04
    66dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    66de:	8d 81       	ldd	r24, Y+5	; 0x05
    66e0:	9e 81       	ldd	r25, Y+6	; 0x06
    66e2:	01 97       	sbiw	r24, 0x01	; 1
    66e4:	9e 83       	std	Y+6, r25	; 0x06
    66e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    66e8:	8d 81       	ldd	r24, Y+5	; 0x05
    66ea:	9e 81       	ldd	r25, Y+6	; 0x06
    66ec:	00 97       	sbiw	r24, 0x00	; 0
    66ee:	69 f7       	brne	.-38     	; 0x66ca <Delete_User+0x304>
    66f0:	14 c0       	rjmp	.+40     	; 0x671a <Delete_User+0x354>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    66f2:	6f 81       	ldd	r22, Y+7	; 0x07
    66f4:	78 85       	ldd	r23, Y+8	; 0x08
    66f6:	89 85       	ldd	r24, Y+9	; 0x09
    66f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    66fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    66fe:	dc 01       	movw	r26, r24
    6700:	cb 01       	movw	r24, r22
    6702:	9e 83       	std	Y+6, r25	; 0x06
    6704:	8d 83       	std	Y+5, r24	; 0x05
    6706:	8d 81       	ldd	r24, Y+5	; 0x05
    6708:	9e 81       	ldd	r25, Y+6	; 0x06
    670a:	9a 83       	std	Y+2, r25	; 0x02
    670c:	89 83       	std	Y+1, r24	; 0x01
    670e:	89 81       	ldd	r24, Y+1	; 0x01
    6710:	9a 81       	ldd	r25, Y+2	; 0x02
    6712:	01 97       	sbiw	r24, 0x01	; 1
    6714:	f1 f7       	brne	.-4      	; 0x6712 <Delete_User+0x34c>
    6716:	9a 83       	std	Y+2, r25	; 0x02
    6718:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2000);
	}

}
    671a:	65 96       	adiw	r28, 0x15	; 21
    671c:	0f b6       	in	r0, 0x3f	; 63
    671e:	f8 94       	cli
    6720:	de bf       	out	0x3e, r29	; 62
    6722:	0f be       	out	0x3f, r0	; 63
    6724:	cd bf       	out	0x3d, r28	; 61
    6726:	cf 91       	pop	r28
    6728:	df 91       	pop	r29
    672a:	08 95       	ret

0000672c <Right_Arrow>:
void Right_Arrow(void)
{
    672c:	df 93       	push	r29
    672e:	cf 93       	push	r28
    6730:	cd b7       	in	r28, 0x3d	; 61
    6732:	de b7       	in	r29, 0x3e	; 62
	Write_data(0b01111110);
    6734:	8e e7       	ldi	r24, 0x7E	; 126
    6736:	0e 94 3c 12 	call	0x2478	; 0x2478 <Write_data>
}
    673a:	cf 91       	pop	r28
    673c:	df 91       	pop	r29
    673e:	08 95       	ret

00006740 <Left_Arrow>:
void Left_Arrow(void)
{
    6740:	df 93       	push	r29
    6742:	cf 93       	push	r28
    6744:	cd b7       	in	r28, 0x3d	; 61
    6746:	de b7       	in	r29, 0x3e	; 62
	Write_data(0b01111111);
    6748:	8f e7       	ldi	r24, 0x7F	; 127
    674a:	0e 94 3c 12 	call	0x2478	; 0x2478 <Write_data>
}
    674e:	cf 91       	pop	r28
    6750:	df 91       	pop	r29
    6752:	08 95       	ret

00006754 <Celsius_Sym>:
void Celsius_Sym(void)
{
    6754:	df 93       	push	r29
    6756:	cf 93       	push	r28
    6758:	cd b7       	in	r28, 0x3d	; 61
    675a:	de b7       	in	r29, 0x3e	; 62
	Write_data(0b11011111);//degree symbol
    675c:	8f ed       	ldi	r24, 0xDF	; 223
    675e:	0e 94 3c 12 	call	0x2478	; 0x2478 <Write_data>
	Write_data('C');
    6762:	83 e4       	ldi	r24, 0x43	; 67
    6764:	0e 94 3c 12 	call	0x2478	; 0x2478 <Write_data>
}
    6768:	cf 91       	pop	r28
    676a:	df 91       	pop	r29
    676c:	08 95       	ret

0000676e <Save_User_Password>:

void Save_User_Password(u8 User_index)
{
    676e:	0f 93       	push	r16
    6770:	1f 93       	push	r17
    6772:	df 93       	push	r29
    6774:	cf 93       	push	r28
    6776:	cd b7       	in	r28, 0x3d	; 61
    6778:	de b7       	in	r29, 0x3e	; 62
    677a:	c0 55       	subi	r28, 0x50	; 80
    677c:	d0 40       	sbci	r29, 0x00	; 0
    677e:	0f b6       	in	r0, 0x3f	; 63
    6780:	f8 94       	cli
    6782:	de bf       	out	0x3e, r29	; 62
    6784:	0f be       	out	0x3f, r0	; 63
    6786:	cd bf       	out	0x3d, r28	; 61
    6788:	fe 01       	movw	r30, r28
    678a:	e0 5b       	subi	r30, 0xB0	; 176
    678c:	ff 4f       	sbci	r31, 0xFF	; 255
    678e:	80 83       	st	Z, r24
	LCD_CLR();
    6790:	0e 94 2b 13 	call	0x2656	; 0x2656 <LCD_CLR>
	u8 i,Local_User_Password[4]={0},Counter=0,Local_input;
    6794:	fe 01       	movw	r30, r28
    6796:	e5 5b       	subi	r30, 0xB5	; 181
    6798:	ff 4f       	sbci	r31, 0xFF	; 255
    679a:	10 82       	st	Z, r1
    679c:	11 82       	std	Z+1, r1	; 0x01
    679e:	12 82       	std	Z+2, r1	; 0x02
    67a0:	13 82       	std	Z+3, r1	; 0x03
    67a2:	fe 01       	movw	r30, r28
    67a4:	e7 5b       	subi	r30, 0xB7	; 183
    67a6:	ff 4f       	sbci	r31, 0xFF	; 255
    67a8:	10 82       	st	Z, r1
	u8 Local_Address_Reader,test;

	Local_Address_Reader=Array_Of_Addresses_Location[User_index-1];
    67aa:	fe 01       	movw	r30, r28
    67ac:	e0 5b       	subi	r30, 0xB0	; 176
    67ae:	ff 4f       	sbci	r31, 0xFF	; 255
    67b0:	80 81       	ld	r24, Z
    67b2:	88 2f       	mov	r24, r24
    67b4:	90 e0       	ldi	r25, 0x00	; 0
    67b6:	01 97       	sbiw	r24, 0x01	; 1
    67b8:	de 01       	movw	r26, r28
    67ba:	a8 5b       	subi	r26, 0xB8	; 184
    67bc:	bf 4f       	sbci	r27, 0xFF	; 255
    67be:	fc 01       	movw	r30, r24
    67c0:	ee 5c       	subi	r30, 0xCE	; 206
    67c2:	fa 4f       	sbci	r31, 0xFA	; 250
    67c4:	80 81       	ld	r24, Z
    67c6:	8c 93       	st	X, r24
	LCD_WriteString("Enter Password");
    67c8:	8e eb       	ldi	r24, 0xBE	; 190
    67ca:	94 e0       	ldi	r25, 0x04	; 4
    67cc:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LCD_WriteString>
	LCD_goto(5,1);//to wrtie in the center
    67d0:	85 e0       	ldi	r24, 0x05	; 5
    67d2:	61 e0       	ldi	r22, 0x01	; 1
    67d4:	0e 94 13 13 	call	0x2626	; 0x2626 <LCD_goto>
    67d8:	3a c0       	rjmp	.+116    	; 0x684e <Save_User_Password+0xe0>
	 while(Counter<=3)
				 {
					Local_input = UART_u8Receiver();
    67da:	0e 94 a3 1a 	call	0x3546	; 0x3546 <UART_u8Receiver>
    67de:	fe 01       	movw	r30, r28
    67e0:	e1 5b       	subi	r30, 0xB1	; 177
    67e2:	ff 4f       	sbci	r31, 0xFF	; 255
    67e4:	80 83       	st	Z, r24
					ASCII_Conversion(&Local_input);
    67e6:	ce 01       	movw	r24, r28
    67e8:	81 5b       	subi	r24, 0xB1	; 177
    67ea:	9f 4f       	sbci	r25, 0xFF	; 255
    67ec:	0e 94 b7 1c 	call	0x396e	; 0x396e <ASCII_Conversion>
					Local_User_Password[Counter]=Local_input;
    67f0:	fe 01       	movw	r30, r28
    67f2:	e7 5b       	subi	r30, 0xB7	; 183
    67f4:	ff 4f       	sbci	r31, 0xFF	; 255
    67f6:	80 81       	ld	r24, Z
    67f8:	28 2f       	mov	r18, r24
    67fa:	30 e0       	ldi	r19, 0x00	; 0
    67fc:	fe 01       	movw	r30, r28
    67fe:	e1 5b       	subi	r30, 0xB1	; 177
    6800:	ff 4f       	sbci	r31, 0xFF	; 255
    6802:	40 81       	ld	r20, Z
    6804:	ce 01       	movw	r24, r28
    6806:	85 5b       	subi	r24, 0xB5	; 181
    6808:	9f 4f       	sbci	r25, 0xFF	; 255
    680a:	fc 01       	movw	r30, r24
    680c:	e2 0f       	add	r30, r18
    680e:	f3 1f       	adc	r31, r19
    6810:	40 83       	st	Z, r20
					LCD_PrintNum(Local_User_Password[Counter]);
    6812:	fe 01       	movw	r30, r28
    6814:	e7 5b       	subi	r30, 0xB7	; 183
    6816:	ff 4f       	sbci	r31, 0xFF	; 255
    6818:	80 81       	ld	r24, Z
    681a:	28 2f       	mov	r18, r24
    681c:	30 e0       	ldi	r19, 0x00	; 0
    681e:	ce 01       	movw	r24, r28
    6820:	85 5b       	subi	r24, 0xB5	; 181
    6822:	9f 4f       	sbci	r25, 0xFF	; 255
    6824:	fc 01       	movw	r30, r24
    6826:	e2 0f       	add	r30, r18
    6828:	f3 1f       	adc	r31, r19
    682a:	80 81       	ld	r24, Z
    682c:	88 2f       	mov	r24, r24
    682e:	90 e0       	ldi	r25, 0x00	; 0
    6830:	a0 e0       	ldi	r26, 0x00	; 0
    6832:	b0 e0       	ldi	r27, 0x00	; 0
    6834:	bc 01       	movw	r22, r24
    6836:	cd 01       	movw	r24, r26
    6838:	0e 94 49 13 	call	0x2692	; 0x2692 <LCD_PrintNum>
					Counter++;
    683c:	de 01       	movw	r26, r28
    683e:	a7 5b       	subi	r26, 0xB7	; 183
    6840:	bf 4f       	sbci	r27, 0xFF	; 255
    6842:	fe 01       	movw	r30, r28
    6844:	e7 5b       	subi	r30, 0xB7	; 183
    6846:	ff 4f       	sbci	r31, 0xFF	; 255
    6848:	80 81       	ld	r24, Z
    684a:	8f 5f       	subi	r24, 0xFF	; 255
    684c:	8c 93       	st	X, r24
	u8 Local_Address_Reader,test;

	Local_Address_Reader=Array_Of_Addresses_Location[User_index-1];
	LCD_WriteString("Enter Password");
	LCD_goto(5,1);//to wrtie in the center
	 while(Counter<=3)
    684e:	fe 01       	movw	r30, r28
    6850:	e7 5b       	subi	r30, 0xB7	; 183
    6852:	ff 4f       	sbci	r31, 0xFF	; 255
    6854:	80 81       	ld	r24, Z
    6856:	84 30       	cpi	r24, 0x04	; 4
    6858:	08 f4       	brcc	.+2      	; 0x685c <Save_User_Password+0xee>
    685a:	bf cf       	rjmp	.-130    	; 0x67da <Save_User_Password+0x6c>
    685c:	fe 01       	movw	r30, r28
    685e:	ed 5b       	subi	r30, 0xBD	; 189
    6860:	ff 4f       	sbci	r31, 0xFF	; 255
    6862:	80 e0       	ldi	r24, 0x00	; 0
    6864:	90 e0       	ldi	r25, 0x00	; 0
    6866:	aa e7       	ldi	r26, 0x7A	; 122
    6868:	b4 e4       	ldi	r27, 0x44	; 68
    686a:	80 83       	st	Z, r24
    686c:	91 83       	std	Z+1, r25	; 0x01
    686e:	a2 83       	std	Z+2, r26	; 0x02
    6870:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6872:	8e 01       	movw	r16, r28
    6874:	01 5c       	subi	r16, 0xC1	; 193
    6876:	1f 4f       	sbci	r17, 0xFF	; 255
    6878:	fe 01       	movw	r30, r28
    687a:	ed 5b       	subi	r30, 0xBD	; 189
    687c:	ff 4f       	sbci	r31, 0xFF	; 255
    687e:	60 81       	ld	r22, Z
    6880:	71 81       	ldd	r23, Z+1	; 0x01
    6882:	82 81       	ldd	r24, Z+2	; 0x02
    6884:	93 81       	ldd	r25, Z+3	; 0x03
    6886:	20 e0       	ldi	r18, 0x00	; 0
    6888:	30 e0       	ldi	r19, 0x00	; 0
    688a:	4a ef       	ldi	r20, 0xFA	; 250
    688c:	54 e4       	ldi	r21, 0x44	; 68
    688e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6892:	dc 01       	movw	r26, r24
    6894:	cb 01       	movw	r24, r22
    6896:	f8 01       	movw	r30, r16
    6898:	80 83       	st	Z, r24
    689a:	91 83       	std	Z+1, r25	; 0x01
    689c:	a2 83       	std	Z+2, r26	; 0x02
    689e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    68a0:	fe 01       	movw	r30, r28
    68a2:	ff 96       	adiw	r30, 0x3f	; 63
    68a4:	60 81       	ld	r22, Z
    68a6:	71 81       	ldd	r23, Z+1	; 0x01
    68a8:	82 81       	ldd	r24, Z+2	; 0x02
    68aa:	93 81       	ldd	r25, Z+3	; 0x03
    68ac:	20 e0       	ldi	r18, 0x00	; 0
    68ae:	30 e0       	ldi	r19, 0x00	; 0
    68b0:	40 e8       	ldi	r20, 0x80	; 128
    68b2:	5f e3       	ldi	r21, 0x3F	; 63
    68b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    68b8:	88 23       	and	r24, r24
    68ba:	2c f4       	brge	.+10     	; 0x68c6 <Save_User_Password+0x158>
		__ticks = 1;
    68bc:	81 e0       	ldi	r24, 0x01	; 1
    68be:	90 e0       	ldi	r25, 0x00	; 0
    68c0:	9e af       	std	Y+62, r25	; 0x3e
    68c2:	8d af       	std	Y+61, r24	; 0x3d
    68c4:	46 c0       	rjmp	.+140    	; 0x6952 <Save_User_Password+0x1e4>
	else if (__tmp > 65535)
    68c6:	fe 01       	movw	r30, r28
    68c8:	ff 96       	adiw	r30, 0x3f	; 63
    68ca:	60 81       	ld	r22, Z
    68cc:	71 81       	ldd	r23, Z+1	; 0x01
    68ce:	82 81       	ldd	r24, Z+2	; 0x02
    68d0:	93 81       	ldd	r25, Z+3	; 0x03
    68d2:	20 e0       	ldi	r18, 0x00	; 0
    68d4:	3f ef       	ldi	r19, 0xFF	; 255
    68d6:	4f e7       	ldi	r20, 0x7F	; 127
    68d8:	57 e4       	ldi	r21, 0x47	; 71
    68da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    68de:	18 16       	cp	r1, r24
    68e0:	64 f5       	brge	.+88     	; 0x693a <Save_User_Password+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    68e2:	fe 01       	movw	r30, r28
    68e4:	ed 5b       	subi	r30, 0xBD	; 189
    68e6:	ff 4f       	sbci	r31, 0xFF	; 255
    68e8:	60 81       	ld	r22, Z
    68ea:	71 81       	ldd	r23, Z+1	; 0x01
    68ec:	82 81       	ldd	r24, Z+2	; 0x02
    68ee:	93 81       	ldd	r25, Z+3	; 0x03
    68f0:	20 e0       	ldi	r18, 0x00	; 0
    68f2:	30 e0       	ldi	r19, 0x00	; 0
    68f4:	40 e2       	ldi	r20, 0x20	; 32
    68f6:	51 e4       	ldi	r21, 0x41	; 65
    68f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    68fc:	dc 01       	movw	r26, r24
    68fe:	cb 01       	movw	r24, r22
    6900:	bc 01       	movw	r22, r24
    6902:	cd 01       	movw	r24, r26
    6904:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6908:	dc 01       	movw	r26, r24
    690a:	cb 01       	movw	r24, r22
    690c:	9e af       	std	Y+62, r25	; 0x3e
    690e:	8d af       	std	Y+61, r24	; 0x3d
    6910:	0f c0       	rjmp	.+30     	; 0x6930 <Save_User_Password+0x1c2>
    6912:	88 ec       	ldi	r24, 0xC8	; 200
    6914:	90 e0       	ldi	r25, 0x00	; 0
    6916:	9c af       	std	Y+60, r25	; 0x3c
    6918:	8b af       	std	Y+59, r24	; 0x3b
    691a:	8b ad       	ldd	r24, Y+59	; 0x3b
    691c:	9c ad       	ldd	r25, Y+60	; 0x3c
    691e:	01 97       	sbiw	r24, 0x01	; 1
    6920:	f1 f7       	brne	.-4      	; 0x691e <Save_User_Password+0x1b0>
    6922:	9c af       	std	Y+60, r25	; 0x3c
    6924:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6926:	8d ad       	ldd	r24, Y+61	; 0x3d
    6928:	9e ad       	ldd	r25, Y+62	; 0x3e
    692a:	01 97       	sbiw	r24, 0x01	; 1
    692c:	9e af       	std	Y+62, r25	; 0x3e
    692e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6930:	8d ad       	ldd	r24, Y+61	; 0x3d
    6932:	9e ad       	ldd	r25, Y+62	; 0x3e
    6934:	00 97       	sbiw	r24, 0x00	; 0
    6936:	69 f7       	brne	.-38     	; 0x6912 <Save_User_Password+0x1a4>
    6938:	16 c0       	rjmp	.+44     	; 0x6966 <Save_User_Password+0x1f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    693a:	fe 01       	movw	r30, r28
    693c:	ff 96       	adiw	r30, 0x3f	; 63
    693e:	60 81       	ld	r22, Z
    6940:	71 81       	ldd	r23, Z+1	; 0x01
    6942:	82 81       	ldd	r24, Z+2	; 0x02
    6944:	93 81       	ldd	r25, Z+3	; 0x03
    6946:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    694a:	dc 01       	movw	r26, r24
    694c:	cb 01       	movw	r24, r22
    694e:	9e af       	std	Y+62, r25	; 0x3e
    6950:	8d af       	std	Y+61, r24	; 0x3d
    6952:	8d ad       	ldd	r24, Y+61	; 0x3d
    6954:	9e ad       	ldd	r25, Y+62	; 0x3e
    6956:	9a af       	std	Y+58, r25	; 0x3a
    6958:	89 af       	std	Y+57, r24	; 0x39
    695a:	89 ad       	ldd	r24, Y+57	; 0x39
    695c:	9a ad       	ldd	r25, Y+58	; 0x3a
    695e:	01 97       	sbiw	r24, 0x01	; 1
    6960:	f1 f7       	brne	.-4      	; 0x695e <Save_User_Password+0x1f0>
    6962:	9a af       	std	Y+58, r25	; 0x3a
    6964:	89 af       	std	Y+57, r24	; 0x39
					Local_User_Password[Counter]=Local_input;
					LCD_PrintNum(Local_User_Password[Counter]);
					Counter++;
				 }
	 _delay_ms(1000);
	 for(i=0;i<4;i++)
    6966:	fe 01       	movw	r30, r28
    6968:	e6 5b       	subi	r30, 0xB6	; 182
    696a:	ff 4f       	sbci	r31, 0xFF	; 255
    696c:	10 82       	st	Z, r1
    696e:	9b c0       	rjmp	.+310    	; 0x6aa6 <Save_User_Password+0x338>
	 {
		 eeprom_write_byte(Local_Address_Reader,Local_User_Password[i]);
    6970:	fe 01       	movw	r30, r28
    6972:	e8 5b       	subi	r30, 0xB8	; 184
    6974:	ff 4f       	sbci	r31, 0xFF	; 255
    6976:	80 81       	ld	r24, Z
    6978:	48 2f       	mov	r20, r24
    697a:	50 e0       	ldi	r21, 0x00	; 0
    697c:	fe 01       	movw	r30, r28
    697e:	e6 5b       	subi	r30, 0xB6	; 182
    6980:	ff 4f       	sbci	r31, 0xFF	; 255
    6982:	80 81       	ld	r24, Z
    6984:	28 2f       	mov	r18, r24
    6986:	30 e0       	ldi	r19, 0x00	; 0
    6988:	ce 01       	movw	r24, r28
    698a:	85 5b       	subi	r24, 0xB5	; 181
    698c:	9f 4f       	sbci	r25, 0xFF	; 255
    698e:	fc 01       	movw	r30, r24
    6990:	e2 0f       	add	r30, r18
    6992:	f3 1f       	adc	r31, r19
    6994:	20 81       	ld	r18, Z
    6996:	ca 01       	movw	r24, r20
    6998:	62 2f       	mov	r22, r18
    699a:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <eeprom_write_byte>
		 Local_Address_Reader++;
    699e:	de 01       	movw	r26, r28
    69a0:	a8 5b       	subi	r26, 0xB8	; 184
    69a2:	bf 4f       	sbci	r27, 0xFF	; 255
    69a4:	fe 01       	movw	r30, r28
    69a6:	e8 5b       	subi	r30, 0xB8	; 184
    69a8:	ff 4f       	sbci	r31, 0xFF	; 255
    69aa:	80 81       	ld	r24, Z
    69ac:	8f 5f       	subi	r24, 0xFF	; 255
    69ae:	8c 93       	st	X, r24
    69b0:	80 e0       	ldi	r24, 0x00	; 0
    69b2:	90 e0       	ldi	r25, 0x00	; 0
    69b4:	a8 e4       	ldi	r26, 0x48	; 72
    69b6:	b2 e4       	ldi	r27, 0x42	; 66
    69b8:	8d ab       	std	Y+53, r24	; 0x35
    69ba:	9e ab       	std	Y+54, r25	; 0x36
    69bc:	af ab       	std	Y+55, r26	; 0x37
    69be:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    69c0:	6d a9       	ldd	r22, Y+53	; 0x35
    69c2:	7e a9       	ldd	r23, Y+54	; 0x36
    69c4:	8f a9       	ldd	r24, Y+55	; 0x37
    69c6:	98 ad       	ldd	r25, Y+56	; 0x38
    69c8:	20 e0       	ldi	r18, 0x00	; 0
    69ca:	30 e0       	ldi	r19, 0x00	; 0
    69cc:	4a ef       	ldi	r20, 0xFA	; 250
    69ce:	54 e4       	ldi	r21, 0x44	; 68
    69d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    69d4:	dc 01       	movw	r26, r24
    69d6:	cb 01       	movw	r24, r22
    69d8:	89 ab       	std	Y+49, r24	; 0x31
    69da:	9a ab       	std	Y+50, r25	; 0x32
    69dc:	ab ab       	std	Y+51, r26	; 0x33
    69de:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    69e0:	69 a9       	ldd	r22, Y+49	; 0x31
    69e2:	7a a9       	ldd	r23, Y+50	; 0x32
    69e4:	8b a9       	ldd	r24, Y+51	; 0x33
    69e6:	9c a9       	ldd	r25, Y+52	; 0x34
    69e8:	20 e0       	ldi	r18, 0x00	; 0
    69ea:	30 e0       	ldi	r19, 0x00	; 0
    69ec:	40 e8       	ldi	r20, 0x80	; 128
    69ee:	5f e3       	ldi	r21, 0x3F	; 63
    69f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    69f4:	88 23       	and	r24, r24
    69f6:	2c f4       	brge	.+10     	; 0x6a02 <Save_User_Password+0x294>
		__ticks = 1;
    69f8:	81 e0       	ldi	r24, 0x01	; 1
    69fa:	90 e0       	ldi	r25, 0x00	; 0
    69fc:	98 ab       	std	Y+48, r25	; 0x30
    69fe:	8f a7       	std	Y+47, r24	; 0x2f
    6a00:	3f c0       	rjmp	.+126    	; 0x6a80 <Save_User_Password+0x312>
	else if (__tmp > 65535)
    6a02:	69 a9       	ldd	r22, Y+49	; 0x31
    6a04:	7a a9       	ldd	r23, Y+50	; 0x32
    6a06:	8b a9       	ldd	r24, Y+51	; 0x33
    6a08:	9c a9       	ldd	r25, Y+52	; 0x34
    6a0a:	20 e0       	ldi	r18, 0x00	; 0
    6a0c:	3f ef       	ldi	r19, 0xFF	; 255
    6a0e:	4f e7       	ldi	r20, 0x7F	; 127
    6a10:	57 e4       	ldi	r21, 0x47	; 71
    6a12:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    6a16:	18 16       	cp	r1, r24
    6a18:	4c f5       	brge	.+82     	; 0x6a6c <Save_User_Password+0x2fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6a1a:	6d a9       	ldd	r22, Y+53	; 0x35
    6a1c:	7e a9       	ldd	r23, Y+54	; 0x36
    6a1e:	8f a9       	ldd	r24, Y+55	; 0x37
    6a20:	98 ad       	ldd	r25, Y+56	; 0x38
    6a22:	20 e0       	ldi	r18, 0x00	; 0
    6a24:	30 e0       	ldi	r19, 0x00	; 0
    6a26:	40 e2       	ldi	r20, 0x20	; 32
    6a28:	51 e4       	ldi	r21, 0x41	; 65
    6a2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6a2e:	dc 01       	movw	r26, r24
    6a30:	cb 01       	movw	r24, r22
    6a32:	bc 01       	movw	r22, r24
    6a34:	cd 01       	movw	r24, r26
    6a36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6a3a:	dc 01       	movw	r26, r24
    6a3c:	cb 01       	movw	r24, r22
    6a3e:	98 ab       	std	Y+48, r25	; 0x30
    6a40:	8f a7       	std	Y+47, r24	; 0x2f
    6a42:	0f c0       	rjmp	.+30     	; 0x6a62 <Save_User_Password+0x2f4>
    6a44:	88 ec       	ldi	r24, 0xC8	; 200
    6a46:	90 e0       	ldi	r25, 0x00	; 0
    6a48:	9e a7       	std	Y+46, r25	; 0x2e
    6a4a:	8d a7       	std	Y+45, r24	; 0x2d
    6a4c:	8d a5       	ldd	r24, Y+45	; 0x2d
    6a4e:	9e a5       	ldd	r25, Y+46	; 0x2e
    6a50:	01 97       	sbiw	r24, 0x01	; 1
    6a52:	f1 f7       	brne	.-4      	; 0x6a50 <Save_User_Password+0x2e2>
    6a54:	9e a7       	std	Y+46, r25	; 0x2e
    6a56:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6a58:	8f a5       	ldd	r24, Y+47	; 0x2f
    6a5a:	98 a9       	ldd	r25, Y+48	; 0x30
    6a5c:	01 97       	sbiw	r24, 0x01	; 1
    6a5e:	98 ab       	std	Y+48, r25	; 0x30
    6a60:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6a62:	8f a5       	ldd	r24, Y+47	; 0x2f
    6a64:	98 a9       	ldd	r25, Y+48	; 0x30
    6a66:	00 97       	sbiw	r24, 0x00	; 0
    6a68:	69 f7       	brne	.-38     	; 0x6a44 <Save_User_Password+0x2d6>
    6a6a:	14 c0       	rjmp	.+40     	; 0x6a94 <Save_User_Password+0x326>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6a6c:	69 a9       	ldd	r22, Y+49	; 0x31
    6a6e:	7a a9       	ldd	r23, Y+50	; 0x32
    6a70:	8b a9       	ldd	r24, Y+51	; 0x33
    6a72:	9c a9       	ldd	r25, Y+52	; 0x34
    6a74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6a78:	dc 01       	movw	r26, r24
    6a7a:	cb 01       	movw	r24, r22
    6a7c:	98 ab       	std	Y+48, r25	; 0x30
    6a7e:	8f a7       	std	Y+47, r24	; 0x2f
    6a80:	8f a5       	ldd	r24, Y+47	; 0x2f
    6a82:	98 a9       	ldd	r25, Y+48	; 0x30
    6a84:	9c a7       	std	Y+44, r25	; 0x2c
    6a86:	8b a7       	std	Y+43, r24	; 0x2b
    6a88:	8b a5       	ldd	r24, Y+43	; 0x2b
    6a8a:	9c a5       	ldd	r25, Y+44	; 0x2c
    6a8c:	01 97       	sbiw	r24, 0x01	; 1
    6a8e:	f1 f7       	brne	.-4      	; 0x6a8c <Save_User_Password+0x31e>
    6a90:	9c a7       	std	Y+44, r25	; 0x2c
    6a92:	8b a7       	std	Y+43, r24	; 0x2b
					Local_User_Password[Counter]=Local_input;
					LCD_PrintNum(Local_User_Password[Counter]);
					Counter++;
				 }
	 _delay_ms(1000);
	 for(i=0;i<4;i++)
    6a94:	de 01       	movw	r26, r28
    6a96:	a6 5b       	subi	r26, 0xB6	; 182
    6a98:	bf 4f       	sbci	r27, 0xFF	; 255
    6a9a:	fe 01       	movw	r30, r28
    6a9c:	e6 5b       	subi	r30, 0xB6	; 182
    6a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    6aa0:	80 81       	ld	r24, Z
    6aa2:	8f 5f       	subi	r24, 0xFF	; 255
    6aa4:	8c 93       	st	X, r24
    6aa6:	fe 01       	movw	r30, r28
    6aa8:	e6 5b       	subi	r30, 0xB6	; 182
    6aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    6aac:	80 81       	ld	r24, Z
    6aae:	84 30       	cpi	r24, 0x04	; 4
    6ab0:	08 f4       	brcc	.+2      	; 0x6ab4 <Save_User_Password+0x346>
    6ab2:	5e cf       	rjmp	.-324    	; 0x6970 <Save_User_Password+0x202>
		 eeprom_write_byte(Local_Address_Reader,Local_User_Password[i]);
		 Local_Address_Reader++;
		 _delay_ms(50);
	 }
	 /* For Testing Purposes */
	 Local_Address_Reader=Array_Of_Addresses_Location[User_index-1];
    6ab4:	fe 01       	movw	r30, r28
    6ab6:	e0 5b       	subi	r30, 0xB0	; 176
    6ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    6aba:	80 81       	ld	r24, Z
    6abc:	88 2f       	mov	r24, r24
    6abe:	90 e0       	ldi	r25, 0x00	; 0
    6ac0:	01 97       	sbiw	r24, 0x01	; 1
    6ac2:	de 01       	movw	r26, r28
    6ac4:	a8 5b       	subi	r26, 0xB8	; 184
    6ac6:	bf 4f       	sbci	r27, 0xFF	; 255
    6ac8:	fc 01       	movw	r30, r24
    6aca:	ee 5c       	subi	r30, 0xCE	; 206
    6acc:	fa 4f       	sbci	r31, 0xFA	; 250
    6ace:	80 81       	ld	r24, Z
    6ad0:	8c 93       	st	X, r24
	 LCD_CLR();
    6ad2:	0e 94 2b 13 	call	0x2656	; 0x2656 <LCD_CLR>
	 for(i=0;i<4;i++)
    6ad6:	fe 01       	movw	r30, r28
    6ad8:	e6 5b       	subi	r30, 0xB6	; 182
    6ada:	ff 4f       	sbci	r31, 0xFF	; 255
    6adc:	10 82       	st	Z, r1
    6ade:	9c c0       	rjmp	.+312    	; 0x6c18 <Save_User_Password+0x4aa>
		 {
			 test=eeprom_read_byte(Local_Address_Reader);
    6ae0:	fe 01       	movw	r30, r28
    6ae2:	e8 5b       	subi	r30, 0xB8	; 184
    6ae4:	ff 4f       	sbci	r31, 0xFF	; 255
    6ae6:	80 81       	ld	r24, Z
    6ae8:	88 2f       	mov	r24, r24
    6aea:	90 e0       	ldi	r25, 0x00	; 0
    6aec:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <eeprom_read_byte>
    6af0:	fe 01       	movw	r30, r28
    6af2:	e9 5b       	subi	r30, 0xB9	; 185
    6af4:	ff 4f       	sbci	r31, 0xFF	; 255
    6af6:	80 83       	st	Z, r24
			 LCD_PrintNum(test);
    6af8:	fe 01       	movw	r30, r28
    6afa:	e9 5b       	subi	r30, 0xB9	; 185
    6afc:	ff 4f       	sbci	r31, 0xFF	; 255
    6afe:	80 81       	ld	r24, Z
    6b00:	88 2f       	mov	r24, r24
    6b02:	90 e0       	ldi	r25, 0x00	; 0
    6b04:	a0 e0       	ldi	r26, 0x00	; 0
    6b06:	b0 e0       	ldi	r27, 0x00	; 0
    6b08:	bc 01       	movw	r22, r24
    6b0a:	cd 01       	movw	r24, r26
    6b0c:	0e 94 49 13 	call	0x2692	; 0x2692 <LCD_PrintNum>
			 Local_Address_Reader++;
    6b10:	de 01       	movw	r26, r28
    6b12:	a8 5b       	subi	r26, 0xB8	; 184
    6b14:	bf 4f       	sbci	r27, 0xFF	; 255
    6b16:	fe 01       	movw	r30, r28
    6b18:	e8 5b       	subi	r30, 0xB8	; 184
    6b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    6b1c:	80 81       	ld	r24, Z
    6b1e:	8f 5f       	subi	r24, 0xFF	; 255
    6b20:	8c 93       	st	X, r24
    6b22:	80 e0       	ldi	r24, 0x00	; 0
    6b24:	90 e0       	ldi	r25, 0x00	; 0
    6b26:	aa e7       	ldi	r26, 0x7A	; 122
    6b28:	b4 e4       	ldi	r27, 0x44	; 68
    6b2a:	8f a3       	std	Y+39, r24	; 0x27
    6b2c:	98 a7       	std	Y+40, r25	; 0x28
    6b2e:	a9 a7       	std	Y+41, r26	; 0x29
    6b30:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6b32:	6f a1       	ldd	r22, Y+39	; 0x27
    6b34:	78 a5       	ldd	r23, Y+40	; 0x28
    6b36:	89 a5       	ldd	r24, Y+41	; 0x29
    6b38:	9a a5       	ldd	r25, Y+42	; 0x2a
    6b3a:	20 e0       	ldi	r18, 0x00	; 0
    6b3c:	30 e0       	ldi	r19, 0x00	; 0
    6b3e:	4a ef       	ldi	r20, 0xFA	; 250
    6b40:	54 e4       	ldi	r21, 0x44	; 68
    6b42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6b46:	dc 01       	movw	r26, r24
    6b48:	cb 01       	movw	r24, r22
    6b4a:	8b a3       	std	Y+35, r24	; 0x23
    6b4c:	9c a3       	std	Y+36, r25	; 0x24
    6b4e:	ad a3       	std	Y+37, r26	; 0x25
    6b50:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    6b52:	6b a1       	ldd	r22, Y+35	; 0x23
    6b54:	7c a1       	ldd	r23, Y+36	; 0x24
    6b56:	8d a1       	ldd	r24, Y+37	; 0x25
    6b58:	9e a1       	ldd	r25, Y+38	; 0x26
    6b5a:	20 e0       	ldi	r18, 0x00	; 0
    6b5c:	30 e0       	ldi	r19, 0x00	; 0
    6b5e:	40 e8       	ldi	r20, 0x80	; 128
    6b60:	5f e3       	ldi	r21, 0x3F	; 63
    6b62:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    6b66:	88 23       	and	r24, r24
    6b68:	2c f4       	brge	.+10     	; 0x6b74 <Save_User_Password+0x406>
		__ticks = 1;
    6b6a:	81 e0       	ldi	r24, 0x01	; 1
    6b6c:	90 e0       	ldi	r25, 0x00	; 0
    6b6e:	9a a3       	std	Y+34, r25	; 0x22
    6b70:	89 a3       	std	Y+33, r24	; 0x21
    6b72:	3f c0       	rjmp	.+126    	; 0x6bf2 <Save_User_Password+0x484>
	else if (__tmp > 65535)
    6b74:	6b a1       	ldd	r22, Y+35	; 0x23
    6b76:	7c a1       	ldd	r23, Y+36	; 0x24
    6b78:	8d a1       	ldd	r24, Y+37	; 0x25
    6b7a:	9e a1       	ldd	r25, Y+38	; 0x26
    6b7c:	20 e0       	ldi	r18, 0x00	; 0
    6b7e:	3f ef       	ldi	r19, 0xFF	; 255
    6b80:	4f e7       	ldi	r20, 0x7F	; 127
    6b82:	57 e4       	ldi	r21, 0x47	; 71
    6b84:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    6b88:	18 16       	cp	r1, r24
    6b8a:	4c f5       	brge	.+82     	; 0x6bde <Save_User_Password+0x470>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6b8c:	6f a1       	ldd	r22, Y+39	; 0x27
    6b8e:	78 a5       	ldd	r23, Y+40	; 0x28
    6b90:	89 a5       	ldd	r24, Y+41	; 0x29
    6b92:	9a a5       	ldd	r25, Y+42	; 0x2a
    6b94:	20 e0       	ldi	r18, 0x00	; 0
    6b96:	30 e0       	ldi	r19, 0x00	; 0
    6b98:	40 e2       	ldi	r20, 0x20	; 32
    6b9a:	51 e4       	ldi	r21, 0x41	; 65
    6b9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6ba0:	dc 01       	movw	r26, r24
    6ba2:	cb 01       	movw	r24, r22
    6ba4:	bc 01       	movw	r22, r24
    6ba6:	cd 01       	movw	r24, r26
    6ba8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6bac:	dc 01       	movw	r26, r24
    6bae:	cb 01       	movw	r24, r22
    6bb0:	9a a3       	std	Y+34, r25	; 0x22
    6bb2:	89 a3       	std	Y+33, r24	; 0x21
    6bb4:	0f c0       	rjmp	.+30     	; 0x6bd4 <Save_User_Password+0x466>
    6bb6:	88 ec       	ldi	r24, 0xC8	; 200
    6bb8:	90 e0       	ldi	r25, 0x00	; 0
    6bba:	98 a3       	std	Y+32, r25	; 0x20
    6bbc:	8f 8f       	std	Y+31, r24	; 0x1f
    6bbe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6bc0:	98 a1       	ldd	r25, Y+32	; 0x20
    6bc2:	01 97       	sbiw	r24, 0x01	; 1
    6bc4:	f1 f7       	brne	.-4      	; 0x6bc2 <Save_User_Password+0x454>
    6bc6:	98 a3       	std	Y+32, r25	; 0x20
    6bc8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6bca:	89 a1       	ldd	r24, Y+33	; 0x21
    6bcc:	9a a1       	ldd	r25, Y+34	; 0x22
    6bce:	01 97       	sbiw	r24, 0x01	; 1
    6bd0:	9a a3       	std	Y+34, r25	; 0x22
    6bd2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6bd4:	89 a1       	ldd	r24, Y+33	; 0x21
    6bd6:	9a a1       	ldd	r25, Y+34	; 0x22
    6bd8:	00 97       	sbiw	r24, 0x00	; 0
    6bda:	69 f7       	brne	.-38     	; 0x6bb6 <Save_User_Password+0x448>
    6bdc:	14 c0       	rjmp	.+40     	; 0x6c06 <Save_User_Password+0x498>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6bde:	6b a1       	ldd	r22, Y+35	; 0x23
    6be0:	7c a1       	ldd	r23, Y+36	; 0x24
    6be2:	8d a1       	ldd	r24, Y+37	; 0x25
    6be4:	9e a1       	ldd	r25, Y+38	; 0x26
    6be6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6bea:	dc 01       	movw	r26, r24
    6bec:	cb 01       	movw	r24, r22
    6bee:	9a a3       	std	Y+34, r25	; 0x22
    6bf0:	89 a3       	std	Y+33, r24	; 0x21
    6bf2:	89 a1       	ldd	r24, Y+33	; 0x21
    6bf4:	9a a1       	ldd	r25, Y+34	; 0x22
    6bf6:	9e 8f       	std	Y+30, r25	; 0x1e
    6bf8:	8d 8f       	std	Y+29, r24	; 0x1d
    6bfa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6bfc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    6bfe:	01 97       	sbiw	r24, 0x01	; 1
    6c00:	f1 f7       	brne	.-4      	; 0x6bfe <Save_User_Password+0x490>
    6c02:	9e 8f       	std	Y+30, r25	; 0x1e
    6c04:	8d 8f       	std	Y+29, r24	; 0x1d
		 _delay_ms(50);
	 }
	 /* For Testing Purposes */
	 Local_Address_Reader=Array_Of_Addresses_Location[User_index-1];
	 LCD_CLR();
	 for(i=0;i<4;i++)
    6c06:	de 01       	movw	r26, r28
    6c08:	a6 5b       	subi	r26, 0xB6	; 182
    6c0a:	bf 4f       	sbci	r27, 0xFF	; 255
    6c0c:	fe 01       	movw	r30, r28
    6c0e:	e6 5b       	subi	r30, 0xB6	; 182
    6c10:	ff 4f       	sbci	r31, 0xFF	; 255
    6c12:	80 81       	ld	r24, Z
    6c14:	8f 5f       	subi	r24, 0xFF	; 255
    6c16:	8c 93       	st	X, r24
    6c18:	fe 01       	movw	r30, r28
    6c1a:	e6 5b       	subi	r30, 0xB6	; 182
    6c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    6c1e:	80 81       	ld	r24, Z
    6c20:	84 30       	cpi	r24, 0x04	; 4
    6c22:	08 f4       	brcc	.+2      	; 0x6c26 <Save_User_Password+0x4b8>
    6c24:	5d cf       	rjmp	.-326    	; 0x6ae0 <Save_User_Password+0x372>
			 test=eeprom_read_byte(Local_Address_Reader);
			 LCD_PrintNum(test);
			 Local_Address_Reader++;
			 _delay_ms(1000);
		 }
	 LCD_CLR();
    6c26:	0e 94 2b 13 	call	0x2656	; 0x2656 <LCD_CLR>
	 Bluetooth_SendString("\n--------------------\n");
    6c2a:	80 e6       	ldi	r24, 0x60	; 96
    6c2c:	90 e0       	ldi	r25, 0x00	; 0
    6c2e:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
	 Bluetooth_SendString("Saved");
    6c32:	8d ec       	ldi	r24, 0xCD	; 205
    6c34:	94 e0       	ldi	r25, 0x04	; 4
    6c36:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
	 LCD_WriteString("Saved");
    6c3a:	8d ec       	ldi	r24, 0xCD	; 205
    6c3c:	94 e0       	ldi	r25, 0x04	; 4
    6c3e:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LCD_WriteString>
    6c42:	80 e0       	ldi	r24, 0x00	; 0
    6c44:	90 e0       	ldi	r25, 0x00	; 0
    6c46:	aa e7       	ldi	r26, 0x7A	; 122
    6c48:	b4 e4       	ldi	r27, 0x44	; 68
    6c4a:	89 8f       	std	Y+25, r24	; 0x19
    6c4c:	9a 8f       	std	Y+26, r25	; 0x1a
    6c4e:	ab 8f       	std	Y+27, r26	; 0x1b
    6c50:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6c52:	69 8d       	ldd	r22, Y+25	; 0x19
    6c54:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6c56:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6c58:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6c5a:	20 e0       	ldi	r18, 0x00	; 0
    6c5c:	30 e0       	ldi	r19, 0x00	; 0
    6c5e:	4a ef       	ldi	r20, 0xFA	; 250
    6c60:	54 e4       	ldi	r21, 0x44	; 68
    6c62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6c66:	dc 01       	movw	r26, r24
    6c68:	cb 01       	movw	r24, r22
    6c6a:	8d 8b       	std	Y+21, r24	; 0x15
    6c6c:	9e 8b       	std	Y+22, r25	; 0x16
    6c6e:	af 8b       	std	Y+23, r26	; 0x17
    6c70:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    6c72:	6d 89       	ldd	r22, Y+21	; 0x15
    6c74:	7e 89       	ldd	r23, Y+22	; 0x16
    6c76:	8f 89       	ldd	r24, Y+23	; 0x17
    6c78:	98 8d       	ldd	r25, Y+24	; 0x18
    6c7a:	20 e0       	ldi	r18, 0x00	; 0
    6c7c:	30 e0       	ldi	r19, 0x00	; 0
    6c7e:	40 e8       	ldi	r20, 0x80	; 128
    6c80:	5f e3       	ldi	r21, 0x3F	; 63
    6c82:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    6c86:	88 23       	and	r24, r24
    6c88:	2c f4       	brge	.+10     	; 0x6c94 <Save_User_Password+0x526>
		__ticks = 1;
    6c8a:	81 e0       	ldi	r24, 0x01	; 1
    6c8c:	90 e0       	ldi	r25, 0x00	; 0
    6c8e:	9c 8b       	std	Y+20, r25	; 0x14
    6c90:	8b 8b       	std	Y+19, r24	; 0x13
    6c92:	3f c0       	rjmp	.+126    	; 0x6d12 <Save_User_Password+0x5a4>
	else if (__tmp > 65535)
    6c94:	6d 89       	ldd	r22, Y+21	; 0x15
    6c96:	7e 89       	ldd	r23, Y+22	; 0x16
    6c98:	8f 89       	ldd	r24, Y+23	; 0x17
    6c9a:	98 8d       	ldd	r25, Y+24	; 0x18
    6c9c:	20 e0       	ldi	r18, 0x00	; 0
    6c9e:	3f ef       	ldi	r19, 0xFF	; 255
    6ca0:	4f e7       	ldi	r20, 0x7F	; 127
    6ca2:	57 e4       	ldi	r21, 0x47	; 71
    6ca4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    6ca8:	18 16       	cp	r1, r24
    6caa:	4c f5       	brge	.+82     	; 0x6cfe <Save_User_Password+0x590>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6cac:	69 8d       	ldd	r22, Y+25	; 0x19
    6cae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6cb0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6cb2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6cb4:	20 e0       	ldi	r18, 0x00	; 0
    6cb6:	30 e0       	ldi	r19, 0x00	; 0
    6cb8:	40 e2       	ldi	r20, 0x20	; 32
    6cba:	51 e4       	ldi	r21, 0x41	; 65
    6cbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6cc0:	dc 01       	movw	r26, r24
    6cc2:	cb 01       	movw	r24, r22
    6cc4:	bc 01       	movw	r22, r24
    6cc6:	cd 01       	movw	r24, r26
    6cc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6ccc:	dc 01       	movw	r26, r24
    6cce:	cb 01       	movw	r24, r22
    6cd0:	9c 8b       	std	Y+20, r25	; 0x14
    6cd2:	8b 8b       	std	Y+19, r24	; 0x13
    6cd4:	0f c0       	rjmp	.+30     	; 0x6cf4 <Save_User_Password+0x586>
    6cd6:	88 ec       	ldi	r24, 0xC8	; 200
    6cd8:	90 e0       	ldi	r25, 0x00	; 0
    6cda:	9a 8b       	std	Y+18, r25	; 0x12
    6cdc:	89 8b       	std	Y+17, r24	; 0x11
    6cde:	89 89       	ldd	r24, Y+17	; 0x11
    6ce0:	9a 89       	ldd	r25, Y+18	; 0x12
    6ce2:	01 97       	sbiw	r24, 0x01	; 1
    6ce4:	f1 f7       	brne	.-4      	; 0x6ce2 <Save_User_Password+0x574>
    6ce6:	9a 8b       	std	Y+18, r25	; 0x12
    6ce8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6cea:	8b 89       	ldd	r24, Y+19	; 0x13
    6cec:	9c 89       	ldd	r25, Y+20	; 0x14
    6cee:	01 97       	sbiw	r24, 0x01	; 1
    6cf0:	9c 8b       	std	Y+20, r25	; 0x14
    6cf2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6cf4:	8b 89       	ldd	r24, Y+19	; 0x13
    6cf6:	9c 89       	ldd	r25, Y+20	; 0x14
    6cf8:	00 97       	sbiw	r24, 0x00	; 0
    6cfa:	69 f7       	brne	.-38     	; 0x6cd6 <Save_User_Password+0x568>
    6cfc:	14 c0       	rjmp	.+40     	; 0x6d26 <Save_User_Password+0x5b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6cfe:	6d 89       	ldd	r22, Y+21	; 0x15
    6d00:	7e 89       	ldd	r23, Y+22	; 0x16
    6d02:	8f 89       	ldd	r24, Y+23	; 0x17
    6d04:	98 8d       	ldd	r25, Y+24	; 0x18
    6d06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6d0a:	dc 01       	movw	r26, r24
    6d0c:	cb 01       	movw	r24, r22
    6d0e:	9c 8b       	std	Y+20, r25	; 0x14
    6d10:	8b 8b       	std	Y+19, r24	; 0x13
    6d12:	8b 89       	ldd	r24, Y+19	; 0x13
    6d14:	9c 89       	ldd	r25, Y+20	; 0x14
    6d16:	98 8b       	std	Y+16, r25	; 0x10
    6d18:	8f 87       	std	Y+15, r24	; 0x0f
    6d1a:	8f 85       	ldd	r24, Y+15	; 0x0f
    6d1c:	98 89       	ldd	r25, Y+16	; 0x10
    6d1e:	01 97       	sbiw	r24, 0x01	; 1
    6d20:	f1 f7       	brne	.-4      	; 0x6d1e <Save_User_Password+0x5b0>
    6d22:	98 8b       	std	Y+16, r25	; 0x10
    6d24:	8f 87       	std	Y+15, r24	; 0x0f
	 _delay_ms(1000);
	 eeprom_write_byte(55+(User_index-1),2);
    6d26:	fe 01       	movw	r30, r28
    6d28:	e0 5b       	subi	r30, 0xB0	; 176
    6d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    6d2c:	80 81       	ld	r24, Z
    6d2e:	88 2f       	mov	r24, r24
    6d30:	90 e0       	ldi	r25, 0x00	; 0
    6d32:	c6 96       	adiw	r24, 0x36	; 54
    6d34:	62 e0       	ldi	r22, 0x02	; 2
    6d36:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <eeprom_write_byte>
    6d3a:	80 e0       	ldi	r24, 0x00	; 0
    6d3c:	90 e0       	ldi	r25, 0x00	; 0
    6d3e:	a8 e4       	ldi	r26, 0x48	; 72
    6d40:	b2 e4       	ldi	r27, 0x42	; 66
    6d42:	8b 87       	std	Y+11, r24	; 0x0b
    6d44:	9c 87       	std	Y+12, r25	; 0x0c
    6d46:	ad 87       	std	Y+13, r26	; 0x0d
    6d48:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6d4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    6d4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    6d4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    6d50:	9e 85       	ldd	r25, Y+14	; 0x0e
    6d52:	20 e0       	ldi	r18, 0x00	; 0
    6d54:	30 e0       	ldi	r19, 0x00	; 0
    6d56:	4a ef       	ldi	r20, 0xFA	; 250
    6d58:	54 e4       	ldi	r21, 0x44	; 68
    6d5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6d5e:	dc 01       	movw	r26, r24
    6d60:	cb 01       	movw	r24, r22
    6d62:	8f 83       	std	Y+7, r24	; 0x07
    6d64:	98 87       	std	Y+8, r25	; 0x08
    6d66:	a9 87       	std	Y+9, r26	; 0x09
    6d68:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6d6a:	6f 81       	ldd	r22, Y+7	; 0x07
    6d6c:	78 85       	ldd	r23, Y+8	; 0x08
    6d6e:	89 85       	ldd	r24, Y+9	; 0x09
    6d70:	9a 85       	ldd	r25, Y+10	; 0x0a
    6d72:	20 e0       	ldi	r18, 0x00	; 0
    6d74:	30 e0       	ldi	r19, 0x00	; 0
    6d76:	40 e8       	ldi	r20, 0x80	; 128
    6d78:	5f e3       	ldi	r21, 0x3F	; 63
    6d7a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    6d7e:	88 23       	and	r24, r24
    6d80:	2c f4       	brge	.+10     	; 0x6d8c <Save_User_Password+0x61e>
		__ticks = 1;
    6d82:	81 e0       	ldi	r24, 0x01	; 1
    6d84:	90 e0       	ldi	r25, 0x00	; 0
    6d86:	9e 83       	std	Y+6, r25	; 0x06
    6d88:	8d 83       	std	Y+5, r24	; 0x05
    6d8a:	3f c0       	rjmp	.+126    	; 0x6e0a <Save_User_Password+0x69c>
	else if (__tmp > 65535)
    6d8c:	6f 81       	ldd	r22, Y+7	; 0x07
    6d8e:	78 85       	ldd	r23, Y+8	; 0x08
    6d90:	89 85       	ldd	r24, Y+9	; 0x09
    6d92:	9a 85       	ldd	r25, Y+10	; 0x0a
    6d94:	20 e0       	ldi	r18, 0x00	; 0
    6d96:	3f ef       	ldi	r19, 0xFF	; 255
    6d98:	4f e7       	ldi	r20, 0x7F	; 127
    6d9a:	57 e4       	ldi	r21, 0x47	; 71
    6d9c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    6da0:	18 16       	cp	r1, r24
    6da2:	4c f5       	brge	.+82     	; 0x6df6 <Save_User_Password+0x688>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6da4:	6b 85       	ldd	r22, Y+11	; 0x0b
    6da6:	7c 85       	ldd	r23, Y+12	; 0x0c
    6da8:	8d 85       	ldd	r24, Y+13	; 0x0d
    6daa:	9e 85       	ldd	r25, Y+14	; 0x0e
    6dac:	20 e0       	ldi	r18, 0x00	; 0
    6dae:	30 e0       	ldi	r19, 0x00	; 0
    6db0:	40 e2       	ldi	r20, 0x20	; 32
    6db2:	51 e4       	ldi	r21, 0x41	; 65
    6db4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6db8:	dc 01       	movw	r26, r24
    6dba:	cb 01       	movw	r24, r22
    6dbc:	bc 01       	movw	r22, r24
    6dbe:	cd 01       	movw	r24, r26
    6dc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6dc4:	dc 01       	movw	r26, r24
    6dc6:	cb 01       	movw	r24, r22
    6dc8:	9e 83       	std	Y+6, r25	; 0x06
    6dca:	8d 83       	std	Y+5, r24	; 0x05
    6dcc:	0f c0       	rjmp	.+30     	; 0x6dec <Save_User_Password+0x67e>
    6dce:	88 ec       	ldi	r24, 0xC8	; 200
    6dd0:	90 e0       	ldi	r25, 0x00	; 0
    6dd2:	9c 83       	std	Y+4, r25	; 0x04
    6dd4:	8b 83       	std	Y+3, r24	; 0x03
    6dd6:	8b 81       	ldd	r24, Y+3	; 0x03
    6dd8:	9c 81       	ldd	r25, Y+4	; 0x04
    6dda:	01 97       	sbiw	r24, 0x01	; 1
    6ddc:	f1 f7       	brne	.-4      	; 0x6dda <Save_User_Password+0x66c>
    6dde:	9c 83       	std	Y+4, r25	; 0x04
    6de0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6de2:	8d 81       	ldd	r24, Y+5	; 0x05
    6de4:	9e 81       	ldd	r25, Y+6	; 0x06
    6de6:	01 97       	sbiw	r24, 0x01	; 1
    6de8:	9e 83       	std	Y+6, r25	; 0x06
    6dea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6dec:	8d 81       	ldd	r24, Y+5	; 0x05
    6dee:	9e 81       	ldd	r25, Y+6	; 0x06
    6df0:	00 97       	sbiw	r24, 0x00	; 0
    6df2:	69 f7       	brne	.-38     	; 0x6dce <Save_User_Password+0x660>
    6df4:	14 c0       	rjmp	.+40     	; 0x6e1e <Save_User_Password+0x6b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6df6:	6f 81       	ldd	r22, Y+7	; 0x07
    6df8:	78 85       	ldd	r23, Y+8	; 0x08
    6dfa:	89 85       	ldd	r24, Y+9	; 0x09
    6dfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    6dfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6e02:	dc 01       	movw	r26, r24
    6e04:	cb 01       	movw	r24, r22
    6e06:	9e 83       	std	Y+6, r25	; 0x06
    6e08:	8d 83       	std	Y+5, r24	; 0x05
    6e0a:	8d 81       	ldd	r24, Y+5	; 0x05
    6e0c:	9e 81       	ldd	r25, Y+6	; 0x06
    6e0e:	9a 83       	std	Y+2, r25	; 0x02
    6e10:	89 83       	std	Y+1, r24	; 0x01
    6e12:	89 81       	ldd	r24, Y+1	; 0x01
    6e14:	9a 81       	ldd	r25, Y+2	; 0x02
    6e16:	01 97       	sbiw	r24, 0x01	; 1
    6e18:	f1 f7       	brne	.-4      	; 0x6e16 <Save_User_Password+0x6a8>
    6e1a:	9a 83       	std	Y+2, r25	; 0x02
    6e1c:	89 83       	std	Y+1, r24	; 0x01
	 _delay_ms(50);
	 Recovering_Users_Status();
    6e1e:	0e 94 06 30 	call	0x600c	; 0x600c <Recovering_Users_Status>
}
    6e22:	c0 5b       	subi	r28, 0xB0	; 176
    6e24:	df 4f       	sbci	r29, 0xFF	; 255
    6e26:	0f b6       	in	r0, 0x3f	; 63
    6e28:	f8 94       	cli
    6e2a:	de bf       	out	0x3e, r29	; 62
    6e2c:	0f be       	out	0x3f, r0	; 63
    6e2e:	cd bf       	out	0x3d, r28	; 61
    6e30:	cf 91       	pop	r28
    6e32:	df 91       	pop	r29
    6e34:	1f 91       	pop	r17
    6e36:	0f 91       	pop	r16
    6e38:	08 95       	ret

00006e3a <Delete_Registered_User>:

void Delete_Registered_User(u8 User_index)
{
    6e3a:	df 93       	push	r29
    6e3c:	cf 93       	push	r28
    6e3e:	cd b7       	in	r28, 0x3d	; 61
    6e40:	de b7       	in	r29, 0x3e	; 62
    6e42:	ac 97       	sbiw	r28, 0x2c	; 44
    6e44:	0f b6       	in	r0, 0x3f	; 63
    6e46:	f8 94       	cli
    6e48:	de bf       	out	0x3e, r29	; 62
    6e4a:	0f be       	out	0x3f, r0	; 63
    6e4c:	cd bf       	out	0x3d, r28	; 61
    6e4e:	8c a7       	std	Y+44, r24	; 0x2c
	u8 Admin_Pass_State;
	LCD_CLR();
    6e50:	0e 94 2b 13 	call	0x2656	; 0x2656 <LCD_CLR>
//	LCD_WriteString("Enter Admin Pass");
//	LCD_goto(5,1);//to wrtie in the center
	/* Admin Pass Algorithm */
	Admin_Pass_State=Enter_Admin_Pass();
    6e54:	0e 94 a7 38 	call	0x714e	; 0x714e <Enter_Admin_Pass>
    6e58:	8b a7       	std	Y+43, r24	; 0x2b
    6e5a:	80 e0       	ldi	r24, 0x00	; 0
    6e5c:	90 e0       	ldi	r25, 0x00	; 0
    6e5e:	aa e7       	ldi	r26, 0x7A	; 122
    6e60:	b4 e4       	ldi	r27, 0x44	; 68
    6e62:	8f a3       	std	Y+39, r24	; 0x27
    6e64:	98 a7       	std	Y+40, r25	; 0x28
    6e66:	a9 a7       	std	Y+41, r26	; 0x29
    6e68:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6e6a:	6f a1       	ldd	r22, Y+39	; 0x27
    6e6c:	78 a5       	ldd	r23, Y+40	; 0x28
    6e6e:	89 a5       	ldd	r24, Y+41	; 0x29
    6e70:	9a a5       	ldd	r25, Y+42	; 0x2a
    6e72:	20 e0       	ldi	r18, 0x00	; 0
    6e74:	30 e0       	ldi	r19, 0x00	; 0
    6e76:	4a ef       	ldi	r20, 0xFA	; 250
    6e78:	54 e4       	ldi	r21, 0x44	; 68
    6e7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6e7e:	dc 01       	movw	r26, r24
    6e80:	cb 01       	movw	r24, r22
    6e82:	8b a3       	std	Y+35, r24	; 0x23
    6e84:	9c a3       	std	Y+36, r25	; 0x24
    6e86:	ad a3       	std	Y+37, r26	; 0x25
    6e88:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    6e8a:	6b a1       	ldd	r22, Y+35	; 0x23
    6e8c:	7c a1       	ldd	r23, Y+36	; 0x24
    6e8e:	8d a1       	ldd	r24, Y+37	; 0x25
    6e90:	9e a1       	ldd	r25, Y+38	; 0x26
    6e92:	20 e0       	ldi	r18, 0x00	; 0
    6e94:	30 e0       	ldi	r19, 0x00	; 0
    6e96:	40 e8       	ldi	r20, 0x80	; 128
    6e98:	5f e3       	ldi	r21, 0x3F	; 63
    6e9a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    6e9e:	88 23       	and	r24, r24
    6ea0:	2c f4       	brge	.+10     	; 0x6eac <Delete_Registered_User+0x72>
		__ticks = 1;
    6ea2:	81 e0       	ldi	r24, 0x01	; 1
    6ea4:	90 e0       	ldi	r25, 0x00	; 0
    6ea6:	9a a3       	std	Y+34, r25	; 0x22
    6ea8:	89 a3       	std	Y+33, r24	; 0x21
    6eaa:	3f c0       	rjmp	.+126    	; 0x6f2a <Delete_Registered_User+0xf0>
	else if (__tmp > 65535)
    6eac:	6b a1       	ldd	r22, Y+35	; 0x23
    6eae:	7c a1       	ldd	r23, Y+36	; 0x24
    6eb0:	8d a1       	ldd	r24, Y+37	; 0x25
    6eb2:	9e a1       	ldd	r25, Y+38	; 0x26
    6eb4:	20 e0       	ldi	r18, 0x00	; 0
    6eb6:	3f ef       	ldi	r19, 0xFF	; 255
    6eb8:	4f e7       	ldi	r20, 0x7F	; 127
    6eba:	57 e4       	ldi	r21, 0x47	; 71
    6ebc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    6ec0:	18 16       	cp	r1, r24
    6ec2:	4c f5       	brge	.+82     	; 0x6f16 <Delete_Registered_User+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6ec4:	6f a1       	ldd	r22, Y+39	; 0x27
    6ec6:	78 a5       	ldd	r23, Y+40	; 0x28
    6ec8:	89 a5       	ldd	r24, Y+41	; 0x29
    6eca:	9a a5       	ldd	r25, Y+42	; 0x2a
    6ecc:	20 e0       	ldi	r18, 0x00	; 0
    6ece:	30 e0       	ldi	r19, 0x00	; 0
    6ed0:	40 e2       	ldi	r20, 0x20	; 32
    6ed2:	51 e4       	ldi	r21, 0x41	; 65
    6ed4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6ed8:	dc 01       	movw	r26, r24
    6eda:	cb 01       	movw	r24, r22
    6edc:	bc 01       	movw	r22, r24
    6ede:	cd 01       	movw	r24, r26
    6ee0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6ee4:	dc 01       	movw	r26, r24
    6ee6:	cb 01       	movw	r24, r22
    6ee8:	9a a3       	std	Y+34, r25	; 0x22
    6eea:	89 a3       	std	Y+33, r24	; 0x21
    6eec:	0f c0       	rjmp	.+30     	; 0x6f0c <Delete_Registered_User+0xd2>
    6eee:	88 ec       	ldi	r24, 0xC8	; 200
    6ef0:	90 e0       	ldi	r25, 0x00	; 0
    6ef2:	98 a3       	std	Y+32, r25	; 0x20
    6ef4:	8f 8f       	std	Y+31, r24	; 0x1f
    6ef6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6ef8:	98 a1       	ldd	r25, Y+32	; 0x20
    6efa:	01 97       	sbiw	r24, 0x01	; 1
    6efc:	f1 f7       	brne	.-4      	; 0x6efa <Delete_Registered_User+0xc0>
    6efe:	98 a3       	std	Y+32, r25	; 0x20
    6f00:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6f02:	89 a1       	ldd	r24, Y+33	; 0x21
    6f04:	9a a1       	ldd	r25, Y+34	; 0x22
    6f06:	01 97       	sbiw	r24, 0x01	; 1
    6f08:	9a a3       	std	Y+34, r25	; 0x22
    6f0a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6f0c:	89 a1       	ldd	r24, Y+33	; 0x21
    6f0e:	9a a1       	ldd	r25, Y+34	; 0x22
    6f10:	00 97       	sbiw	r24, 0x00	; 0
    6f12:	69 f7       	brne	.-38     	; 0x6eee <Delete_Registered_User+0xb4>
    6f14:	14 c0       	rjmp	.+40     	; 0x6f3e <Delete_Registered_User+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6f16:	6b a1       	ldd	r22, Y+35	; 0x23
    6f18:	7c a1       	ldd	r23, Y+36	; 0x24
    6f1a:	8d a1       	ldd	r24, Y+37	; 0x25
    6f1c:	9e a1       	ldd	r25, Y+38	; 0x26
    6f1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6f22:	dc 01       	movw	r26, r24
    6f24:	cb 01       	movw	r24, r22
    6f26:	9a a3       	std	Y+34, r25	; 0x22
    6f28:	89 a3       	std	Y+33, r24	; 0x21
    6f2a:	89 a1       	ldd	r24, Y+33	; 0x21
    6f2c:	9a a1       	ldd	r25, Y+34	; 0x22
    6f2e:	9e 8f       	std	Y+30, r25	; 0x1e
    6f30:	8d 8f       	std	Y+29, r24	; 0x1d
    6f32:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6f34:	9e 8d       	ldd	r25, Y+30	; 0x1e
    6f36:	01 97       	sbiw	r24, 0x01	; 1
    6f38:	f1 f7       	brne	.-4      	; 0x6f36 <Delete_Registered_User+0xfc>
    6f3a:	9e 8f       	std	Y+30, r25	; 0x1e
    6f3c:	8d 8f       	std	Y+29, r24	; 0x1d
	 _delay_ms(1000);
	 if(Admin_Pass_State==1)
    6f3e:	8b a5       	ldd	r24, Y+43	; 0x2b
    6f40:	81 30       	cpi	r24, 0x01	; 1
    6f42:	09 f0       	breq	.+2      	; 0x6f46 <Delete_Registered_User+0x10c>
    6f44:	fb c0       	rjmp	.+502    	; 0x713c <Delete_Registered_User+0x302>
	 {
		 eeprom_write_byte(55+(User_index-1),1);
    6f46:	8c a5       	ldd	r24, Y+44	; 0x2c
    6f48:	88 2f       	mov	r24, r24
    6f4a:	90 e0       	ldi	r25, 0x00	; 0
    6f4c:	c6 96       	adiw	r24, 0x36	; 54
    6f4e:	61 e0       	ldi	r22, 0x01	; 1
    6f50:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <eeprom_write_byte>
    6f54:	80 e0       	ldi	r24, 0x00	; 0
    6f56:	90 e0       	ldi	r25, 0x00	; 0
    6f58:	a8 e4       	ldi	r26, 0x48	; 72
    6f5a:	b2 e4       	ldi	r27, 0x42	; 66
    6f5c:	89 8f       	std	Y+25, r24	; 0x19
    6f5e:	9a 8f       	std	Y+26, r25	; 0x1a
    6f60:	ab 8f       	std	Y+27, r26	; 0x1b
    6f62:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6f64:	69 8d       	ldd	r22, Y+25	; 0x19
    6f66:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6f68:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6f6a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6f6c:	20 e0       	ldi	r18, 0x00	; 0
    6f6e:	30 e0       	ldi	r19, 0x00	; 0
    6f70:	4a ef       	ldi	r20, 0xFA	; 250
    6f72:	54 e4       	ldi	r21, 0x44	; 68
    6f74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6f78:	dc 01       	movw	r26, r24
    6f7a:	cb 01       	movw	r24, r22
    6f7c:	8d 8b       	std	Y+21, r24	; 0x15
    6f7e:	9e 8b       	std	Y+22, r25	; 0x16
    6f80:	af 8b       	std	Y+23, r26	; 0x17
    6f82:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    6f84:	6d 89       	ldd	r22, Y+21	; 0x15
    6f86:	7e 89       	ldd	r23, Y+22	; 0x16
    6f88:	8f 89       	ldd	r24, Y+23	; 0x17
    6f8a:	98 8d       	ldd	r25, Y+24	; 0x18
    6f8c:	20 e0       	ldi	r18, 0x00	; 0
    6f8e:	30 e0       	ldi	r19, 0x00	; 0
    6f90:	40 e8       	ldi	r20, 0x80	; 128
    6f92:	5f e3       	ldi	r21, 0x3F	; 63
    6f94:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    6f98:	88 23       	and	r24, r24
    6f9a:	2c f4       	brge	.+10     	; 0x6fa6 <Delete_Registered_User+0x16c>
		__ticks = 1;
    6f9c:	81 e0       	ldi	r24, 0x01	; 1
    6f9e:	90 e0       	ldi	r25, 0x00	; 0
    6fa0:	9c 8b       	std	Y+20, r25	; 0x14
    6fa2:	8b 8b       	std	Y+19, r24	; 0x13
    6fa4:	3f c0       	rjmp	.+126    	; 0x7024 <Delete_Registered_User+0x1ea>
	else if (__tmp > 65535)
    6fa6:	6d 89       	ldd	r22, Y+21	; 0x15
    6fa8:	7e 89       	ldd	r23, Y+22	; 0x16
    6faa:	8f 89       	ldd	r24, Y+23	; 0x17
    6fac:	98 8d       	ldd	r25, Y+24	; 0x18
    6fae:	20 e0       	ldi	r18, 0x00	; 0
    6fb0:	3f ef       	ldi	r19, 0xFF	; 255
    6fb2:	4f e7       	ldi	r20, 0x7F	; 127
    6fb4:	57 e4       	ldi	r21, 0x47	; 71
    6fb6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    6fba:	18 16       	cp	r1, r24
    6fbc:	4c f5       	brge	.+82     	; 0x7010 <Delete_Registered_User+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6fbe:	69 8d       	ldd	r22, Y+25	; 0x19
    6fc0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6fc2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6fc4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6fc6:	20 e0       	ldi	r18, 0x00	; 0
    6fc8:	30 e0       	ldi	r19, 0x00	; 0
    6fca:	40 e2       	ldi	r20, 0x20	; 32
    6fcc:	51 e4       	ldi	r21, 0x41	; 65
    6fce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6fd2:	dc 01       	movw	r26, r24
    6fd4:	cb 01       	movw	r24, r22
    6fd6:	bc 01       	movw	r22, r24
    6fd8:	cd 01       	movw	r24, r26
    6fda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6fde:	dc 01       	movw	r26, r24
    6fe0:	cb 01       	movw	r24, r22
    6fe2:	9c 8b       	std	Y+20, r25	; 0x14
    6fe4:	8b 8b       	std	Y+19, r24	; 0x13
    6fe6:	0f c0       	rjmp	.+30     	; 0x7006 <Delete_Registered_User+0x1cc>
    6fe8:	88 ec       	ldi	r24, 0xC8	; 200
    6fea:	90 e0       	ldi	r25, 0x00	; 0
    6fec:	9a 8b       	std	Y+18, r25	; 0x12
    6fee:	89 8b       	std	Y+17, r24	; 0x11
    6ff0:	89 89       	ldd	r24, Y+17	; 0x11
    6ff2:	9a 89       	ldd	r25, Y+18	; 0x12
    6ff4:	01 97       	sbiw	r24, 0x01	; 1
    6ff6:	f1 f7       	brne	.-4      	; 0x6ff4 <Delete_Registered_User+0x1ba>
    6ff8:	9a 8b       	std	Y+18, r25	; 0x12
    6ffa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6ffc:	8b 89       	ldd	r24, Y+19	; 0x13
    6ffe:	9c 89       	ldd	r25, Y+20	; 0x14
    7000:	01 97       	sbiw	r24, 0x01	; 1
    7002:	9c 8b       	std	Y+20, r25	; 0x14
    7004:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7006:	8b 89       	ldd	r24, Y+19	; 0x13
    7008:	9c 89       	ldd	r25, Y+20	; 0x14
    700a:	00 97       	sbiw	r24, 0x00	; 0
    700c:	69 f7       	brne	.-38     	; 0x6fe8 <Delete_Registered_User+0x1ae>
    700e:	14 c0       	rjmp	.+40     	; 0x7038 <Delete_Registered_User+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7010:	6d 89       	ldd	r22, Y+21	; 0x15
    7012:	7e 89       	ldd	r23, Y+22	; 0x16
    7014:	8f 89       	ldd	r24, Y+23	; 0x17
    7016:	98 8d       	ldd	r25, Y+24	; 0x18
    7018:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    701c:	dc 01       	movw	r26, r24
    701e:	cb 01       	movw	r24, r22
    7020:	9c 8b       	std	Y+20, r25	; 0x14
    7022:	8b 8b       	std	Y+19, r24	; 0x13
    7024:	8b 89       	ldd	r24, Y+19	; 0x13
    7026:	9c 89       	ldd	r25, Y+20	; 0x14
    7028:	98 8b       	std	Y+16, r25	; 0x10
    702a:	8f 87       	std	Y+15, r24	; 0x0f
    702c:	8f 85       	ldd	r24, Y+15	; 0x0f
    702e:	98 89       	ldd	r25, Y+16	; 0x10
    7030:	01 97       	sbiw	r24, 0x01	; 1
    7032:	f1 f7       	brne	.-4      	; 0x7030 <Delete_Registered_User+0x1f6>
    7034:	98 8b       	std	Y+16, r25	; 0x10
    7036:	8f 87       	std	Y+15, r24	; 0x0f
		 _delay_ms(50);
		 LCD_CLR();
    7038:	0e 94 2b 13 	call	0x2656	; 0x2656 <LCD_CLR>
		 Bluetooth_SendString("\n--------------------\n");
    703c:	80 e6       	ldi	r24, 0x60	; 96
    703e:	90 e0       	ldi	r25, 0x00	; 0
    7040:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
		 Bluetooth_SendString("User Deleted");
    7044:	83 ed       	ldi	r24, 0xD3	; 211
    7046:	94 e0       	ldi	r25, 0x04	; 4
    7048:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
		 LCD_WriteString("User Deleted");
    704c:	83 ed       	ldi	r24, 0xD3	; 211
    704e:	94 e0       	ldi	r25, 0x04	; 4
    7050:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LCD_WriteString>
    7054:	80 e0       	ldi	r24, 0x00	; 0
    7056:	90 e0       	ldi	r25, 0x00	; 0
    7058:	aa e7       	ldi	r26, 0x7A	; 122
    705a:	b4 e4       	ldi	r27, 0x44	; 68
    705c:	8b 87       	std	Y+11, r24	; 0x0b
    705e:	9c 87       	std	Y+12, r25	; 0x0c
    7060:	ad 87       	std	Y+13, r26	; 0x0d
    7062:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7064:	6b 85       	ldd	r22, Y+11	; 0x0b
    7066:	7c 85       	ldd	r23, Y+12	; 0x0c
    7068:	8d 85       	ldd	r24, Y+13	; 0x0d
    706a:	9e 85       	ldd	r25, Y+14	; 0x0e
    706c:	20 e0       	ldi	r18, 0x00	; 0
    706e:	30 e0       	ldi	r19, 0x00	; 0
    7070:	4a ef       	ldi	r20, 0xFA	; 250
    7072:	54 e4       	ldi	r21, 0x44	; 68
    7074:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7078:	dc 01       	movw	r26, r24
    707a:	cb 01       	movw	r24, r22
    707c:	8f 83       	std	Y+7, r24	; 0x07
    707e:	98 87       	std	Y+8, r25	; 0x08
    7080:	a9 87       	std	Y+9, r26	; 0x09
    7082:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    7084:	6f 81       	ldd	r22, Y+7	; 0x07
    7086:	78 85       	ldd	r23, Y+8	; 0x08
    7088:	89 85       	ldd	r24, Y+9	; 0x09
    708a:	9a 85       	ldd	r25, Y+10	; 0x0a
    708c:	20 e0       	ldi	r18, 0x00	; 0
    708e:	30 e0       	ldi	r19, 0x00	; 0
    7090:	40 e8       	ldi	r20, 0x80	; 128
    7092:	5f e3       	ldi	r21, 0x3F	; 63
    7094:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    7098:	88 23       	and	r24, r24
    709a:	2c f4       	brge	.+10     	; 0x70a6 <Delete_Registered_User+0x26c>
		__ticks = 1;
    709c:	81 e0       	ldi	r24, 0x01	; 1
    709e:	90 e0       	ldi	r25, 0x00	; 0
    70a0:	9e 83       	std	Y+6, r25	; 0x06
    70a2:	8d 83       	std	Y+5, r24	; 0x05
    70a4:	3f c0       	rjmp	.+126    	; 0x7124 <Delete_Registered_User+0x2ea>
	else if (__tmp > 65535)
    70a6:	6f 81       	ldd	r22, Y+7	; 0x07
    70a8:	78 85       	ldd	r23, Y+8	; 0x08
    70aa:	89 85       	ldd	r24, Y+9	; 0x09
    70ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    70ae:	20 e0       	ldi	r18, 0x00	; 0
    70b0:	3f ef       	ldi	r19, 0xFF	; 255
    70b2:	4f e7       	ldi	r20, 0x7F	; 127
    70b4:	57 e4       	ldi	r21, 0x47	; 71
    70b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    70ba:	18 16       	cp	r1, r24
    70bc:	4c f5       	brge	.+82     	; 0x7110 <Delete_Registered_User+0x2d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    70be:	6b 85       	ldd	r22, Y+11	; 0x0b
    70c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    70c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    70c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    70c6:	20 e0       	ldi	r18, 0x00	; 0
    70c8:	30 e0       	ldi	r19, 0x00	; 0
    70ca:	40 e2       	ldi	r20, 0x20	; 32
    70cc:	51 e4       	ldi	r21, 0x41	; 65
    70ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    70d2:	dc 01       	movw	r26, r24
    70d4:	cb 01       	movw	r24, r22
    70d6:	bc 01       	movw	r22, r24
    70d8:	cd 01       	movw	r24, r26
    70da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    70de:	dc 01       	movw	r26, r24
    70e0:	cb 01       	movw	r24, r22
    70e2:	9e 83       	std	Y+6, r25	; 0x06
    70e4:	8d 83       	std	Y+5, r24	; 0x05
    70e6:	0f c0       	rjmp	.+30     	; 0x7106 <Delete_Registered_User+0x2cc>
    70e8:	88 ec       	ldi	r24, 0xC8	; 200
    70ea:	90 e0       	ldi	r25, 0x00	; 0
    70ec:	9c 83       	std	Y+4, r25	; 0x04
    70ee:	8b 83       	std	Y+3, r24	; 0x03
    70f0:	8b 81       	ldd	r24, Y+3	; 0x03
    70f2:	9c 81       	ldd	r25, Y+4	; 0x04
    70f4:	01 97       	sbiw	r24, 0x01	; 1
    70f6:	f1 f7       	brne	.-4      	; 0x70f4 <Delete_Registered_User+0x2ba>
    70f8:	9c 83       	std	Y+4, r25	; 0x04
    70fa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    70fc:	8d 81       	ldd	r24, Y+5	; 0x05
    70fe:	9e 81       	ldd	r25, Y+6	; 0x06
    7100:	01 97       	sbiw	r24, 0x01	; 1
    7102:	9e 83       	std	Y+6, r25	; 0x06
    7104:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7106:	8d 81       	ldd	r24, Y+5	; 0x05
    7108:	9e 81       	ldd	r25, Y+6	; 0x06
    710a:	00 97       	sbiw	r24, 0x00	; 0
    710c:	69 f7       	brne	.-38     	; 0x70e8 <Delete_Registered_User+0x2ae>
    710e:	14 c0       	rjmp	.+40     	; 0x7138 <Delete_Registered_User+0x2fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7110:	6f 81       	ldd	r22, Y+7	; 0x07
    7112:	78 85       	ldd	r23, Y+8	; 0x08
    7114:	89 85       	ldd	r24, Y+9	; 0x09
    7116:	9a 85       	ldd	r25, Y+10	; 0x0a
    7118:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    711c:	dc 01       	movw	r26, r24
    711e:	cb 01       	movw	r24, r22
    7120:	9e 83       	std	Y+6, r25	; 0x06
    7122:	8d 83       	std	Y+5, r24	; 0x05
    7124:	8d 81       	ldd	r24, Y+5	; 0x05
    7126:	9e 81       	ldd	r25, Y+6	; 0x06
    7128:	9a 83       	std	Y+2, r25	; 0x02
    712a:	89 83       	std	Y+1, r24	; 0x01
    712c:	89 81       	ldd	r24, Y+1	; 0x01
    712e:	9a 81       	ldd	r25, Y+2	; 0x02
    7130:	01 97       	sbiw	r24, 0x01	; 1
    7132:	f1 f7       	brne	.-4      	; 0x7130 <Delete_Registered_User+0x2f6>
    7134:	9a 83       	std	Y+2, r25	; 0x02
    7136:	89 83       	std	Y+1, r24	; 0x01
		 _delay_ms(1000);
		 Recovering_Users_Status();
    7138:	0e 94 06 30 	call	0x600c	; 0x600c <Recovering_Users_Status>
	 }
}
    713c:	ac 96       	adiw	r28, 0x2c	; 44
    713e:	0f b6       	in	r0, 0x3f	; 63
    7140:	f8 94       	cli
    7142:	de bf       	out	0x3e, r29	; 62
    7144:	0f be       	out	0x3f, r0	; 63
    7146:	cd bf       	out	0x3d, r28	; 61
    7148:	cf 91       	pop	r28
    714a:	df 91       	pop	r29
    714c:	08 95       	ret

0000714e <Enter_Admin_Pass>:

u8 Enter_Admin_Pass(void)
{
    714e:	df 93       	push	r29
    7150:	cf 93       	push	r28
    7152:	cd b7       	in	r28, 0x3d	; 61
    7154:	de b7       	in	r29, 0x3e	; 62
    7156:	e9 97       	sbiw	r28, 0x39	; 57
    7158:	0f b6       	in	r0, 0x3f	; 63
    715a:	f8 94       	cli
    715c:	de bf       	out	0x3e, r29	; 62
    715e:	0f be       	out	0x3f, r0	; 63
    7160:	cd bf       	out	0x3d, r28	; 61
	 u8 Admin_input,Admin_Pass[4]={1,2,3,4},User_Pass_Input[4]={0},counter=0,i,flag=0;
    7162:	81 e0       	ldi	r24, 0x01	; 1
    7164:	88 ab       	std	Y+48, r24	; 0x30
    7166:	82 e0       	ldi	r24, 0x02	; 2
    7168:	89 ab       	std	Y+49, r24	; 0x31
    716a:	83 e0       	ldi	r24, 0x03	; 3
    716c:	8a ab       	std	Y+50, r24	; 0x32
    716e:	84 e0       	ldi	r24, 0x04	; 4
    7170:	8b ab       	std	Y+51, r24	; 0x33
    7172:	1c aa       	std	Y+52, r1	; 0x34
    7174:	1d aa       	std	Y+53, r1	; 0x35
    7176:	1e aa       	std	Y+54, r1	; 0x36
    7178:	1f aa       	std	Y+55, r1	; 0x37
    717a:	1e a6       	std	Y+46, r1	; 0x2e
    717c:	1c a6       	std	Y+44, r1	; 0x2c
//	 u8 Admin_Menu_Exit_Flag=1;
//	 u8 TimeOut_Counter;
	 u8 Admin_Max_Trial_counter=0;//for maximum trial of password of3 times
    717e:	1b a6       	std	Y+43, r1	; 0x2b
	 Bluetooth_SendString("\n--------------------\n");
    7180:	80 e6       	ldi	r24, 0x60	; 96
    7182:	90 e0       	ldi	r25, 0x00	; 0
    7184:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
	 Bluetooth_SendString("Enter Admin Pass");
    7188:	81 e0       	ldi	r24, 0x01	; 1
    718a:	91 e0       	ldi	r25, 0x01	; 1
    718c:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
	 LCD_WriteString("Enter Admin Pass");
    7190:	81 e0       	ldi	r24, 0x01	; 1
    7192:	91 e0       	ldi	r25, 0x01	; 1
    7194:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LCD_WriteString>
	 LCD_goto(5,1);
    7198:	85 e0       	ldi	r24, 0x05	; 5
    719a:	61 e0       	ldi	r22, 0x01	; 1
    719c:	0e 94 13 13 	call	0x2626	; 0x2626 <LCD_goto>
    71a0:	eb c1       	rjmp	.+982    	; 0x7578 <Enter_Admin_Pass+0x42a>
	 while(Admin_Max_Trial_counter<=3)
	 {
		 while(counter<=3)
		 {

			 Admin_input = UART_u8Receiver();
    71a2:	0e 94 a3 1a 	call	0x3546	; 0x3546 <UART_u8Receiver>
    71a6:	8f a7       	std	Y+47, r24	; 0x2f
			 ASCII_Conversion(&Admin_input);
    71a8:	ce 01       	movw	r24, r28
    71aa:	8f 96       	adiw	r24, 0x2f	; 47
    71ac:	0e 94 b7 1c 	call	0x396e	; 0x396e <ASCII_Conversion>
			if(Admin_input !=0)
    71b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    71b2:	88 23       	and	r24, r24
    71b4:	01 f1       	breq	.+64     	; 0x71f6 <Enter_Admin_Pass+0xa8>
			{
				if( (Admin_input<10) && (counter <=3) )
    71b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    71b8:	8a 30       	cpi	r24, 0x0A	; 10
    71ba:	e8 f4       	brcc	.+58     	; 0x71f6 <Enter_Admin_Pass+0xa8>
    71bc:	8e a5       	ldd	r24, Y+46	; 0x2e
    71be:	84 30       	cpi	r24, 0x04	; 4
    71c0:	d0 f4       	brcc	.+52     	; 0x71f6 <Enter_Admin_Pass+0xa8>
					{
						User_Pass_Input[counter]=Admin_input;
    71c2:	8e a5       	ldd	r24, Y+46	; 0x2e
    71c4:	28 2f       	mov	r18, r24
    71c6:	30 e0       	ldi	r19, 0x00	; 0
    71c8:	4f a5       	ldd	r20, Y+47	; 0x2f
    71ca:	ce 01       	movw	r24, r28
    71cc:	c4 96       	adiw	r24, 0x34	; 52
    71ce:	fc 01       	movw	r30, r24
    71d0:	e2 0f       	add	r30, r18
    71d2:	f3 1f       	adc	r31, r19
    71d4:	40 83       	st	Z, r20
						Write_data('0'+User_Pass_Input[counter] );
    71d6:	8e a5       	ldd	r24, Y+46	; 0x2e
    71d8:	28 2f       	mov	r18, r24
    71da:	30 e0       	ldi	r19, 0x00	; 0
    71dc:	ce 01       	movw	r24, r28
    71de:	c4 96       	adiw	r24, 0x34	; 52
    71e0:	fc 01       	movw	r30, r24
    71e2:	e2 0f       	add	r30, r18
    71e4:	f3 1f       	adc	r31, r19
    71e6:	80 81       	ld	r24, Z
    71e8:	80 5d       	subi	r24, 0xD0	; 208
    71ea:	0e 94 3c 12 	call	0x2478	; 0x2478 <Write_data>
						counter++;
    71ee:	8e a5       	ldd	r24, Y+46	; 0x2e
    71f0:	8f 5f       	subi	r24, 0xFF	; 255
    71f2:	8e a7       	std	Y+46, r24	; 0x2e
						Admin_input=0;
    71f4:	1f a6       	std	Y+47, r1	; 0x2f
	 Bluetooth_SendString("Enter Admin Pass");
	 LCD_WriteString("Enter Admin Pass");
	 LCD_goto(5,1);
	 while(Admin_Max_Trial_counter<=3)
	 {
		 while(counter<=3)
    71f6:	8e a5       	ldd	r24, Y+46	; 0x2e
    71f8:	84 30       	cpi	r24, 0x04	; 4
    71fa:	98 f2       	brcs	.-90     	; 0x71a2 <Enter_Admin_Pass+0x54>
    71fc:	80 e0       	ldi	r24, 0x00	; 0
    71fe:	90 e0       	ldi	r25, 0x00	; 0
    7200:	aa ef       	ldi	r26, 0xFA	; 250
    7202:	b3 e4       	ldi	r27, 0x43	; 67
    7204:	8f a3       	std	Y+39, r24	; 0x27
    7206:	98 a7       	std	Y+40, r25	; 0x28
    7208:	a9 a7       	std	Y+41, r26	; 0x29
    720a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    720c:	6f a1       	ldd	r22, Y+39	; 0x27
    720e:	78 a5       	ldd	r23, Y+40	; 0x28
    7210:	89 a5       	ldd	r24, Y+41	; 0x29
    7212:	9a a5       	ldd	r25, Y+42	; 0x2a
    7214:	20 e0       	ldi	r18, 0x00	; 0
    7216:	30 e0       	ldi	r19, 0x00	; 0
    7218:	4a ef       	ldi	r20, 0xFA	; 250
    721a:	54 e4       	ldi	r21, 0x44	; 68
    721c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7220:	dc 01       	movw	r26, r24
    7222:	cb 01       	movw	r24, r22
    7224:	8b a3       	std	Y+35, r24	; 0x23
    7226:	9c a3       	std	Y+36, r25	; 0x24
    7228:	ad a3       	std	Y+37, r26	; 0x25
    722a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    722c:	6b a1       	ldd	r22, Y+35	; 0x23
    722e:	7c a1       	ldd	r23, Y+36	; 0x24
    7230:	8d a1       	ldd	r24, Y+37	; 0x25
    7232:	9e a1       	ldd	r25, Y+38	; 0x26
    7234:	20 e0       	ldi	r18, 0x00	; 0
    7236:	30 e0       	ldi	r19, 0x00	; 0
    7238:	40 e8       	ldi	r20, 0x80	; 128
    723a:	5f e3       	ldi	r21, 0x3F	; 63
    723c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    7240:	88 23       	and	r24, r24
    7242:	2c f4       	brge	.+10     	; 0x724e <Enter_Admin_Pass+0x100>
		__ticks = 1;
    7244:	81 e0       	ldi	r24, 0x01	; 1
    7246:	90 e0       	ldi	r25, 0x00	; 0
    7248:	9a a3       	std	Y+34, r25	; 0x22
    724a:	89 a3       	std	Y+33, r24	; 0x21
    724c:	3f c0       	rjmp	.+126    	; 0x72cc <Enter_Admin_Pass+0x17e>
	else if (__tmp > 65535)
    724e:	6b a1       	ldd	r22, Y+35	; 0x23
    7250:	7c a1       	ldd	r23, Y+36	; 0x24
    7252:	8d a1       	ldd	r24, Y+37	; 0x25
    7254:	9e a1       	ldd	r25, Y+38	; 0x26
    7256:	20 e0       	ldi	r18, 0x00	; 0
    7258:	3f ef       	ldi	r19, 0xFF	; 255
    725a:	4f e7       	ldi	r20, 0x7F	; 127
    725c:	57 e4       	ldi	r21, 0x47	; 71
    725e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    7262:	18 16       	cp	r1, r24
    7264:	4c f5       	brge	.+82     	; 0x72b8 <Enter_Admin_Pass+0x16a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7266:	6f a1       	ldd	r22, Y+39	; 0x27
    7268:	78 a5       	ldd	r23, Y+40	; 0x28
    726a:	89 a5       	ldd	r24, Y+41	; 0x29
    726c:	9a a5       	ldd	r25, Y+42	; 0x2a
    726e:	20 e0       	ldi	r18, 0x00	; 0
    7270:	30 e0       	ldi	r19, 0x00	; 0
    7272:	40 e2       	ldi	r20, 0x20	; 32
    7274:	51 e4       	ldi	r21, 0x41	; 65
    7276:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    727a:	dc 01       	movw	r26, r24
    727c:	cb 01       	movw	r24, r22
    727e:	bc 01       	movw	r22, r24
    7280:	cd 01       	movw	r24, r26
    7282:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7286:	dc 01       	movw	r26, r24
    7288:	cb 01       	movw	r24, r22
    728a:	9a a3       	std	Y+34, r25	; 0x22
    728c:	89 a3       	std	Y+33, r24	; 0x21
    728e:	0f c0       	rjmp	.+30     	; 0x72ae <Enter_Admin_Pass+0x160>
    7290:	88 ec       	ldi	r24, 0xC8	; 200
    7292:	90 e0       	ldi	r25, 0x00	; 0
    7294:	98 a3       	std	Y+32, r25	; 0x20
    7296:	8f 8f       	std	Y+31, r24	; 0x1f
    7298:	8f 8d       	ldd	r24, Y+31	; 0x1f
    729a:	98 a1       	ldd	r25, Y+32	; 0x20
    729c:	01 97       	sbiw	r24, 0x01	; 1
    729e:	f1 f7       	brne	.-4      	; 0x729c <Enter_Admin_Pass+0x14e>
    72a0:	98 a3       	std	Y+32, r25	; 0x20
    72a2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    72a4:	89 a1       	ldd	r24, Y+33	; 0x21
    72a6:	9a a1       	ldd	r25, Y+34	; 0x22
    72a8:	01 97       	sbiw	r24, 0x01	; 1
    72aa:	9a a3       	std	Y+34, r25	; 0x22
    72ac:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    72ae:	89 a1       	ldd	r24, Y+33	; 0x21
    72b0:	9a a1       	ldd	r25, Y+34	; 0x22
    72b2:	00 97       	sbiw	r24, 0x00	; 0
    72b4:	69 f7       	brne	.-38     	; 0x7290 <Enter_Admin_Pass+0x142>
    72b6:	14 c0       	rjmp	.+40     	; 0x72e0 <Enter_Admin_Pass+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    72b8:	6b a1       	ldd	r22, Y+35	; 0x23
    72ba:	7c a1       	ldd	r23, Y+36	; 0x24
    72bc:	8d a1       	ldd	r24, Y+37	; 0x25
    72be:	9e a1       	ldd	r25, Y+38	; 0x26
    72c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    72c4:	dc 01       	movw	r26, r24
    72c6:	cb 01       	movw	r24, r22
    72c8:	9a a3       	std	Y+34, r25	; 0x22
    72ca:	89 a3       	std	Y+33, r24	; 0x21
    72cc:	89 a1       	ldd	r24, Y+33	; 0x21
    72ce:	9a a1       	ldd	r25, Y+34	; 0x22
    72d0:	9e 8f       	std	Y+30, r25	; 0x1e
    72d2:	8d 8f       	std	Y+29, r24	; 0x1d
    72d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    72d6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    72d8:	01 97       	sbiw	r24, 0x01	; 1
    72da:	f1 f7       	brne	.-4      	; 0x72d8 <Enter_Admin_Pass+0x18a>
    72dc:	9e 8f       	std	Y+30, r25	; 0x1e
    72de:	8d 8f       	std	Y+29, r24	; 0x1d
						Admin_input=0;
					}
			}
		 }
		 _delay_ms(500);
		 if(counter == 4)
    72e0:	8e a5       	ldd	r24, Y+46	; 0x2e
    72e2:	84 30       	cpi	r24, 0x04	; 4
    72e4:	f1 f4       	brne	.+60     	; 0x7322 <Enter_Admin_Pass+0x1d4>
		 {
			 for(i=0;i<=3;i++)
    72e6:	1d a6       	std	Y+45, r1	; 0x2d
    72e8:	19 c0       	rjmp	.+50     	; 0x731c <Enter_Admin_Pass+0x1ce>
			 {
				 if (Admin_Pass[i]==User_Pass_Input[i])
    72ea:	8d a5       	ldd	r24, Y+45	; 0x2d
    72ec:	28 2f       	mov	r18, r24
    72ee:	30 e0       	ldi	r19, 0x00	; 0
    72f0:	ce 01       	movw	r24, r28
    72f2:	c0 96       	adiw	r24, 0x30	; 48
    72f4:	fc 01       	movw	r30, r24
    72f6:	e2 0f       	add	r30, r18
    72f8:	f3 1f       	adc	r31, r19
    72fa:	40 81       	ld	r20, Z
    72fc:	8d a5       	ldd	r24, Y+45	; 0x2d
    72fe:	28 2f       	mov	r18, r24
    7300:	30 e0       	ldi	r19, 0x00	; 0
    7302:	ce 01       	movw	r24, r28
    7304:	c4 96       	adiw	r24, 0x34	; 52
    7306:	fc 01       	movw	r30, r24
    7308:	e2 0f       	add	r30, r18
    730a:	f3 1f       	adc	r31, r19
    730c:	80 81       	ld	r24, Z
    730e:	48 17       	cp	r20, r24
    7310:	11 f0       	breq	.+4      	; 0x7316 <Enter_Admin_Pass+0x1c8>
				 {
					 continue;
				 }
				 else
				 {
					 flag=1;
    7312:	81 e0       	ldi	r24, 0x01	; 1
    7314:	8c a7       	std	Y+44, r24	; 0x2c
			}
		 }
		 _delay_ms(500);
		 if(counter == 4)
		 {
			 for(i=0;i<=3;i++)
    7316:	8d a5       	ldd	r24, Y+45	; 0x2d
    7318:	8f 5f       	subi	r24, 0xFF	; 255
    731a:	8d a7       	std	Y+45, r24	; 0x2d
    731c:	8d a5       	ldd	r24, Y+45	; 0x2d
    731e:	84 30       	cpi	r24, 0x04	; 4
    7320:	20 f3       	brcs	.-56     	; 0x72ea <Enter_Admin_Pass+0x19c>
				 {
					 flag=1;
				 }
			 }
		 }
		 if(flag==1)
    7322:	8c a5       	ldd	r24, Y+44	; 0x2c
    7324:	81 30       	cpi	r24, 0x01	; 1
    7326:	09 f0       	breq	.+2      	; 0x732a <Enter_Admin_Pass+0x1dc>
    7328:	9b c0       	rjmp	.+310    	; 0x7460 <Enter_Admin_Pass+0x312>
		 {
			 LCD_CLR();
    732a:	0e 94 2b 13 	call	0x2656	; 0x2656 <LCD_CLR>
			 Bluetooth_SendString("\n--------------------\n");
    732e:	80 e6       	ldi	r24, 0x60	; 96
    7330:	90 e0       	ldi	r25, 0x00	; 0
    7332:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
			 Bluetooth_SendString("Wrong Password");
    7336:	80 ee       	ldi	r24, 0xE0	; 224
    7338:	94 e0       	ldi	r25, 0x04	; 4
    733a:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
			 LCD_WriteString("Wrong Pass");
    733e:	82 e1       	ldi	r24, 0x12	; 18
    7340:	91 e0       	ldi	r25, 0x01	; 1
    7342:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LCD_WriteString>
			 flag=0;
    7346:	1c a6       	std	Y+44, r1	; 0x2c
			 counter=0;//to reset the array
    7348:	1e a6       	std	Y+46, r1	; 0x2e
			 Admin_Max_Trial_counter++;
    734a:	8b a5       	ldd	r24, Y+43	; 0x2b
    734c:	8f 5f       	subi	r24, 0xFF	; 255
    734e:	8b a7       	std	Y+43, r24	; 0x2b
    7350:	80 e0       	ldi	r24, 0x00	; 0
    7352:	90 e4       	ldi	r25, 0x40	; 64
    7354:	ac e1       	ldi	r26, 0x1C	; 28
    7356:	b5 e4       	ldi	r27, 0x45	; 69
    7358:	89 8f       	std	Y+25, r24	; 0x19
    735a:	9a 8f       	std	Y+26, r25	; 0x1a
    735c:	ab 8f       	std	Y+27, r26	; 0x1b
    735e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7360:	69 8d       	ldd	r22, Y+25	; 0x19
    7362:	7a 8d       	ldd	r23, Y+26	; 0x1a
    7364:	8b 8d       	ldd	r24, Y+27	; 0x1b
    7366:	9c 8d       	ldd	r25, Y+28	; 0x1c
    7368:	20 e0       	ldi	r18, 0x00	; 0
    736a:	30 e0       	ldi	r19, 0x00	; 0
    736c:	4a ef       	ldi	r20, 0xFA	; 250
    736e:	54 e4       	ldi	r21, 0x44	; 68
    7370:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7374:	dc 01       	movw	r26, r24
    7376:	cb 01       	movw	r24, r22
    7378:	8d 8b       	std	Y+21, r24	; 0x15
    737a:	9e 8b       	std	Y+22, r25	; 0x16
    737c:	af 8b       	std	Y+23, r26	; 0x17
    737e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    7380:	6d 89       	ldd	r22, Y+21	; 0x15
    7382:	7e 89       	ldd	r23, Y+22	; 0x16
    7384:	8f 89       	ldd	r24, Y+23	; 0x17
    7386:	98 8d       	ldd	r25, Y+24	; 0x18
    7388:	20 e0       	ldi	r18, 0x00	; 0
    738a:	30 e0       	ldi	r19, 0x00	; 0
    738c:	40 e8       	ldi	r20, 0x80	; 128
    738e:	5f e3       	ldi	r21, 0x3F	; 63
    7390:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    7394:	88 23       	and	r24, r24
    7396:	2c f4       	brge	.+10     	; 0x73a2 <Enter_Admin_Pass+0x254>
		__ticks = 1;
    7398:	81 e0       	ldi	r24, 0x01	; 1
    739a:	90 e0       	ldi	r25, 0x00	; 0
    739c:	9c 8b       	std	Y+20, r25	; 0x14
    739e:	8b 8b       	std	Y+19, r24	; 0x13
    73a0:	3f c0       	rjmp	.+126    	; 0x7420 <Enter_Admin_Pass+0x2d2>
	else if (__tmp > 65535)
    73a2:	6d 89       	ldd	r22, Y+21	; 0x15
    73a4:	7e 89       	ldd	r23, Y+22	; 0x16
    73a6:	8f 89       	ldd	r24, Y+23	; 0x17
    73a8:	98 8d       	ldd	r25, Y+24	; 0x18
    73aa:	20 e0       	ldi	r18, 0x00	; 0
    73ac:	3f ef       	ldi	r19, 0xFF	; 255
    73ae:	4f e7       	ldi	r20, 0x7F	; 127
    73b0:	57 e4       	ldi	r21, 0x47	; 71
    73b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    73b6:	18 16       	cp	r1, r24
    73b8:	4c f5       	brge	.+82     	; 0x740c <Enter_Admin_Pass+0x2be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    73ba:	69 8d       	ldd	r22, Y+25	; 0x19
    73bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    73be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    73c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    73c2:	20 e0       	ldi	r18, 0x00	; 0
    73c4:	30 e0       	ldi	r19, 0x00	; 0
    73c6:	40 e2       	ldi	r20, 0x20	; 32
    73c8:	51 e4       	ldi	r21, 0x41	; 65
    73ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    73ce:	dc 01       	movw	r26, r24
    73d0:	cb 01       	movw	r24, r22
    73d2:	bc 01       	movw	r22, r24
    73d4:	cd 01       	movw	r24, r26
    73d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    73da:	dc 01       	movw	r26, r24
    73dc:	cb 01       	movw	r24, r22
    73de:	9c 8b       	std	Y+20, r25	; 0x14
    73e0:	8b 8b       	std	Y+19, r24	; 0x13
    73e2:	0f c0       	rjmp	.+30     	; 0x7402 <Enter_Admin_Pass+0x2b4>
    73e4:	88 ec       	ldi	r24, 0xC8	; 200
    73e6:	90 e0       	ldi	r25, 0x00	; 0
    73e8:	9a 8b       	std	Y+18, r25	; 0x12
    73ea:	89 8b       	std	Y+17, r24	; 0x11
    73ec:	89 89       	ldd	r24, Y+17	; 0x11
    73ee:	9a 89       	ldd	r25, Y+18	; 0x12
    73f0:	01 97       	sbiw	r24, 0x01	; 1
    73f2:	f1 f7       	brne	.-4      	; 0x73f0 <Enter_Admin_Pass+0x2a2>
    73f4:	9a 8b       	std	Y+18, r25	; 0x12
    73f6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    73f8:	8b 89       	ldd	r24, Y+19	; 0x13
    73fa:	9c 89       	ldd	r25, Y+20	; 0x14
    73fc:	01 97       	sbiw	r24, 0x01	; 1
    73fe:	9c 8b       	std	Y+20, r25	; 0x14
    7400:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7402:	8b 89       	ldd	r24, Y+19	; 0x13
    7404:	9c 89       	ldd	r25, Y+20	; 0x14
    7406:	00 97       	sbiw	r24, 0x00	; 0
    7408:	69 f7       	brne	.-38     	; 0x73e4 <Enter_Admin_Pass+0x296>
    740a:	14 c0       	rjmp	.+40     	; 0x7434 <Enter_Admin_Pass+0x2e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    740c:	6d 89       	ldd	r22, Y+21	; 0x15
    740e:	7e 89       	ldd	r23, Y+22	; 0x16
    7410:	8f 89       	ldd	r24, Y+23	; 0x17
    7412:	98 8d       	ldd	r25, Y+24	; 0x18
    7414:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7418:	dc 01       	movw	r26, r24
    741a:	cb 01       	movw	r24, r22
    741c:	9c 8b       	std	Y+20, r25	; 0x14
    741e:	8b 8b       	std	Y+19, r24	; 0x13
    7420:	8b 89       	ldd	r24, Y+19	; 0x13
    7422:	9c 89       	ldd	r25, Y+20	; 0x14
    7424:	98 8b       	std	Y+16, r25	; 0x10
    7426:	8f 87       	std	Y+15, r24	; 0x0f
    7428:	8f 85       	ldd	r24, Y+15	; 0x0f
    742a:	98 89       	ldd	r25, Y+16	; 0x10
    742c:	01 97       	sbiw	r24, 0x01	; 1
    742e:	f1 f7       	brne	.-4      	; 0x742c <Enter_Admin_Pass+0x2de>
    7430:	98 8b       	std	Y+16, r25	; 0x10
    7432:	8f 87       	std	Y+15, r24	; 0x0f
			 _delay_ms(2500);
			 LCD_CLR();
    7434:	0e 94 2b 13 	call	0x2656	; 0x2656 <LCD_CLR>
			 Bluetooth_SendString("\n--------------------\n");
    7438:	80 e6       	ldi	r24, 0x60	; 96
    743a:	90 e0       	ldi	r25, 0x00	; 0
    743c:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
			 Bluetooth_SendString("Enter Admin Password");
    7440:	8f ee       	ldi	r24, 0xEF	; 239
    7442:	94 e0       	ldi	r25, 0x04	; 4
    7444:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
			 LCD_WriteString("Enter Admin Pass");
    7448:	81 e0       	ldi	r24, 0x01	; 1
    744a:	91 e0       	ldi	r25, 0x01	; 1
    744c:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LCD_WriteString>
			 LCD_goto(5,1);
    7450:	85 e0       	ldi	r24, 0x05	; 5
    7452:	61 e0       	ldi	r22, 0x01	; 1
    7454:	0e 94 13 13 	call	0x2626	; 0x2626 <LCD_goto>
		 else
		 {
			 Admin_Max_Trial_counter=4;
			 return 1;
		 }
		 if (Admin_Max_Trial_counter==3)
    7458:	8b a5       	ldd	r24, Y+43	; 0x2b
    745a:	83 30       	cpi	r24, 0x03	; 3
    745c:	31 f0       	breq	.+12     	; 0x746a <Enter_Admin_Pass+0x31c>
    745e:	8c c0       	rjmp	.+280    	; 0x7578 <Enter_Admin_Pass+0x42a>
			 LCD_goto(5,1);

		 }
		 else
		 {
			 Admin_Max_Trial_counter=4;
    7460:	84 e0       	ldi	r24, 0x04	; 4
    7462:	8b a7       	std	Y+43, r24	; 0x2b
			 return 1;
    7464:	81 e0       	ldi	r24, 0x01	; 1
    7466:	88 af       	std	Y+56, r24	; 0x38
    7468:	8c c0       	rjmp	.+280    	; 0x7582 <Enter_Admin_Pass+0x434>
		 }
		 if (Admin_Max_Trial_counter==3)
		 {
			 LCD_CLR();
    746a:	0e 94 2b 13 	call	0x2656	; 0x2656 <LCD_CLR>
			 Bluetooth_SendString("\n--------------------\n");
    746e:	80 e6       	ldi	r24, 0x60	; 96
    7470:	90 e0       	ldi	r25, 0x00	; 0
    7472:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
			 Bluetooth_SendString("Timed Out");
    7476:	80 ea       	ldi	r24, 0xA0	; 160
    7478:	92 e0       	ldi	r25, 0x02	; 2
    747a:	0e 94 b2 1a 	call	0x3564	; 0x3564 <Bluetooth_SendString>
			 LCD_WriteString("Time Out");
    747e:	86 e3       	ldi	r24, 0x36	; 54
    7480:	91 e0       	ldi	r25, 0x01	; 1
    7482:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LCD_WriteString>
    7486:	80 e0       	ldi	r24, 0x00	; 0
    7488:	90 e0       	ldi	r25, 0x00	; 0
    748a:	aa e7       	ldi	r26, 0x7A	; 122
    748c:	b4 e4       	ldi	r27, 0x44	; 68
    748e:	8b 87       	std	Y+11, r24	; 0x0b
    7490:	9c 87       	std	Y+12, r25	; 0x0c
    7492:	ad 87       	std	Y+13, r26	; 0x0d
    7494:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7496:	6b 85       	ldd	r22, Y+11	; 0x0b
    7498:	7c 85       	ldd	r23, Y+12	; 0x0c
    749a:	8d 85       	ldd	r24, Y+13	; 0x0d
    749c:	9e 85       	ldd	r25, Y+14	; 0x0e
    749e:	20 e0       	ldi	r18, 0x00	; 0
    74a0:	30 e0       	ldi	r19, 0x00	; 0
    74a2:	4a ef       	ldi	r20, 0xFA	; 250
    74a4:	54 e4       	ldi	r21, 0x44	; 68
    74a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    74aa:	dc 01       	movw	r26, r24
    74ac:	cb 01       	movw	r24, r22
    74ae:	8f 83       	std	Y+7, r24	; 0x07
    74b0:	98 87       	std	Y+8, r25	; 0x08
    74b2:	a9 87       	std	Y+9, r26	; 0x09
    74b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    74b6:	6f 81       	ldd	r22, Y+7	; 0x07
    74b8:	78 85       	ldd	r23, Y+8	; 0x08
    74ba:	89 85       	ldd	r24, Y+9	; 0x09
    74bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    74be:	20 e0       	ldi	r18, 0x00	; 0
    74c0:	30 e0       	ldi	r19, 0x00	; 0
    74c2:	40 e8       	ldi	r20, 0x80	; 128
    74c4:	5f e3       	ldi	r21, 0x3F	; 63
    74c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    74ca:	88 23       	and	r24, r24
    74cc:	2c f4       	brge	.+10     	; 0x74d8 <Enter_Admin_Pass+0x38a>
		__ticks = 1;
    74ce:	81 e0       	ldi	r24, 0x01	; 1
    74d0:	90 e0       	ldi	r25, 0x00	; 0
    74d2:	9e 83       	std	Y+6, r25	; 0x06
    74d4:	8d 83       	std	Y+5, r24	; 0x05
    74d6:	3f c0       	rjmp	.+126    	; 0x7556 <Enter_Admin_Pass+0x408>
	else if (__tmp > 65535)
    74d8:	6f 81       	ldd	r22, Y+7	; 0x07
    74da:	78 85       	ldd	r23, Y+8	; 0x08
    74dc:	89 85       	ldd	r24, Y+9	; 0x09
    74de:	9a 85       	ldd	r25, Y+10	; 0x0a
    74e0:	20 e0       	ldi	r18, 0x00	; 0
    74e2:	3f ef       	ldi	r19, 0xFF	; 255
    74e4:	4f e7       	ldi	r20, 0x7F	; 127
    74e6:	57 e4       	ldi	r21, 0x47	; 71
    74e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    74ec:	18 16       	cp	r1, r24
    74ee:	4c f5       	brge	.+82     	; 0x7542 <Enter_Admin_Pass+0x3f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    74f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    74f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    74f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    74f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    74f8:	20 e0       	ldi	r18, 0x00	; 0
    74fa:	30 e0       	ldi	r19, 0x00	; 0
    74fc:	40 e2       	ldi	r20, 0x20	; 32
    74fe:	51 e4       	ldi	r21, 0x41	; 65
    7500:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7504:	dc 01       	movw	r26, r24
    7506:	cb 01       	movw	r24, r22
    7508:	bc 01       	movw	r22, r24
    750a:	cd 01       	movw	r24, r26
    750c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7510:	dc 01       	movw	r26, r24
    7512:	cb 01       	movw	r24, r22
    7514:	9e 83       	std	Y+6, r25	; 0x06
    7516:	8d 83       	std	Y+5, r24	; 0x05
    7518:	0f c0       	rjmp	.+30     	; 0x7538 <Enter_Admin_Pass+0x3ea>
    751a:	88 ec       	ldi	r24, 0xC8	; 200
    751c:	90 e0       	ldi	r25, 0x00	; 0
    751e:	9c 83       	std	Y+4, r25	; 0x04
    7520:	8b 83       	std	Y+3, r24	; 0x03
    7522:	8b 81       	ldd	r24, Y+3	; 0x03
    7524:	9c 81       	ldd	r25, Y+4	; 0x04
    7526:	01 97       	sbiw	r24, 0x01	; 1
    7528:	f1 f7       	brne	.-4      	; 0x7526 <Enter_Admin_Pass+0x3d8>
    752a:	9c 83       	std	Y+4, r25	; 0x04
    752c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    752e:	8d 81       	ldd	r24, Y+5	; 0x05
    7530:	9e 81       	ldd	r25, Y+6	; 0x06
    7532:	01 97       	sbiw	r24, 0x01	; 1
    7534:	9e 83       	std	Y+6, r25	; 0x06
    7536:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7538:	8d 81       	ldd	r24, Y+5	; 0x05
    753a:	9e 81       	ldd	r25, Y+6	; 0x06
    753c:	00 97       	sbiw	r24, 0x00	; 0
    753e:	69 f7       	brne	.-38     	; 0x751a <Enter_Admin_Pass+0x3cc>
    7540:	14 c0       	rjmp	.+40     	; 0x756a <Enter_Admin_Pass+0x41c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7542:	6f 81       	ldd	r22, Y+7	; 0x07
    7544:	78 85       	ldd	r23, Y+8	; 0x08
    7546:	89 85       	ldd	r24, Y+9	; 0x09
    7548:	9a 85       	ldd	r25, Y+10	; 0x0a
    754a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    754e:	dc 01       	movw	r26, r24
    7550:	cb 01       	movw	r24, r22
    7552:	9e 83       	std	Y+6, r25	; 0x06
    7554:	8d 83       	std	Y+5, r24	; 0x05
    7556:	8d 81       	ldd	r24, Y+5	; 0x05
    7558:	9e 81       	ldd	r25, Y+6	; 0x06
    755a:	9a 83       	std	Y+2, r25	; 0x02
    755c:	89 83       	std	Y+1, r24	; 0x01
    755e:	89 81       	ldd	r24, Y+1	; 0x01
    7560:	9a 81       	ldd	r25, Y+2	; 0x02
    7562:	01 97       	sbiw	r24, 0x01	; 1
    7564:	f1 f7       	brne	.-4      	; 0x7562 <Enter_Admin_Pass+0x414>
    7566:	9a 83       	std	Y+2, r25	; 0x02
    7568:	89 83       	std	Y+1, r24	; 0x01
			 _delay_ms(1000);
			 Time_Out_Function();
    756a:	0e 94 0f 25 	call	0x4a1e	; 0x4a1e <Time_Out_Function>
			 Delete_User_Global_Return=1;
    756e:	81 e0       	ldi	r24, 0x01	; 1
    7570:	80 93 31 05 	sts	0x0531, r24
				return 0;
    7574:	18 ae       	std	Y+56, r1	; 0x38
    7576:	05 c0       	rjmp	.+10     	; 0x7582 <Enter_Admin_Pass+0x434>
	 u8 Admin_Max_Trial_counter=0;//for maximum trial of password of3 times
	 Bluetooth_SendString("\n--------------------\n");
	 Bluetooth_SendString("Enter Admin Pass");
	 LCD_WriteString("Enter Admin Pass");
	 LCD_goto(5,1);
	 while(Admin_Max_Trial_counter<=3)
    7578:	8b a5       	ldd	r24, Y+43	; 0x2b
    757a:	84 30       	cpi	r24, 0x04	; 4
    757c:	08 f4       	brcc	.+2      	; 0x7580 <Enter_Admin_Pass+0x432>
    757e:	3b ce       	rjmp	.-906    	; 0x71f6 <Enter_Admin_Pass+0xa8>
    7580:	02 c0       	rjmp	.+4      	; 0x7586 <Enter_Admin_Pass+0x438>
			 Time_Out_Function();
			 Delete_User_Global_Return=1;
				return 0;
		 }
	 }
}
    7582:	88 ad       	ldd	r24, Y+56	; 0x38
    7584:	89 af       	std	Y+57, r24	; 0x39
    7586:	89 ad       	ldd	r24, Y+57	; 0x39
    7588:	e9 96       	adiw	r28, 0x39	; 57
    758a:	0f b6       	in	r0, 0x3f	; 63
    758c:	f8 94       	cli
    758e:	de bf       	out	0x3e, r29	; 62
    7590:	0f be       	out	0x3f, r0	; 63
    7592:	cd bf       	out	0x3d, r28	; 61
    7594:	cf 91       	pop	r28
    7596:	df 91       	pop	r29
    7598:	08 95       	ret

0000759a <__udivmodhi4>:
    759a:	aa 1b       	sub	r26, r26
    759c:	bb 1b       	sub	r27, r27
    759e:	51 e1       	ldi	r21, 0x11	; 17
    75a0:	07 c0       	rjmp	.+14     	; 0x75b0 <__udivmodhi4_ep>

000075a2 <__udivmodhi4_loop>:
    75a2:	aa 1f       	adc	r26, r26
    75a4:	bb 1f       	adc	r27, r27
    75a6:	a6 17       	cp	r26, r22
    75a8:	b7 07       	cpc	r27, r23
    75aa:	10 f0       	brcs	.+4      	; 0x75b0 <__udivmodhi4_ep>
    75ac:	a6 1b       	sub	r26, r22
    75ae:	b7 0b       	sbc	r27, r23

000075b0 <__udivmodhi4_ep>:
    75b0:	88 1f       	adc	r24, r24
    75b2:	99 1f       	adc	r25, r25
    75b4:	5a 95       	dec	r21
    75b6:	a9 f7       	brne	.-22     	; 0x75a2 <__udivmodhi4_loop>
    75b8:	80 95       	com	r24
    75ba:	90 95       	com	r25
    75bc:	bc 01       	movw	r22, r24
    75be:	cd 01       	movw	r24, r26
    75c0:	08 95       	ret

000075c2 <__udivmodsi4>:
    75c2:	a1 e2       	ldi	r26, 0x21	; 33
    75c4:	1a 2e       	mov	r1, r26
    75c6:	aa 1b       	sub	r26, r26
    75c8:	bb 1b       	sub	r27, r27
    75ca:	fd 01       	movw	r30, r26
    75cc:	0d c0       	rjmp	.+26     	; 0x75e8 <__udivmodsi4_ep>

000075ce <__udivmodsi4_loop>:
    75ce:	aa 1f       	adc	r26, r26
    75d0:	bb 1f       	adc	r27, r27
    75d2:	ee 1f       	adc	r30, r30
    75d4:	ff 1f       	adc	r31, r31
    75d6:	a2 17       	cp	r26, r18
    75d8:	b3 07       	cpc	r27, r19
    75da:	e4 07       	cpc	r30, r20
    75dc:	f5 07       	cpc	r31, r21
    75de:	20 f0       	brcs	.+8      	; 0x75e8 <__udivmodsi4_ep>
    75e0:	a2 1b       	sub	r26, r18
    75e2:	b3 0b       	sbc	r27, r19
    75e4:	e4 0b       	sbc	r30, r20
    75e6:	f5 0b       	sbc	r31, r21

000075e8 <__udivmodsi4_ep>:
    75e8:	66 1f       	adc	r22, r22
    75ea:	77 1f       	adc	r23, r23
    75ec:	88 1f       	adc	r24, r24
    75ee:	99 1f       	adc	r25, r25
    75f0:	1a 94       	dec	r1
    75f2:	69 f7       	brne	.-38     	; 0x75ce <__udivmodsi4_loop>
    75f4:	60 95       	com	r22
    75f6:	70 95       	com	r23
    75f8:	80 95       	com	r24
    75fa:	90 95       	com	r25
    75fc:	9b 01       	movw	r18, r22
    75fe:	ac 01       	movw	r20, r24
    7600:	bd 01       	movw	r22, r26
    7602:	cf 01       	movw	r24, r30
    7604:	08 95       	ret

00007606 <__prologue_saves__>:
    7606:	2f 92       	push	r2
    7608:	3f 92       	push	r3
    760a:	4f 92       	push	r4
    760c:	5f 92       	push	r5
    760e:	6f 92       	push	r6
    7610:	7f 92       	push	r7
    7612:	8f 92       	push	r8
    7614:	9f 92       	push	r9
    7616:	af 92       	push	r10
    7618:	bf 92       	push	r11
    761a:	cf 92       	push	r12
    761c:	df 92       	push	r13
    761e:	ef 92       	push	r14
    7620:	ff 92       	push	r15
    7622:	0f 93       	push	r16
    7624:	1f 93       	push	r17
    7626:	cf 93       	push	r28
    7628:	df 93       	push	r29
    762a:	cd b7       	in	r28, 0x3d	; 61
    762c:	de b7       	in	r29, 0x3e	; 62
    762e:	ca 1b       	sub	r28, r26
    7630:	db 0b       	sbc	r29, r27
    7632:	0f b6       	in	r0, 0x3f	; 63
    7634:	f8 94       	cli
    7636:	de bf       	out	0x3e, r29	; 62
    7638:	0f be       	out	0x3f, r0	; 63
    763a:	cd bf       	out	0x3d, r28	; 61
    763c:	09 94       	ijmp

0000763e <__epilogue_restores__>:
    763e:	2a 88       	ldd	r2, Y+18	; 0x12
    7640:	39 88       	ldd	r3, Y+17	; 0x11
    7642:	48 88       	ldd	r4, Y+16	; 0x10
    7644:	5f 84       	ldd	r5, Y+15	; 0x0f
    7646:	6e 84       	ldd	r6, Y+14	; 0x0e
    7648:	7d 84       	ldd	r7, Y+13	; 0x0d
    764a:	8c 84       	ldd	r8, Y+12	; 0x0c
    764c:	9b 84       	ldd	r9, Y+11	; 0x0b
    764e:	aa 84       	ldd	r10, Y+10	; 0x0a
    7650:	b9 84       	ldd	r11, Y+9	; 0x09
    7652:	c8 84       	ldd	r12, Y+8	; 0x08
    7654:	df 80       	ldd	r13, Y+7	; 0x07
    7656:	ee 80       	ldd	r14, Y+6	; 0x06
    7658:	fd 80       	ldd	r15, Y+5	; 0x05
    765a:	0c 81       	ldd	r16, Y+4	; 0x04
    765c:	1b 81       	ldd	r17, Y+3	; 0x03
    765e:	aa 81       	ldd	r26, Y+2	; 0x02
    7660:	b9 81       	ldd	r27, Y+1	; 0x01
    7662:	ce 0f       	add	r28, r30
    7664:	d1 1d       	adc	r29, r1
    7666:	0f b6       	in	r0, 0x3f	; 63
    7668:	f8 94       	cli
    766a:	de bf       	out	0x3e, r29	; 62
    766c:	0f be       	out	0x3f, r0	; 63
    766e:	cd bf       	out	0x3d, r28	; 61
    7670:	ed 01       	movw	r28, r26
    7672:	08 95       	ret

00007674 <_exit>:
    7674:	f8 94       	cli

00007676 <__stop_program>:
    7676:	ff cf       	rjmp	.-2      	; 0x7676 <__stop_program>
